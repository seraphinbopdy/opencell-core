{
  "openapi" : "3.0.1",
  "info" : { },
  "security" : [ {
    "auth" : [ ]
  } ],
  "tags" : [ {
    "name" : "BillingCycle",
    "description" : "@%BillingCycle"
  }, {
    "name" : "Calendar",
    "description" : "@%Calendar"
  }, {
    "name" : "Configuration",
    "description" : "@%Configuration"
  }, {
    "name" : "CountryIso",
    "description" : "@%CountryIso"
  }, {
    "name" : "Country",
    "description" : "@%Country"
  }, {
    "name" : "CurrencyIso",
    "description" : "@%CurrencyIso"
  }, {
    "name" : "Currency",
    "description" : "@%Currency"
  }, {
    "name" : "Filter",
    "description" : "@%Filter"
  }, {
    "name" : "GenericCode",
    "description" : "@%GenericCode"
  }, {
    "name" : "InvoiceCategory",
    "description" : "@%InvoiceCategory"
  }, {
    "name" : "InvoiceSequence",
    "description" : "@%InvoiceSequence"
  }, {
    "name" : "InvoiceSubCategory",
    "description" : "@%InvoiceSubCategory"
  }, {
    "name" : "InvoiceType",
    "description" : "@%InvoiceType"
  }, {
    "name" : "LanguageIso",
    "description" : "@%LanguageIso"
  }, {
    "name" : "Language",
    "description" : "@%Language"
  }, {
    "name" : "MassImport",
    "description" : "@%MassImport"
  }, {
    "name" : "OccTemplate",
    "description" : "@%OccTemplate"
  }, {
    "name" : "PdfInvoice",
    "description" : "@%PdfInvoice"
  }, {
    "name" : "Provider",
    "description" : "@%Provider"
  }, {
    "name" : "Query",
    "description" : "@%Query"
  }, {
    "name" : "ScriptInstance",
    "description" : "@%ScriptInstance"
  }, {
    "name" : "Seller",
    "description" : "@%Seller"
  }, {
    "name" : "Tax",
    "description" : "@%Tax"
  }, {
    "name" : "TerminationReason",
    "description" : "@%TerminationReason"
  }, {
    "name" : "Usage",
    "description" : "@%Usage"
  }, {
    "name" : "Access",
    "description" : "@%Access"
  }, {
    "name" : "BusinessAccountModel",
    "description" : "@%BusinessAccountModel"
  }, {
    "name" : "ProviderContact",
    "description" : "@%ProviderContact"
  }, {
    "name" : "Title",
    "description" : "@%Title"
  }, {
    "name" : "Audit",
    "description" : "@%Audit"
  }, {
    "name" : "FileFormat",
    "description" : "@%FileFormat"
  }, {
    "name" : "Files",
    "description" : "@%Files"
  }, {
    "name" : "AccountingCode",
    "description" : "@%AccountingCode"
  }, {
    "name" : "E-Invoice",
    "description" : "@%E-Invoice"
  }, {
    "name" : "InvoicingPlanItem",
    "description" : "@%InvoicingPlanItem"
  }, {
    "name" : "InvoicingPlan",
    "description" : "@%InvoicingPlan"
  }, {
    "name" : "Invoicing",
    "description" : "@%Invoicing"
  }, {
    "name" : "Mediation",
    "description" : "@%Mediation"
  }, {
    "name" : "RatedTransaction",
    "description" : "@%RatedTransaction"
  }, {
    "name" : "Subscription",
    "description" : "@%Subscription"
  }, {
    "name" : "Wallet",
    "description" : "@%Wallet"
  }, {
    "name" : "BundleTemplate",
    "description" : "@%BundleTemplate"
  }, {
    "name" : "BusinessOfferModel",
    "description" : "@%BusinessOfferModel"
  }, {
    "name" : "BusinessProductModel",
    "description" : "@%BusinessProductModel"
  }, {
    "name" : "BusinessServiceModel",
    "description" : "@%BusinessServiceModel"
  }, {
    "name" : "Channel",
    "description" : "@%Channel"
  }, {
    "name" : "ChannelsAndSegments",
    "description" : "@%ChannelsAndSegments"
  }, {
    "name" : "ChargeTemplate",
    "description" : "@%ChargeTemplate"
  }, {
    "name" : "CounterTemplate",
    "description" : "@%CounterTemplate"
  }, {
    "name" : "DiscountPlanItem",
    "description" : "@%DiscountPlanItem"
  }, {
    "name" : "DiscountPlan",
    "description" : "@%DiscountPlan"
  }, {
    "name" : "OfferTemplateCategory",
    "description" : "@%OfferTemplateCategory"
  }, {
    "name" : "OfferTemplate",
    "description" : "@%OfferTemplate"
  }, {
    "name" : "OneShotChargeTemplate",
    "description" : "@%OneShotChargeTemplate"
  }, {
    "name" : "RecurringChargeTemplate",
    "description" : "@%RecurringChargeTemplate"
  }, {
    "name" : "ServiceTemplate",
    "description" : "@%ServiceTemplate"
  }, {
    "name" : "TriggeredEdr",
    "description" : "@%TriggeredEdr"
  }, {
    "name" : "UnitOfMeasure",
    "description" : "@%UnitOfMeasure"
  }, {
    "name" : "UsageChargeTemplate",
    "description" : "@%UsageChargeTemplate"
  }, {
    "name" : "Communication",
    "description" : "@%Communication"
  }, {
    "name" : "EmailTemplate",
    "description" : "@%EmailTemplate"
  }, {
    "name" : "MeveoInstance",
    "description" : "@%MeveoInstance"
  }, {
    "name" : "AddressBook",
    "description" : "@%AddressBook"
  }, {
    "name" : "Contact",
    "description" : "@%Contact"
  }, {
    "name" : "CustomEntityInstance",
    "description" : "@%CustomEntityInstance"
  }, {
    "name" : "CustomFieldTemplate",
    "description" : "@%CustomFieldTemplate"
  }, {
    "name" : "CustomTable",
    "description" : "@%CustomTable"
  }, {
    "name" : "DataCollector",
    "description" : "@%DataCollector"
  }, {
    "name" : "DocumentSign",
    "description" : "@%DocumentSign"
  }, {
    "name" : "PDFDocument",
    "description" : "@%PDFDocument"
  }, {
    "name" : "DunningDocument",
    "description" : "@%DunningDocument"
  }, {
    "name" : "Chart",
    "description" : "@%Chart"
  }, {
    "name" : "MeasurableQuantity",
    "description" : "@%MeasurableQuantity"
  }, {
    "name" : "FilteredList",
    "description" : "@%FilteredList"
  }, {
    "name" : "ReportExtract",
    "description" : "@%ReportExtract"
  }, {
    "name" : "GenericWorkflow",
    "description" : "@%GenericWorkflow"
  }, {
    "name" : "UserHierarchyLevel",
    "description" : "@%UserHierarchyLevel"
  }, {
    "name" : "ImportExport",
    "description" : "@%ImportExport"
  }, {
    "name" : "Invoice",
    "description" : "@%Invoice"
  }, {
    "name" : "paymentTerms",
    "description" : "@%PaymentTermrs"
  }, {
    "name" : "Job",
    "description" : "@%Job"
  }, {
    "name" : "TimerEntity",
    "description" : "@%TimerEntity"
  }, {
    "name" : "MetricsConfiguration",
    "description" : "@%MetricsConfiguration"
  }, {
    "name" : "Module",
    "description" : "@%Module"
  }, {
    "name" : "EmailNotification",
    "description" : "@%EmailNotification"
  }, {
    "name" : "JobTrigger",
    "description" : "@%JobTrigger"
  }, {
    "name" : "Notification",
    "description" : "@%Notification"
  }, {
    "name" : "WebHookNotification",
    "description" : "@%WebHookNotification"
  }, {
    "name" : "AccountOperation",
    "description" : "@%AccountOperation"
  }, {
    "name" : "CreditCategory",
    "description" : "@%CreditCategory"
  }, {
    "name" : "DDRequestLotOp",
    "description" : "@%DDRequestLotOp"
  }, {
    "name" : "IBan",
    "description" : "@%IBan"
  }, {
    "name" : "Payment",
    "description" : "@%Payment"
  }, {
    "name" : "Refund",
    "description" : "@%Refund"
  }, {
    "name" : "RevenueRecognitionRules",
    "description" : "@%RevenueRecognitionRules"
  }, {
    "name" : "RumSequence",
    "description" : "@%RumSequence"
  }, {
    "name" : "TaxCategory",
    "description" : "@%TaxCategory"
  }, {
    "name" : "TaxClass",
    "description" : "@%TaxClass"
  }, {
    "name" : "TaxMapping",
    "description" : "@%TaxMapping"
  }, {
    "name" : "Catalog",
    "description" : "@%Catalog"
  }, {
    "name" : "Order",
    "description" : "@%Order"
  } ],
  "paths" : {
    "/billingCycle" : {
      "get" : {
        "tags" : [ "BillingCycle" ],
        "summary" : " Search for billing cycle with a given code.  ",
        "description" : " Search for billing cycle with a given code.  ",
        "operationId" : "    GET_BillingCycle_search",
        "parameters" : [ {
          "name" : "billingCycleCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " billing cycle if exists ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingCycleResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingCycleResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BillingCycle" ],
        "summary" : " Update an existing billing cycle.  ",
        "description" : " Update an existing billing cycle.  ",
        "operationId" : "    PUT_BillingCycle_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingCycleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingCycleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " actioon result ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BillingCycle" ],
        "summary" : " Create a new billing cycle.  ",
        "description" : " Create a new billing cycle.  ",
        "operationId" : "    POST_BillingCycle_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingCycleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingCycleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billingCycle/createOrUpdate" : {
      "post" : {
        "tags" : [ "BillingCycle" ],
        "summary" : " Create new or update an existing billing cycle with a given code  ",
        "description" : " Create new or update an existing billing cycle with a given code  ",
        "operationId" : "    POST_BillingCycle_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingCycleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingCycleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billingCycle/version" : {
      "get" : {
        "tags" : [ "Application", "BillingCycle" ],
        "summary" : "Get version of application",
        "operationId" : "index",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billingCycle/list" : {
      "get" : {
        "tags" : [ "BillingCycle" ],
        "summary" : " Search for list of billingCycles. ",
        "description" : " Search for list of billingCycles. ",
        "operationId" : "    GET_BillingCycle_list",
        "responses" : {
          "default" : {
            "description" : " list of billingCycles ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingCyclesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingCyclesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billingCycle/{billingCycleCode}" : {
      "delete" : {
        "tags" : [ "BillingCycle" ],
        "summary" : " Remove an existing billing cycle with a given code.  ",
        "description" : " Remove an existing billing cycle with a given code.  ",
        "operationId" : "    DELETE_BillingCycle_{billingCycleCode}",
        "parameters" : [ {
          "name" : "billingCycleCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action result ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/calendar" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : " Search for calendar with a given code.  ",
        "description" : " Search for calendar with a given code.  ",
        "operationId" : "    GET_Calendar_search",
        "parameters" : [ {
          "name" : "calendarCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " calendar if exists ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCalendarResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCalendarResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Calendar" ],
        "summary" : " Update calendar.  ",
        "description" : " Update calendar.  ",
        "operationId" : "    PUT_Calendar_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalendarDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalendarDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Calendar" ],
        "summary" : " Create a new calendar.  ",
        "description" : " Create a new calendar.  ",
        "operationId" : "    POST_Calendar_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalendarDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalendarDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/createOrUpdate" : {
      "post" : {
        "tags" : [ "Calendar" ],
        "summary" : " Create new or update an existing calendar with a given code.  ",
        "description" : " Create new or update an existing calendar with a given code.  ",
        "operationId" : "    POST _Calendar_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalendarDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalendarDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/bankingDateStatus" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : " Gets the banking date status. ",
        "description" : " Gets the banking date status. ",
        "operationId" : "    GET_Calendar_bankingDateStatus",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the banking date status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankingDateStatusResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankingDateStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/version" : {
      "get" : {
        "tags" : [ "Application", "Calendar" ],
        "summary" : "Get version of application",
        "operationId" : "index_1",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/list" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : " Retrieve a list of all calendars.  ",
        "description" : " Retrieve a list of all calendars.  ",
        "operationId" : "    GET _Calendar_list",
        "responses" : {
          "default" : {
            "description" : " list of all calendars ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCalendarResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCalendarResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/listGetAll" : {
      "get" : {
        "tags" : [ "Calendar" ],
        "summary" : " List Calendars matching a given criteria ",
        "description" : " List Calendars matching a given criteria ",
        "operationId" : "    GET_Calendar_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of Calendars ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCalendarResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCalendarResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{calendarCode}" : {
      "delete" : {
        "tags" : [ "Calendar" ],
        "summary" : " Remove calendar with a given code.  ",
        "description" : " Remove calendar with a given code.  ",
        "operationId" : "    DELETE _Calendar_{calendarCode}",
        "parameters" : [ {
          "name" : "calendarCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action result ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/configurations/properties" : {
      "get" : {
        "tags" : [ "Configuration" ],
        "summary" : " Converts system properties into json string.  ",
        "description" : " Converts system properties into json string.  ",
        "operationId" : "    GET_Configuration_properties",
        "responses" : {
          "default" : {
            "description" : " system properties ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConfigurationResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Configuration" ],
        "summary" : " set configuration property  ",
        "description" : " set configuration property  ",
        "operationId" : "    POST_Configuration_properties",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PropertiesDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PropertiesDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/configurations/version" : {
      "get" : {
        "tags" : [ "Application", "Configuration" ],
        "summary" : "Get version of application",
        "operationId" : "index_2",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/configurations" : {
      "post" : {
        "tags" : [ "Configuration" ],
        "summary" : " set configuration property ",
        "description" : " set configuration property ",
        "operationId" : "    POST_Configuration_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConfigurationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConfigurationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/countryIso" : {
      "get" : {
        "tags" : [ "CountryIso" ],
        "summary" : " Search country with a given country code.  ",
        "description" : " Search country with a given country code.  ",
        "operationId" : "    GET_CountryIso_ ",
        "parameters" : [ {
          "name" : "countryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "link org.meveo.api.dto.response.GetCountryIsoResponse}. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountryIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountryIsoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CountryIso" ],
        "summary" : " Modify a country",
        "description" : " Modify a country. Same input parameter as create. The country and tradingCountry are created if they don't exists. The operation fails if the tradingCountry is null.  ",
        "operationId" : "    PUT_CountryIso_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CountryIso" ],
        "summary" : " Creates a tradingCountry base from the supplied country code",
        "description" : " Creates a tradingCountry base from the supplied country code. If the country code does not exists, a country and tradingCountry records are created  ",
        "operationId" : "    POST_CountryIso_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/countryIso/createOrUpdate" : {
      "post" : {
        "tags" : [ "CountryIso" ],
        "summary" : " Creates or modify a tradingCountry base from the supplied country code. ",
        "description" : " Creates or modify a tradingCountry base from the supplied country code. ",
        "operationId" : "    POST_CountryIso_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/countryIso/version" : {
      "get" : {
        "tags" : [ "Application", "CountryIso" ],
        "summary" : "Get version of application",
        "operationId" : "index_3",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/countryIso/list" : {
      "get" : {
        "tags" : [ "CountryIso" ],
        "summary" : " List all countries. ",
        "description" : " List all countries. ",
        "operationId" : "    GET_CountryIso_list",
        "responses" : {
          "default" : {
            "description" : " list of countries ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountriesIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountriesIsoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/countryIso/listGetAll" : {
      "get" : {
        "tags" : [ "CountryIso" ],
        "summary" : " List countries ISO matching a given criteria ",
        "description" : " List countries ISO matching a given criteria ",
        "operationId" : "    GET_CountryIso_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of countries ISO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountriesIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountriesIsoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/countryIso/{countryCode}" : {
      "delete" : {
        "tags" : [ "CountryIso" ],
        "summary" : " Does not delete a country but the tradingCountry associated to it.  ",
        "description" : " Does not delete a country but the tradingCountry associated to it.  ",
        "operationId" : "    DELETE_CountryIso_{countryCode}",
        "parameters" : [ {
          "name" : "countryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country" : {
      "get" : {
        "tags" : [ "Country" ],
        "summary" : " Search Trading country with a given country code.  ",
        "description" : " Search Trading country with a given country code.  ",
        "operationId" : "    GET_Country_search",
        "parameters" : [ {
          "name" : "countryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "link org.meveo.api.dto.response.GetCountryResponse}. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingCountryResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingCountryResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Country" ],
        "summary" : " Modify a country",
        "description" : " Modify a country. Same input parameter as create. The country and tradingCountry are created if they don't exists. The operation fails if the tradingCountry is null.  ",
        "operationId" : "    PUT_Country_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Country" ],
        "summary" : " Creates a Trading Country base from the supplied country code",
        "description" : " Creates a Trading Country base from the supplied country code. If the country code does not exists, a country and tradingCountry records are created  ",
        "operationId" : "    POST_Country_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country/createOrUpdate" : {
      "post" : {
        "tags" : [ "Country" ],
        "summary" : " Create or update a Trading Country base from the supplied country code",
        "description" : " Create or update a Trading Country base from the supplied country code. If the country code does not exists, a country and tradingCountry records are created ",
        "operationId" : "    POST_Country_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country/{code}/disable" : {
      "post" : {
        "tags" : [ "Country" ],
        "summary" : " Disable a Trading country with a given country code  ",
        "description" : " Disable a Trading country with a given country code  ",
        "operationId" : "    POST_Country_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country/{code}/enable" : {
      "post" : {
        "tags" : [ "Country" ],
        "summary" : " Enable a Trading country with a given country code  ",
        "description" : " Enable a Trading country with a given country code  ",
        "operationId" : "    POST_Country_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country/version" : {
      "get" : {
        "tags" : [ "Application", "Country" ],
        "summary" : "Get version of application",
        "operationId" : "index_4",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country/list" : {
      "get" : {
        "tags" : [ "Country" ],
        "summary" : " Search for list of trading countries. ",
        "description" : " Search for list of trading countries. ",
        "operationId" : "    GET_Country_list",
        "responses" : {
          "default" : {
            "description" : " list of trading countries ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TradingCountriesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TradingCountriesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/country/{countryCode}" : {
      "delete" : {
        "tags" : [ "Country" ],
        "summary" : " Does not delete a country but the tradingCountry associated to it. ",
        "description" : " Does not delete a country but the tradingCountry associated to it. ",
        "operationId" : "    DELETE_Country_{countryCode}",
        "parameters" : [ {
          "name" : "countryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/country/{countryCode}/{currencyCode}" : {
      "delete" : {
        "tags" : [ "Country" ],
        "summary" : " Does not delete a country but the tradingCountry associated to it.  ",
        "description" : " Does not delete a country but the tradingCountry associated to it.  ",
        "operationId" : "    DELETE_Country_{countryCode}_{currencyCode}",
        "parameters" : [ {
          "name" : "countryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currencyCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currencyIso" : {
      "get" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " Search currency with a given currency code.  ",
        "description" : " Search currency with a given currency code.  ",
        "operationId" : "    GET_CurrencyIso_ ",
        "parameters" : [ {
          "name" : "currencyCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " currency iso if found. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrencyIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrencyIsoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " Modify a currency",
        "description" : " Modify a currency. Same input parameter as create. The operation fails if the currency is null  ",
        "operationId" : "    PUT_CurrencyIso_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " Creates currency base on currency code. If the currency code does not exists, a currency record is created  ",
        "description" : " Creates currency base on currency code. If the currency code does not exists, a currency record is created  ",
        "operationId" : "    POST_CurrencyIso_ ",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currencyIso/createOrUpdate" : {
      "post" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " Creates or modify a currency base on currency code.  ",
        "description" : " Creates or modify a currency base on currency code.  ",
        "operationId" : "    POST_CurrencyIso_createOrUpdate ",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currencyIso/version" : {
      "get" : {
        "tags" : [ "Application", "CurrencyIso" ],
        "summary" : "Get version of application",
        "operationId" : "index_5",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currencyIso/list" : {
      "get" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " List all currencies. ",
        "description" : " List all currencies. ",
        "operationId" : "    GET_CurrencyIso_list",
        "responses" : {
          "default" : {
            "description" : " list of all currency iso/ ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrenciesIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrenciesIsoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/currencyIso/listGetAll" : {
      "get" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " List currencies ISO matching a given criteria ",
        "description" : " List currencies ISO matching a given criteria ",
        "operationId" : "    GET_CurrencyIso_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of currencies ISO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrenciesIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrenciesIsoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/currencyIso/{currencyCode}" : {
      "delete" : {
        "tags" : [ "CurrencyIso" ],
        "summary" : " Remove currency with a given currency code.  ",
        "description" : " Remove currency with a given currency code.  ",
        "operationId" : "    DELETE_CurrencyIso_{currencyCode} ",
        "parameters" : [ {
          "name" : "currencyCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/addExchangeRate" : {
      "post" : {
        "tags" : [ "Currency" ],
        "summary" : " API to add Exchange Rate ",
        "description" : " API to add Exchange Rate ",
        "operationId" : "ADD_EXCHANGE_RATE",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExchangeRateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExchangeRateDto"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExchangeRateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Failed action"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/currency/addFunctionalCurrency" : {
      "post" : {
        "tags" : [ "Currency" ],
        "summary" : "API to add functional currency to the main provider",
        "description" : "API to add functional currency to the main provider",
        "operationId" : "ADD_FUNCTIONAL_CURRENCY",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency" : {
      "get" : {
        "tags" : [ "Currency" ],
        "summary" : "Search currency with a given currency code.",
        "description" : "Search currency with a given currency code.",
        "operationId" : "GET_Currency_search",
        "parameters" : [ {
          "name" : "currencyCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "currency if exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingCurrencyResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingCurrencyResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Currency" ],
        "summary" : "Modify a tradingCurrency",
        "description" : "Modify a tradingCurrency. Same input parameter as create. The currency and tradingCurrency are created if they don't exists. The operation fails if the tradingCurrency is null",
        "operationId" : "PUT_Currency_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "action status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Currency" ],
        "summary" : "Creates tradingCurrency base on currency code. If the currency code does not exists, a currency record is created",
        "description" : "Creates tradingCurrency base on currency code. If the currency code does not exists, a currency record is created",
        "operationId" : "POST_Currency_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "action status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/createOrUpdate" : {
      "post" : {
        "tags" : [ "Currency" ],
        "summary" : "Create or Update tradingCurrency base on currency code. If the currency code does not exists, a currency record is created",
        "description" : "Create or Update tradingCurrency base on currency code. If the currency code does not exists, a currency record is created",
        "operationId" : "POST_Currency_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "action status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/{code}/disable" : {
      "post" : {
        "tags" : [ "Currency" ],
        "summary" : "Disable a Trading currency with a given currency code",
        "description" : "Disable a Trading currency with a given currency code",
        "operationId" : "POST_Currency_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/{code}/enable" : {
      "post" : {
        "tags" : [ "Currency" ],
        "summary" : "Enable a Trading currency with a given currency code",
        "description" : "Enable a Trading currency with a given currency code",
        "operationId" : "POST_Currency_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/importExchangeRate" : {
      "post" : {
        "tags" : [ "ImportExchangeRate", "Currency" ],
        "summary" : "API to import an exchange Rate from a file",
        "description" : "Import an exchange Rate from a file",
        "operationId" : "importExchangeRate",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileUploadForm"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Failed action"
          },
          "404" : {
            "description" : "Entity does not exist."
          },
          "412" : {
            "description" : "Missing parameters"
          }
        }
      }
    },
    "/currency/version" : {
      "get" : {
        "tags" : [ "Application", "Currency" ],
        "summary" : "Get version of application",
        "operationId" : "index_6",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/list" : {
      "get" : {
        "tags" : [ "Currency" ],
        "summary" : "Search for list of trading currencies.",
        "description" : "Search for list of trading currencies.",
        "operationId" : "GET_Currency_list",
        "responses" : {
          "default" : {
            "description" : "list of trading currencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TradingCurrenciesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TradingCurrenciesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/currency/{currencyCode}" : {
      "delete" : {
        "tags" : [ "Currency" ],
        "summary" : "Remove currency with a given currency code.",
        "description" : "Remove currency with a given currency code.",
        "operationId" : "DELETE_Currency_{currencyCode}",
        "parameters" : [ {
          "name" : "currencyCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "action status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/currency/exchangeRate/{id}" : {
      "delete" : {
        "tags" : [ "ExchangeRate", "Currency" ],
        "summary" : "API to delete an exchange Rate",
        "description" : "delete an existing exchange rate",
        "operationId" : "removeExchangeRateById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the exchange rate",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the exchange rate successfully deleted"
          },
          "400" : {
            "description" : "bad request when exchange rate is not found"
          }
        }
      }
    },
    "/currency/updateExchangeRate/{id}" : {
      "put" : {
        "tags" : [ "Currency" ],
        "summary" : "API to update exchange rate",
        "description" : "API to update exchange rate",
        "operationId" : "UPDATE_EXCHANGE_RATE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExchangeRateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExchangeRateDto"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExchangeRateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "failed action"
          }
        }
      }
    },
    "/filter" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : " Find a filter with a given code ",
        "description" : " Find a filter with a given code ",
        "operationId" : "    GET_Filter_search",
        "parameters" : [ {
          "name" : "filterCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Dto for FilteredList API ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetFilterResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetFilterResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Filter" ],
        "summary" : " update an existing filter",
        "description" : " update an existing filter.Same input parameter as create. If the filter code does not exists, a filter record is created. The operation fails if the filter is null ",
        "operationId" : "    PUT_Filter_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : " Creates filter based on filter code. If the filter code does not exists, a filter record is created ",
        "description" : " Creates filter based on filter code. If the filter code does not exists, a filter record is created ",
        "operationId" : "    POST_Filter_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/filter/createOrUpdate" : {
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : " Create new or update an existing filter with a given code ",
        "description" : " Create new or update an existing filter with a given code ",
        "operationId" : "    POST_Filter_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/filter/{code}/disable" : {
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : " Disable a Filter with a given code ",
        "description" : " Disable a Filter with a given code ",
        "operationId" : "    POST_Filter_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/filter/{code}/enable" : {
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : " Enable a Filter with a given code ",
        "description" : " Enable a Filter with a given code ",
        "operationId" : "    POST_Filter_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/filter/version" : {
      "get" : {
        "tags" : [ "Application", "Filter" ],
        "summary" : "Get version of application",
        "operationId" : "index_7",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/genericCode" : {
      "get" : {
        "tags" : [ "GenericCode" ],
        "summary" : " find  ",
        "description" : " find  ",
        "operationId" : "    GET_GenericCode_search",
        "parameters" : [ {
          "name" : "entityClass",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "GetGenericCodeResponseDto response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetGenericCodeResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetGenericCodeResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "GenericCode" ],
        "summary" : " update  ",
        "description" : " update  ",
        "operationId" : "    PUT_GenericCode_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "GenericCode" ],
        "summary" : "  create  ",
        "description" : "  create  ",
        "operationId" : "    POST_GenericCode_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/genericCode/createOrUpdate" : {
      "post" : {
        "tags" : [ "GenericCode" ],
        "summary" : "Create or update generic code",
        "description" : "Create  or update",
        "operationId" : "POST_GenericCode_create_or_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/genericCode/sequence" : {
      "post" : {
        "tags" : [ "GenericCode" ],
        "summary" : " createSequence  ",
        "description" : " createSequence  ",
        "operationId" : "    POST_GenericCode_sequence_",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/genericCode/generateCode" : {
      "post" : {
        "tags" : [ "GenericCode" ],
        "summary" : " getGenericCode  ",
        "description" : " getGenericCode  ",
        "operationId" : "    POST_GenericCode_generateCode",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "GenericCodeResponseDto response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericCodeResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericCodeResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/genericCode/version" : {
      "get" : {
        "tags" : [ "Application", "GenericCode" ],
        "summary" : "Get version of application",
        "operationId" : "index_8",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceCategory" : {
      "get" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " Search invoice with a given code.  ",
        "description" : " Search invoice with a given code.  ",
        "operationId" : "    GET_InvoiceCategory_search",
        "parameters" : [ {
          "name" : "invoiceCategoryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " invoice category ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceCategoryResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceCategoryResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " Update invoice category.  ",
        "description" : " Update invoice category.  ",
        "operationId" : "    PUT_InvoiceCategory_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " Create invoice category. Description per language can be defined  ",
        "description" : " Create invoice category. Description per language can be defined  ",
        "operationId" : "    POST_InvoiceCategory_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceCategory/createOrUpdate" : {
      "post" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " Create or update invoice with a given code.  ",
        "description" : " Create or update invoice with a given code.  ",
        "operationId" : "    POST_InvoiceCategory_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceCategory/version" : {
      "get" : {
        "tags" : [ "Application", "InvoiceCategory" ],
        "summary" : "Get version of application",
        "operationId" : "index_9",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceCategory/list" : {
      "get" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " Search for list of invoice categories. ",
        "description" : " Search for list of invoice categories. ",
        "operationId" : "    GET_InvoiceCategory_list",
        "responses" : {
          "default" : {
            "description" : " list of invoice categories ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceCategoryResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " List InvoiceCategory matching a given criteria ",
        "description" : " List InvoiceCategory matching a given criteria ",
        "operationId" : "    POST_InvoiceCategory_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of InvoiceCategory ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceCategoryResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceCategory/{invoiceCategoryCode}" : {
      "delete" : {
        "tags" : [ "InvoiceCategory" ],
        "summary" : " Remove invoice with a given code.  ",
        "description" : " Remove invoice with a given code.  ",
        "operationId" : "    DELETE_InvoiceCategory_{invoiceCategoryCode}",
        "parameters" : [ {
          "name" : "invoiceCategoryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSequence" : {
      "get" : {
        "tags" : [ "InvoiceSequence" ],
        "summary" : " Search invoiceSequence with a given code.  ",
        "description" : " Search invoiceSequence with a given code.  ",
        "operationId" : "    GET_InvoiceSequence_search",
        "parameters" : [ {
          "name" : "invoiceSequenceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " invoice sequence ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceSequenceResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceSequenceResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InvoiceSequence" ],
        "summary" : " Update invoiceSequence.  ",
        "description" : " Update invoiceSequence.  ",
        "operationId" : "    PUT_InvoiceSequence_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoiceSequence" ],
        "summary" : " Create invoiceSequence.  ",
        "description" : " Create invoiceSequence.  ",
        "operationId" : "    POST_InvoiceSequence_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSequence/createOrUpdate" : {
      "post" : {
        "tags" : [ "InvoiceSequence" ],
        "summary" : " Create new or update an existing invoiceSequence with a given code.  ",
        "description" : " Create new or update an existing invoiceSequence with a given code.  ",
        "operationId" : "    POST_InvoiceSequence_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSequence/version" : {
      "get" : {
        "tags" : [ "Application", "InvoiceSequence" ],
        "summary" : "Get version of application",
        "operationId" : "index_10",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSequence/list" : {
      "get" : {
        "tags" : [ "InvoiceSequence" ],
        "summary" : " List of invoiceSequence.  ",
        "description" : " List of invoiceSequence.  ",
        "operationId" : "    GET_InvoiceSequence_list",
        "responses" : {
          "default" : {
            "description" : " A list of invoiceSequence ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceSequencesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceSequencesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSubCategory" : {
      "get" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " Search for invoice sub category with a given code.  ",
        "description" : " Search for invoice sub category with a given code.  ",
        "operationId" : "    GET_InvoiceSubCategory_search",
        "parameters" : [ {
          "name" : "invoiceSubCategoryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " invoice sub category ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceSubCategoryResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceSubCategoryResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " Update invoice sub category.  ",
        "description" : " Update invoice sub category.  ",
        "operationId" : "    PUT_InvoiceSubCategory_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " Create invoice sub category.  ",
        "description" : " Create invoice sub category.  ",
        "operationId" : "    POST_InvoiceSubCategory_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSubCategory/createOrUpdate" : {
      "post" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " Create or update invoice sub category.  ",
        "description" : " Create or update invoice sub category.  ",
        "operationId" : "    POST_InvoiceSubCategory_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSubCategory/version" : {
      "get" : {
        "tags" : [ "Application", "InvoiceSubCategory" ],
        "summary" : "Get version of application",
        "operationId" : "index_11",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSubCategory/list" : {
      "get" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " Search for list of invoiceSubCategories. ",
        "description" : " Search for list of invoiceSubCategories. ",
        "operationId" : "    GET_InvoiceSubCategory_list",
        "responses" : {
          "default" : {
            "description" : " list of invoiceSubCategories ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceSubCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceSubCategoryResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " List InvoiceSubCategory matching a given criteria ",
        "description" : " List InvoiceSubCategory matching a given criteria ",
        "operationId" : "    POST_InvoiceSubCategory_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of InvoiceSubCategory ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceSubCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceSubCategoryResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceSubCategory/{invoiceSubCategoryCode}" : {
      "delete" : {
        "tags" : [ "InvoiceSubCategory" ],
        "summary" : " Remove invoice sub category with a given code.  ",
        "description" : " Remove invoice sub category with a given code.  ",
        "operationId" : "    DELETE_InvoiceSubCategory_{invoiceSubCategoryCode}",
        "parameters" : [ {
          "name" : "invoiceSubCategoryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceType" : {
      "get" : {
        "tags" : [ "InvoiceType" ],
        "summary" : " Search invoiceType with a given code.  ",
        "description" : " Search invoiceType with a given code.  ",
        "operationId" : "    GET_InvoiceType_search",
        "parameters" : [ {
          "name" : "invoiceTypeCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " invoice type ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceTypeResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceTypeResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InvoiceType" ],
        "summary" : " Update invoiceType. Description per language can be defined  ",
        "description" : " Update invoiceType. Description per language can be defined  ",
        "operationId" : "    PUT_InvoiceType_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTypeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoiceType" ],
        "summary" : " Create invoiceType. Description per language can be defined  ",
        "description" : " Create invoiceType. Description per language can be defined  ",
        "operationId" : "    POST_InvoiceType_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTypeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceType/createOrUpdate" : {
      "post" : {
        "tags" : [ "InvoiceType" ],
        "summary" : " Create new or update an existing invoiceType with a given code.  ",
        "description" : " Create new or update an existing invoiceType with a given code.  ",
        "operationId" : "    POST_InvoiceType_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTypeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceType/version" : {
      "get" : {
        "tags" : [ "Application", "InvoiceType" ],
        "summary" : "Get version of application",
        "operationId" : "index_12",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceType/list" : {
      "get" : {
        "tags" : [ "InvoiceType" ],
        "summary" : " List of invoiceType.  ",
        "description" : " List of invoiceType.  ",
        "operationId" : "    GET_InvoiceType_list",
        "responses" : {
          "default" : {
            "description" : " A list of invoiceType ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceTypesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoiceType/{invoiceTypeCode}" : {
      "delete" : {
        "tags" : [ "InvoiceType" ],
        "summary" : " Remove invoiceType with a given code.  ",
        "description" : " Remove invoiceType with a given code.  ",
        "operationId" : "    DELETE_InvoiceType_{invoiceTypeCode}",
        "parameters" : [ {
          "name" : "invoiceTypeCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/languageIso" : {
      "get" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " Search language given a code.  ",
        "description" : " Search language given a code.  ",
        "operationId" : "    GET_LanguageIso_search",
        "parameters" : [ {
          "name" : "languageCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " language iso for given code ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLanguageIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLanguageIsoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " modify a language",
        "description" : " modify a language. Same input parameter as create. The language and trading Language are created if they don't exists. The operation fails if the tradingLanguage is null.  ",
        "operationId" : "    PUT_LanguageIso_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.  ",
        "description" : " Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.  ",
        "operationId" : "    POST_LanguageIso_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/languageIso/createOrUpdate" : {
      "post" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " Create or update a language if it doesn't exists.  ",
        "description" : " Create or update a language if it doesn't exists.  ",
        "operationId" : "    POST_LanguageIso_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageIsoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageIsoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/languageIso/version" : {
      "get" : {
        "tags" : [ "Application", "LanguageIso" ],
        "summary" : "Get version of application",
        "operationId" : "index_13",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/languageIso/list" : {
      "get" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " List all languages.  ",
        "description" : " List all languages.  ",
        "operationId" : "    GET_LanguageIso_list",
        "responses" : {
          "default" : {
            "description" : " all languages ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLanguagesIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLanguagesIsoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/languageIso/listGetAll" : {
      "get" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " List languages ISO matching a given criteria ",
        "description" : " List languages ISO matching a given criteria ",
        "operationId" : "    GET_LanguageIso_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of languages ISO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLanguagesIsoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLanguagesIsoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/languageIso/{languageCode}" : {
      "delete" : {
        "tags" : [ "LanguageIso" ],
        "summary" : " Does not delete a language but the tradingLanguage associated to it.  ",
        "description" : " Does not delete a language but the tradingLanguage associated to it.  ",
        "operationId" : "    DELETE_LanguageIso_{languageCode}",
        "parameters" : [ {
          "name" : "languageCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/language" : {
      "get" : {
        "tags" : [ "Language" ],
        "summary" : " Search language given a code.  ",
        "description" : " Search language given a code.  ",
        "operationId" : "    GET_Language_search",
        "parameters" : [ {
          "name" : "languageCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " language ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingLanguageResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingLanguageResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Language" ],
        "summary" : " modify a language",
        "description" : " modify a language. Same input parameter as create. The language and trading Language are created if they don't exists. The operation fails if the tradingLanguage is null.  ",
        "operationId" : "    PUT_Language_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Language" ],
        "summary" : " Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.  ",
        "description" : " Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.  ",
        "operationId" : "    POST_Language_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/language/createOrUpdate" : {
      "post" : {
        "tags" : [ "Language" ],
        "summary" : " Create or update a language if it doesn't exists.  ",
        "description" : " Create or update a language if it doesn't exists.  ",
        "operationId" : "    POST_Language_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/language/{code}/disable" : {
      "post" : {
        "tags" : [ "Language" ],
        "summary" : " Disable a Trading language with a given language code  ",
        "description" : " Disable a Trading language with a given language code  ",
        "operationId" : "    POST_Language_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/language/{code}/enable" : {
      "post" : {
        "tags" : [ "Language" ],
        "summary" : " Enable a Trading language with a given language code  ",
        "description" : " Enable a Trading language with a given language code  ",
        "operationId" : "    POST_Language_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/language/version" : {
      "get" : {
        "tags" : [ "Application", "Language" ],
        "summary" : "Get version of application",
        "operationId" : "index_14",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/language/list" : {
      "get" : {
        "tags" : [ "Language" ],
        "summary" : " Search for list of trading languages. ",
        "description" : " Search for list of trading languages. ",
        "operationId" : "    GET_Language_list",
        "responses" : {
          "default" : {
            "description" : " list of trading languages ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TradingLanguagesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TradingLanguagesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/language/{languageCode}" : {
      "delete" : {
        "tags" : [ "Language" ],
        "summary" : " Does not delete a language but the tradingLanguage associated to it.  ",
        "description" : " Does not delete a language but the tradingLanguage associated to it.  ",
        "operationId" : "    DELETE_Language_{languageCode}",
        "parameters" : [ {
          "name" : "languageCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action satus ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/massImport/uploadAndImport" : {
      "post" : {
        "tags" : [ "MassImport" ],
        "summary" : " Upload file and detect its type.  ",
        "description" : " Upload file and detect its type.  ",
        "operationId" : "    POST_UploadMass",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileImportForm"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportFileTypeDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportFileTypeDto"
                }
              }
            }
          }
        }
      }
    },
    "/occTemplate" : {
      "get" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Search OccTemplate with a given code.  ",
        "description" : " Search OccTemplate with a given code.  ",
        "operationId" : "    GET_OccTemplate_search",
        "parameters" : [ {
          "name" : "occTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " account operation template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Update OccTemplate.  ",
        "description" : " Update OccTemplate.  ",
        "operationId" : "    PUT_OccTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OccTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OccTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " account operation template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Create OccTemplate.  ",
        "description" : " Create OccTemplate.  ",
        "operationId" : "    POST_OccTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OccTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OccTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " account operation template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/occTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Create or update OccTemplate.  ",
        "description" : " Create or update OccTemplate.  ",
        "operationId" : "    POST_OccTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OccTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OccTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/occTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "OccTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_15",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/occTemplate/list" : {
      "get" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Get List of OccTemplates matching a given criteria  ",
        "description" : " Get List of OccTemplates matching a given criteria  ",
        "operationId" : "    GET_OccTemplate_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of account operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplatesResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Get List of OccTemplates matching a given criteria  ",
        "description" : " Get List of OccTemplates matching a given criteria  ",
        "operationId" : "    POST_OccTemplate_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of account operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOccTemplatesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/occTemplate/{occTemplateCode}" : {
      "delete" : {
        "tags" : [ "OccTemplate" ],
        "summary" : " Remove OccTemplate with a given code.  ",
        "description" : " Remove OccTemplate with a given code.  ",
        "operationId" : "    DELETE_OccTemplate_{occTemplateCode}",
        "parameters" : [ {
          "name" : "occTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/PdfInvoice" : {
      "get" : {
        "tags" : [ "PdfInvoice" ],
        "summary" : " Find a PDF invoice with a given invoice number and a customer account code.  ",
        "description" : " Find a PDF invoice with a given invoice number and a customer account code.  ",
        "operationId" : "    GET_PdfInvoice_search",
        "parameters" : [ {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " invoice's pdf ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PdfInvoiceResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PdfInvoiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/PdfInvoice/version" : {
      "get" : {
        "tags" : [ "Application", "PdfInvoice" ],
        "summary" : "Get version of application",
        "operationId" : "index_16",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/provider" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " Retrieve provider information.  ",
        "description" : " Retrieve provider information.  ",
        "operationId" : "    GET_Provider_search",
        "responses" : {
          "default" : {
            "description" : " Provider information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProviderResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProviderResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Provider" ],
        "summary" : " Update provider.  ",
        "description" : " Update provider.  ",
        "operationId" : "    PUT_Provider_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : " Create provider. Deprecated in v. 4.5. Use updateProvider() instead.  ",
        "description" : " Create provider. Deprecated in v. 4.5. Use updateProvider() instead.  ",
        "operationId" : "    POST_Provider_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/provider/createOrUpdate" : {
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : " Create or update a provider if it doesn't exists. Deprecated in v. 4.5. Use updateProvider() instead.  ",
        "description" : " Create or update a provider if it doesn't exists. Deprecated in v. 4.5. Use updateProvider() instead.  ",
        "operationId" : "    POST_Provider_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/provider/createTenant" : {
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : " Register a new tenant  ",
        "description" : " Register a new tenant  ",
        "operationId" : "    POST_Provider_createTenant",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/provider/getCustomerAccountConfiguration" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " Returns list of payment method and credit categories.  ",
        "description" : " Returns list of payment method and credit categories.  ",
        "operationId" : "    GET_Provider_getCustomerAccountConfiguration",
        "parameters" : [ {
          "name" : "providerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " customer account configuration ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerAccountConfigurationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerAccountConfigurationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider/getCustomerConfiguration" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " Returns list of customer brands, categories and titles.  ",
        "description" : " Returns list of customer brands, categories and titles.  ",
        "operationId" : "    GET_Provider_getCustomerConfiguration",
        "parameters" : [ {
          "name" : "providerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " customer configuration ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerConfigurationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerConfigurationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider/getInvoicingConfiguration" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " Returns list of invoicing configuration (calendars, taxes, invoice categories, invoice sub categories, billing cycles and termination reasons",
        "description" : " Returns list of invoicing configuration (calendars, taxes, invoice categories, invoice sub categories, billing cycles and termination reasons.  ",
        "operationId" : "    GET_Provider_getInvoicingConfiguration",
        "parameters" : [ {
          "name" : "providerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " invoicing configuration ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoicingConfigurationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoicingConfigurationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider/findProviderCF" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " Find a provider Cf with a given provider code. ",
        "description" : " Find a provider Cf with a given provider code. ",
        "operationId" : "    GET_Provider_findProviderCF",
        "parameters" : [ {
          "name" : "providerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " provider if exists ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProviderResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProviderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/provider/getTradingConfiguration" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " Returns list of trading countries, currencies and languages.  ",
        "description" : " Returns list of trading countries, currencies and languages.  ",
        "operationId" : "    GET_Provider_getTradingConfiguration",
        "parameters" : [ {
          "name" : "providerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " trading configuration. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingConfigurationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTradingConfigurationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider/version" : {
      "get" : {
        "tags" : [ "Application", "Provider" ],
        "summary" : "Get version of application",
        "operationId" : "index_17",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/provider/listTenants" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : " List tenants  ",
        "description" : " List tenants  ",
        "operationId" : "    GET_Provider_listTenants",
        "responses" : {
          "default" : {
            "description" : " A list of Tenant/provider data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProvidersDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProvidersDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider/{providerCode}" : {
      "delete" : {
        "tags" : [ "Provider" ],
        "summary" : " Remove a tenant  ",
        "description" : " Remove a tenant  ",
        "operationId" : "    DELETE_Provider_{providerCode}",
        "parameters" : [ {
          "name" : "providerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/provider/updateProviderCF" : {
      "put" : {
        "tags" : [ "Provider" ],
        "summary" : " Update a provider CF. ",
        "description" : " Update a provider CF. ",
        "operationId" : "    PUT_Provider_updateProviderCF",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/query" : {
      "get" : {
        "tags" : [ "Query" ],
        "summary" : " THIS IS A TEMPORARY API FOR DYNAMIC PORTAL USE ONLY.  IT MAY BE REMOVED AT ANY TIME. ",
        "description" : " THIS IS A TEMPORARY API FOR DYNAMIC PORTAL USE ONLY.  IT MAY BE REMOVED AT ANY TIME. ",
        "operationId" : "    GET_Query_search",
        "responses" : {
          "default" : {
            "description" : " QueryResponse object that contains the status, pagination, and the result in json string form. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/role" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search role.",
        "operationId" : "find",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "query",
          "description" : "role name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeSecuredEntities",
          "in" : "query",
          "description" : "indicate if the list of secured entties will be included",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRoleResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRoleResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Roles management" ],
        "summary" : "Update role",
        "operationId" : "update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Roles management" ],
        "summary" : "Create role",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/role/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create or update role.",
        "operationId" : "createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/role/{roleName}" : {
      "get" : {
        "tags" : [ "Roles management" ],
        "summary" : "Search role.",
        "operationId" : "findV2",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "role name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeSecuredEntities",
          "in" : "query",
          "description" : "indicate if the list of secured entties will be included",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRoleResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRoleResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Roles management" ],
        "summary" : "Remove role.",
        "operationId" : "remove",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "role name to be deleting",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/role/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_18",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/role/external" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List external roles.",
        "operationId" : "listExternalRoles",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/role/externals" : {
      "get" : {
        "tags" : [ "Roles management" ],
        "summary" : "List external roles.",
        "operationId" : "listExternalRolesV2",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              }
            }
          }
        }
      }
    },
    "/role/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List roles matching a given criteria.",
        "operationId" : "listGet",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "query Search criteria",
          "schema" : {
            "type" : "string"
          },
          "example" : "filterKey1:filterValue1|filterKey2:filterValue2"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "fields Data retrieval options/fieldnames separated by a comma. Specify \"permissions\" in fields to include the permissions. Specify \"roles\" to include child roles",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset Pagination - from record number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit Pagination - number of records to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sortBy Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields",
          "schema" : {
            "type" : "string",
            "default" : "name"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sortOrder Sorting - sort order",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List roles matching a given criteria.",
        "operationId" : "listPost",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/role/filtering" : {
      "get" : {
        "tags" : [ "Roles management" ],
        "summary" : "List roles matching a given criteria.",
        "operationId" : "listGetV2",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "query Search criteria",
          "schema" : {
            "type" : "string"
          },
          "example" : "filterKey1:filterValue1|filterKey2:filterValue2"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "fields Data retrieval options/fieldnames separated by a comma. Specify \"permissions\" in fields to include the permissions. Specify \"roles\" to include child roles",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset Pagination - from record number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit Pagination - number of records to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sortBy Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields",
          "schema" : {
            "type" : "string",
            "default" : "name"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sortOrder Sorting - sort order",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Roles management" ],
        "summary" : "List roles matching a given criteria.",
        "operationId" : "listPostV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolesDto"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance" : {
      "get" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Find a script instance with a given code. ",
        "description" : " Find a script instance with a given code. ",
        "operationId" : "    GET_ScriptInstance_search",
        "parameters" : [ {
          "name" : "scriptInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " script instance ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetScriptInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetScriptInstanceResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Update an existing script instance.  ",
        "description" : " Update an existing script instance.  ",
        "operationId" : "    PUT_ScriptInstance_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptInstanceReponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptInstanceReponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Create a new script instance.  ",
        "description" : " Create a new script instance.  ",
        "operationId" : "    POST_ScriptInstance_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptInstanceReponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptInstanceReponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance/createOrUpdate" : {
      "post" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Create new or update an existing script instance with a given code.  ",
        "description" : " Create new or update an existing script instance with a given code.  ",
        "operationId" : "    POST_ScriptInstance_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptInstanceReponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptInstanceReponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance/{code}/disable" : {
      "post" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Disable a Script instance with a given code  ",
        "description" : " Disable a Script instance with a given code  ",
        "operationId" : "    POST_ScriptInstance_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance/{code}/enable" : {
      "post" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Enable a Script instance with a given code  ",
        "description" : " Enable a Script instance with a given code  ",
        "operationId" : "    POST_ScriptInstance_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance/execute" : {
      "get" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Execute a script instance with a given code and list of parameters for the context of the script ",
        "description" : " Execute a script instance with a given code and list of parameters for the context of the script ",
        "operationId" : "    GET_ScriptInstance_execute",
        "parameters" : [ {
          "name" : "scriptInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " response of the script ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance/version" : {
      "get" : {
        "tags" : [ "Application", "ScriptInstance" ],
        "summary" : "Get version of application",
        "operationId" : "index_19",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/scriptInstance/{scriptInstanceCode}" : {
      "delete" : {
        "tags" : [ "ScriptInstance" ],
        "summary" : " Remove an existing script instance with a given code .  ",
        "description" : " Remove an existing script instance with a given code .  ",
        "operationId" : "    DELETE_ScriptInstance_{scriptInstanceCode}",
        "parameters" : [ {
          "name" : "scriptInstanceCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/seller" : {
      "get" : {
        "tags" : [ "Seller" ],
        "summary" : " Search for seller with a given code.  ",
        "description" : " Search for seller with a given code.  ",
        "operationId" : "    GET_Seller_search",
        "parameters" : [ {
          "name" : "sellerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " found seller. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSellerResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSellerResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Seller" ],
        "summary" : " Update seller.  ",
        "description" : " Update seller.  ",
        "operationId" : "    PUT_Seller_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SellerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SellerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Seller" ],
        "summary" : " Create seller.  ",
        "description" : " Create seller.  ",
        "operationId" : "    POST_Seller_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SellerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SellerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/seller/createOrUpdate" : {
      "post" : {
        "tags" : [ "Seller" ],
        "summary" : " Create or update a seller. ",
        "description" : " Create or update a seller. ",
        "operationId" : "    POST_Seller_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SellerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SellerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " created or updated seller. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/seller/version" : {
      "get" : {
        "tags" : [ "Application", "Seller" ],
        "summary" : "Get version of application",
        "operationId" : "index_20",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/seller/list" : {
      "get" : {
        "tags" : [ "Seller" ],
        "summary" : "List all sellers.",
        "description" : "List all sellers.",
        "operationId" : "    GET_Seller_list",
        "responses" : {
          "default" : {
            "description" : " list of sellers ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SellerResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SellerResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/seller/listSellerCodes" : {
      "get" : {
        "tags" : [ "Seller" ],
        "summary" : " Search for all seller's code. ",
        "description" : " Search for all seller's code. ",
        "operationId" : "    GET_Seller_listSellerCodes",
        "responses" : {
          "default" : {
            "description" : " list of seller's code. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SellerCodesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SellerCodesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/seller/{sellerCode}" : {
      "delete" : {
        "tags" : [ "Seller" ],
        "summary" : " Remove seller with a given code.  ",
        "description" : " Remove seller with a given code.  ",
        "operationId" : "    DELETE_Seller_{sellerCode}",
        "parameters" : [ {
          "name" : "sellerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/tax" : {
      "get" : {
        "tags" : [ "Tax" ],
        "summary" : " Search tax with a given code.  ",
        "description" : " Search tax with a given code.  ",
        "operationId" : "    GET_Tax_search",
        "parameters" : [ {
          "name" : "taxCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " tax if exists ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tax" ],
        "summary" : " Update tax. Description per language can be defined  ",
        "description" : " Update tax. Description per language can be defined  ",
        "operationId" : "    PUT_Tax_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tax" ],
        "summary" : " Create tax. Description per language can be defined  ",
        "description" : " Create tax. Description per language can be defined  ",
        "operationId" : "    POST_Tax_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/tax/createOrUpdate" : {
      "post" : {
        "tags" : [ "Tax" ],
        "summary" : " Create or uptadate a tax.  ",
        "description" : " Create or uptadate a tax.  ",
        "operationId" : "    POST _Tax_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/tax/version" : {
      "get" : {
        "tags" : [ "Application", "Tax" ],
        "summary" : "Get version of application",
        "operationId" : "index_21",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/tax/list" : {
      "get" : {
        "tags" : [ "Tax" ],
        "summary" : " Search for the list of taxes. ",
        "description" : " Search for the list of taxes. ",
        "operationId" : "    GET _Tax_list",
        "responses" : {
          "default" : {
            "description" : " list of all taxes. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tax/listGetAll" : {
      "get" : {
        "tags" : [ "Tax" ],
        "summary" : " List taxes matching a given criteria ",
        "description" : " List taxes matching a given criteria ",
        "operationId" : "    GET_Tax_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of taxes ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tax/{taxCode}" : {
      "delete" : {
        "tags" : [ "Tax" ],
        "summary" : " Remove tax with a given code.  ",
        "description" : " Remove tax with a given code.  ",
        "operationId" : "    DELETE_Tax_{taxCode}",
        "parameters" : [ {
          "name" : "taxCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/terminationReason" : {
      "get" : {
        "tags" : [ "TerminationReason" ],
        "summary" : " Find a termination reason with a given code.  ",
        "description" : " Find a termination reason with a given code.  ",
        "operationId" : "    GET_TerminationReason_search",
        "parameters" : [ {
          "name" : "terminationReasonCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " found termination reason ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTerminationReasonResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTerminationReasonResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TerminationReason" ],
        "summary" : " Update an existing termination reason.  ",
        "description" : " Update an existing termination reason.  ",
        "operationId" : "    PUT_TerminationReason_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminationReasonDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminationReasonDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TerminationReason" ],
        "summary" : " Create a new termination reason.  ",
        "description" : " Create a new termination reason.  ",
        "operationId" : "    POST_TerminationReason_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminationReasonDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminationReasonDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/terminationReason/createOrUpdate" : {
      "post" : {
        "tags" : [ "TerminationReason" ],
        "summary" : " Create new or update an existing termination reason with a given code.  ",
        "description" : " Create new or update an existing termination reason with a given code.  ",
        "operationId" : "    POST_TerminationReason_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminationReasonDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminationReasonDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/terminationReason/version" : {
      "get" : {
        "tags" : [ "Application", "TerminationReason" ],
        "summary" : "Get version of application",
        "operationId" : "index_22",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/terminationReason/list" : {
      "get" : {
        "tags" : [ "TerminationReason" ],
        "summary" : " List of termination reasons.  ",
        "description" : " List of termination reasons.  ",
        "operationId" : "    GET_TerminationReason_list",
        "responses" : {
          "default" : {
            "description" : " A list of termination reasons ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTerminationReasonResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTerminationReasonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/terminationReason/{terminationReasonCode}" : {
      "delete" : {
        "tags" : [ "TerminationReason" ],
        "summary" : " Remove an existing termination reason with a given code.  ",
        "description" : " Remove an existing termination reason with a given code.  ",
        "operationId" : "    DELETE_TerminationReason_{terminationReasonCode}",
        "parameters" : [ {
          "name" : "terminationReasonCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/usage/chargeAggregate" : {
      "get" : {
        "tags" : [ "Usage" ],
        "summary" : " Search for charge aggregate isage from a user account code during a period of time. ",
        "description" : " Search for charge aggregate isage from a user account code during a period of time. ",
        "operationId" : "    GET_Usage_chargeAggregate",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "toDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " usage charge aggregate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageChargeAggregateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageChargeAggregateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/usage" : {
      "get" : {
        "tags" : [ "Usage" ],
        "summary" : " Search for all opened ratedTransactions with a given userAccountCode,fromDate and toDate .  ",
        "description" : " Search for all opened ratedTransactions with a given userAccountCode,fromDate and toDate .  ",
        "operationId" : "    GET_Usage_search",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "toDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " usage ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/usage/version" : {
      "get" : {
        "tags" : [ "Application", "Usage" ],
        "summary" : "Get version of application",
        "operationId" : "index_23",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search user with a given username.",
        "operationId" : "find_1",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The username of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "User management" ],
        "summary" : "Update user",
        "operationId" : "update_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User management" ],
        "summary" : "Create user",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/user/external" : {
      "put" : {
        "tags" : [ "User management" ],
        "summary" : "Updates a user in keycloak and core given a username.",
        "operationId" : "updateExternalUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User management" ],
        "summary" : "Creates a user in keycloak and core.",
        "operationId" : "createExternalUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/user/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create or update user based on the username.",
        "operationId" : "createOrUpdate_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/user/external/{username}" : {
      "delete" : {
        "tags" : [ "User management" ],
        "summary" : " Deletes a user in keycloak and core given a username.",
        "operationId" : "deleteExternalUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The usename of user to be deleted in keykloak",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/user/name/{username}" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : "Search user with a given username.",
        "operationId" : "findV2_1",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The username of user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/current" : {
      "get" : {
        "operationId" : "getCurrentUser",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrentUserResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrentUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_24",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/user/listGetAll" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : "List all users.",
        "operationId" : "list",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : " List users matching a given criteria.",
        "operationId" : "listGet_1",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "query Search criteria. Query is composed of the following",
          "schema" : {
            "type" : "string"
          },
          "example" : "filterKey1:filterValue1|filterKey2:filterValue2"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "ields Data retrieval options/fieldnames separated by a comma. Specify \"securedEntities\" in fields to include the secured entities",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset Pagination - from record number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit Pagination - number of records to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort by Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields",
          "schema" : {
            "type" : "string",
            "default" : "userName"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sort order Sorting",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List users matching a given criteria.",
        "operationId" : "listPost_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/user/filtering" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : " List users matching a given criteria.",
        "operationId" : "listGetV2_1",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "query Search criteria. Query is composed of the following",
          "schema" : {
            "type" : "string"
          },
          "example" : "filterKey1:filterValue1|filterKey2:filterValue2"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "ields Data retrieval options/fieldnames separated by a comma. Specify \"securedEntities\" in fields to include the secured entities",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset Pagination - from record number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit Pagination - number of records to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort by Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields",
          "schema" : {
            "type" : "string",
            "default" : "userName"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sort order Sorting",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User management" ],
        "summary" : "List users matching a given criteria.",
        "operationId" : "listPostV2_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/{username}" : {
      "delete" : {
        "tags" : [ "User management" ],
        "summary" : "Remove user with a given username",
        "operationId" : "remove_1",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The usename of user to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/access" : {
      "get" : {
        "tags" : [ "Access" ],
        "summary" : " Search for an access with a given access code and subscription code.  ",
        "description" : " Search for an access with a given access code and subscription code.  ",
        "operationId" : "    GET_Access_search",
        "parameters" : [ {
          "name" : "accessCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "usageDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Access ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAccessResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAccessResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Access" ],
        "summary" : " Update an existing access ",
        "description" : " Update an existing access ",
        "operationId" : "    PUT_Access_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Access" ],
        "summary" : " Create a new access  ",
        "description" : " Create a new access  ",
        "operationId" : "    POST_Access_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/access/createOrUpdate" : {
      "post" : {
        "tags" : [ "Access" ],
        "summary" : " Create new or update an existing access  ",
        "description" : " Create new or update an existing access  ",
        "operationId" : "    POST_Access_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/access/{accessCode}/{subscriptionCode}/{startDate}/{endDate}/disable" : {
      "post" : {
        "tags" : [ "Access" ],
        "summary" : " Disable an Access point with a given access code and subscription code.  ",
        "description" : " Disable an Access point with a given access code and subscription code.  ",
        "operationId" : "    POST_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}_disable",
        "parameters" : [ {
          "name" : "accessCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/access/{accessCode}/{subscriptionCode}/{startDate}/{endDate}/enable" : {
      "post" : {
        "tags" : [ "Access" ],
        "summary" : " Enable an Access point with a given access code and subscription code.  ",
        "description" : " Enable an Access point with a given access code and subscription code.  ",
        "operationId" : "    POST_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}_enable",
        "parameters" : [ {
          "name" : "accessCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/access/version" : {
      "get" : {
        "tags" : [ "Application", "Access" ],
        "summary" : "Get version of application",
        "operationId" : "index_25",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/access/list" : {
      "get" : {
        "tags" : [ "Access" ],
        "summary" : " List Access filtered by subscriptionCode.  ",
        "description" : " List Access filtered by subscriptionCode.  ",
        "operationId" : "    GET_Access_list",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of accesses ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/access/{accessCode}/{subscriptionCode}/{startDate}/{endDate}" : {
      "delete" : {
        "tags" : [ "Access" ],
        "summary" : " Remove an access with a given access code and subscription code.  ",
        "description" : " Remove an access with a given access code and subscription code.  ",
        "operationId" : "    DELETE_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}",
        "parameters" : [ {
          "name" : "accessCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy" : {
      "put" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Update account hierarchy",
        "operationId" : "update_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Create account hierarchy",
        "operationId" : "create_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/createCRMAccountHierarchy" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Create a CRMAccountHerarchy",
        "operationId" : "createCRMAccountHierarchy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/createOrUpdate" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Create or update Account Hierarchy based on code",
        "operationId" : "createOrUpdate_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/createOrUpdateCRMAccountHierarchy" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Create or update a CRM Account Hierarchy",
        "operationId" : "createOrUpdateCRMAccountHierarchy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/customerHierarchyUpdate" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Update account hierarchy",
        "description" : "This service allows to create / update (if exist already) and close / terminate (if termination date is set) a list of customer, customer accounts, billing accounts, user accounts, subscriptions, services, and access in one transaction. It can activate and terminate subscription and service instance. Close customer account. Terminate billing and user account",
        "operationId" : "customerHierarchyUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/find" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search for a list of customer accounts given a set of filter",
        "operationId" : "find_2",
        "parameters" : [ {
          "name" : "calculateBalances",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerListResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerListResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/accountHierarchy/findAccountHierarchy" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Find account hierarchy",
        "description" : " Is an update of findAccountHierarchy wherein the user can search on 1 or multiple levels of the hierarchy in 1 search. These are the modes that can be combined by using bitwise - or |. Example: If we search on level=BA for lastName=legaspi and found a match, the search will return the hierarchy from BA to CUST. If we search on level=UA for address1=my_address and found a match, the search will return the hierarchy from UA to CUST.\", notes = \"CUST = 1, CA = 2, BA = 4, UA = 8",
        "operationId" : "findAccountHierarchy2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FindAccountHierachyRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FindAccountHierachyRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAccountHierarchyResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAccountHierarchyResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/filtering" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Search for a list of customer accounts given a set of filter",
        "operationId" : "findV2_2",
        "parameters" : [ {
          "name" : "calculateBalances",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerListResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_26",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/accountHierarchy/updateCRMAccountHierarchy" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : " Update a CRM Account HerarHierarchychy",
        "operationId" : "updateCRMAccountHierarchy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search for a billing account with a given code",
        "operationId" : "find_3",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "includeUserAccounts",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingAccountResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingAccountResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Billing account management" ],
        "summary" : "Update existing billing account",
        "operationId" : "update_3",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Billing account management" ],
        "summary" : "Create a new billing account",
        "operationId" : "create_3",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create or update Billing Account based on cod",
        "operationId" : "createOrUpdate_3",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/billingAccount/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "filter counters by period date",
        "operationId" : "filterBillingAccountCountersByPeriod",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/billingAccount/{billingAccountCode}/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "Billing account management" ],
        "summary" : "filter counters by period date",
        "operationId" : "filterBillingAccountCountersByPeriodV2",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount/{billingAccountCode}" : {
      "get" : {
        "tags" : [ "Billing account management" ],
        "summary" : "Search for a billing account with a given code",
        "operationId" : "findV2_3",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "includeUserAccounts",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingAccountResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingAccountResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Billing account management" ],
        "summary" : "Remove a billing account with a Billing Account Code",
        "operationId" : "remove_2",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_27",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List BillingAccount filter by customerAccountCode",
        "operationId" : "listByCustomerAccount",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingAccountsResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/billingAccount/customerAccounts/{customerAccountCode}" : {
      "get" : {
        "tags" : [ "Billing account management" ],
        "summary" : "List BillingAccount filter by customerAccountCode",
        "operationId" : "listByCustomerAccountV2",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingAccountsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount/listGetAll" : {
      "get" : {
        "tags" : [ "Billing account management" ],
        "summary" : "List all billing accounts.",
        "operationId" : "listGetAll",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillingAccountsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel" : {
      "get" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Search for a business account model.  ",
        "description" : " Search for a business account model.  ",
        "operationId" : "    GET_BusinessAccountModel_ ",
        "parameters" : [ {
          "name" : "businessAccountModelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " business account model response. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessAccountModelResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessAccountModelResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Update an existing business account model.  ",
        "description" : " Update an existing business account model.  ",
        "operationId" : "    PUT_BusinessAccountModel_ ",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessAccountModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessAccountModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Create a new business account model.  ",
        "description" : " Create a new business account model.  ",
        "operationId" : "    POST_BusinessAccountModel_ ",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessAccountModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessAccountModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel/findParents" : {
      "post" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Find parent entities based on account hierarchy code. ",
        "description" : " Find parent entities based on account hierarchy code. ",
        "operationId" : "    POST_BusinessAccountModel_findParents",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountTypeSearchDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CRMAccountTypeSearchDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " parent list reponse ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParentListResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParentListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel/version" : {
      "get" : {
        "tags" : [ "Application", "BusinessAccountModel" ],
        "summary" : "Get version of application",
        "operationId" : "index_28",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel/install" : {
      "put" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Install business account module.  ",
        "description" : " Install business account module.  ",
        "operationId" : "    PUT_BusinessAccountModel_install ",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessAccountModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessAccountModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel/list" : {
      "get" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Return meveo's modules.  ",
        "description" : " Return meveo's modules.  ",
        "operationId" : "    GET_BusinessAccountModel_list",
        "responses" : {
          "default" : {
            "description" : " meveo module response ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel/listGetAll" : {
      "get" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " List MeveoModuleDtos matching a given criteria ",
        "description" : " List MeveoModuleDtos matching a given criteria ",
        "operationId" : "    GET_BusinessAccountModel_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of MeveoModuleDtos ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/businessAccountModel/{businessAccountModelCode}" : {
      "delete" : {
        "tags" : [ "BusinessAccountModel" ],
        "summary" : " Remove business account model with a given business account model code.  ",
        "description" : " Remove business account model with a given business account model code.  ",
        "operationId" : "    DELETE_BusinessAccountModel_{businessAccountModelCode} ",
        "parameters" : [ {
          "name" : "businessAccountModelCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Get a customer account",
        "operationId" : "find_4",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "calculateBalances",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "withAccountOperations",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeBillingAccounts",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerAccountResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerAccountResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Update a customer account",
        "operationId" : "update_4",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Create a customer account",
        "operationId" : "create_4",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/creditCategory" : {
      "post" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Create a credit category",
        "operationId" : "createCreditCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create or update a customer account",
        "operationId" : "createOrUpdate_4",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customerAccount/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Filter counters by period date.",
        "operationId" : "filterCustomerAccountCountersByPeriod",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customerAccount/{customerAccountCode}/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Filter counters by period date.",
        "operationId" : "filterCustomerAccountCountersByPeriodV2",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/{customerAccountCode}" : {
      "get" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Get a customer account",
        "operationId" : "findV2_4",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "calculateBalances",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "withAccountOperations",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeBillingAccounts",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerAccountResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerAccountResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Delete a customer account",
        "operationId" : "remove_3",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_29",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List CustomerAccount filtered by customerCode",
        "operationId" : "listByCustomer",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerAccountsResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customerAccount/customers/{customerCode}" : {
      "get" : {
        "tags" : [ "Customer account management" ],
        "summary" : "List CustomerAccount filtered by customerCode",
        "operationId" : "listByCustomerV2",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerAccountsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/listGetAll" : {
      "get" : {
        "tags" : [ "Customer account management" ],
        "summary" : "List all customer accounts.",
        "operationId" : "listGetAll_1",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerAccountsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/creditCategory/{creditCategoryCode}" : {
      "delete" : {
        "tags" : [ "Customer account management" ],
        "summary" : "delete a credit category",
        "operationId" : "removeCreditCategory",
        "parameters" : [ {
          "name" : "creditCategoryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customerAccount/transferAccount" : {
      "post" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Transfer an amount from one customer to another",
        "operationId" : "transferAccount",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferCustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferCustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/anonymizeGdpr" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Anonymization of a specific customer",
        "operationId" : "anonymizeGdpr",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "description" : "The customer code",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : "Anonymization of a specific customer",
        "operationId" : "updateAnonymizeGdpr",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "description" : "The customer code",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/{customerCode}/gdprAnonymization" : {
      "get" : {
        "operationId" : "anonymizeGdprV2",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "The customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search for a customer with a given code",
        "operationId" : "find_5",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "description" : "The customer code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "description" : "The type of the customer ",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "includeCustomerAccounts",
          "in" : "query",
          "description" : "Indicate if account of the customer will included",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : "Update an existing customer",
        "operationId" : "update_5",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "Create a new customer",
        "operationId" : "create_5",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/createBrand" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create a new customer brand",
        "operationId" : "createBrand",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/brands" : {
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : "Update an existing customer brand",
        "operationId" : "updateBrandV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "Create a new customer brand",
        "operationId" : "createBrandV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/createCategory" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create a new customer category",
        "operationId" : "createCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/categories" : {
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : "Update an existing customer category",
        "operationId" : "updateCategoryV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "Create a new customer category",
        "operationId" : "createCategoryV2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/sequence" : {
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : "Updates a new customer sequence with a given code.",
        "operationId" : "updateCustomerSequence",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "Creates a new customer sequence",
        "operationId" : "createCustomerSequence",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : " Create new or update existing customer",
        "operationId" : "createOrUpdate_5",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/createOrUpdateBrand" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : " Create new or update an existing customer brand",
        "operationId" : "createOrUpdateBrand",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/createOrUpdateCategory" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create new or update an existing customer category",
        "operationId" : "createOrUpdateCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/exportCustomerHierarchy" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : " Exports an account hierarchy given a specific customer",
        "operationId" : "exportCustomerHierarchy",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "description" : "The customer code",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/{customerCode}/exportation" : {
      "get" : {
        "tags" : [ "Customer management" ],
        "summary" : " Exports an account hierarchy given a specific customer",
        "operationId" : "exportCustomerHierarchyV2",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "The customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Filter counters by period date",
        "operationId" : "filterCustomerCountersByPeriod",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "description" : "The customer code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date to compare ",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/{customerCode}/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "Customer management" ],
        "summary" : "Filter counters by period date",
        "operationId" : "filterCustomerCountersByPeriodV2",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "The customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date to compare ",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/category/{categoryCode}" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search for a customer category with a given code",
        "operationId" : "findCategory",
        "parameters" : [ {
          "name" : "categoryCode",
          "in" : "path",
          "description" : "The category code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerCategoryResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/categories/{categoryCode}" : {
      "get" : {
        "tags" : [ "Customer management" ],
        "summary" : "Search for a customer category with a given code",
        "operationId" : "findCategoryV2",
        "parameters" : [ {
          "name" : "categoryCode",
          "in" : "path",
          "description" : "The category code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerCategoryResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer management" ],
        "summary" : "Remove an existing customer category with a given category code",
        "operationId" : "removeCategoryV2",
        "parameters" : [ {
          "name" : "categoryCode",
          "in" : "path",
          "description" : "The category code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/{customerCode}/rootParent" : {
      "get" : {
        "tags" : [ "Customer management" ],
        "summary" : " Get Customer root parent",
        "operationId" : "findRootParent",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "The customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/{customerCode}" : {
      "get" : {
        "tags" : [ "Customer management" ],
        "summary" : "Search for a customer with a given code",
        "operationId" : "findV2_5",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "The customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "description" : "The type of the customer ",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "includeCustomerAccounts",
          "in" : "query",
          "description" : "Indicate if account of the customer will included",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer management" ],
        "summary" : "Remove customer with a given code",
        "operationId" : "remove_4",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "The customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/customerNumberSequence" : {
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : " Update the Provider's customer number sequence configuration",
        "operationId" : "updateCustomerNumberSequence",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : " Calculates and returns the next value of the mandate number",
        "operationId" : "getNextCustomerNumber",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/sequence/{code}/next" : {
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "Generates the next customer sequence number",
        "operationId" : "getNextCustomerSequenceNumber",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the sequence",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_30",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/listGetAll" : {
      "get" : {
        "tags" : [ "Customer management" ],
        "summary" : "List all customers.",
        "operationId" : "list_1",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/list47" : {
      "post" : {
        "operationId" : "list47",
        "parameters" : [ {
          "name" : "firstRow",
          "in" : "query",
          "description" : "from record number. Deprecated in v.4.7, use 'from' instead",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "numberOfRows",
          "in" : "query",
          "description" : "Pagination - number of records to retrieve. Deprecated in v.4.7, use 'limit' instead",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Pagination - from record number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Pagination - number of records to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort by field",
          "schema" : {
            "type" : "string",
            "default" : "c.code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sort Order",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "requestBody" : {
          "description" : "The customer's data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List customers matching a given criteria",
        "operationId" : "listGet_2",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "query Search criteria",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "fields Data retrieval options/fieldnames separated by a comma",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset Pagination - from record number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit Pagination - number of records to retrieve",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sort order",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "description" : "Should inherited custom fields be retrieved. Defaults to INHERIT_NO_MERGE",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List customers matching a given criteria",
        "operationId" : "listPost_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/filtering" : {
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "List customers matching a given criteria",
        "operationId" : "listPostV2_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomersResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/removeBrand/{brandCode}" : {
      "delete" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Remove existing customer brand with a given brand code",
        "operationId" : "removeBrand",
        "parameters" : [ {
          "name" : "brandCode",
          "in" : "path",
          "description" : "The customer brand code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/brands/{brandCode}" : {
      "delete" : {
        "tags" : [ "Customer management" ],
        "summary" : "Remove existing customer brand with a given brand code",
        "operationId" : "removeBrandV2",
        "parameters" : [ {
          "name" : "brandCode",
          "in" : "path",
          "description" : "The customer brand code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/customer/removeCategory/{categoryCode}" : {
      "delete" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Remove an existing customer category with a given category code",
        "operationId" : "removeCategory",
        "parameters" : [ {
          "name" : "categoryCode",
          "in" : "path",
          "description" : "The category code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/updateBrand" : {
      "put" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Update an existing customer brand",
        "operationId" : "updateBrand",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBrandDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/customer/updateCategory" : {
      "put" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Update an existing customer category",
        "operationId" : "updateCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/providerContact" : {
      "get" : {
        "tags" : [ "ProviderContact" ],
        "summary" : " Search for a provider contact with a given code  ",
        "description" : " Search for a provider contact with a given code  ",
        "operationId" : "    GET_ProviderContact_search",
        "parameters" : [ {
          "name" : "providerContactCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A provider contact ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderContactResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderContactResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ProviderContact" ],
        "summary" : " Update an existing provider contact  ",
        "description" : " Update an existing provider contact  ",
        "operationId" : "    PUT_ProviderContact_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderContactDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderContactDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ProviderContact" ],
        "summary" : "\t  Create a provider contact\t  ",
        "description" : "\t  Create a provider contact\t  ",
        "operationId" : "    POST_ProviderContact_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderContactDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderContactDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/providerContact/createOrUpdate" : {
      "post" : {
        "tags" : [ "ProviderContact" ],
        "summary" : " Create new or update an existing provider contact  ",
        "description" : " Create new or update an existing provider contact  ",
        "operationId" : "    POST_ProviderContact_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderContactDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProviderContactDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/providerContact/version" : {
      "get" : {
        "tags" : [ "Application", "ProviderContact" ],
        "summary" : "Get version of application",
        "operationId" : "index_31",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/providerContact/list" : {
      "get" : {
        "tags" : [ "ProviderContact" ],
        "summary" : " List of provider contacts ",
        "description" : " List of provider contacts ",
        "operationId" : "    GET_ProviderContact_list",
        "responses" : {
          "default" : {
            "description" : " A list of provider contacts ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderContactsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderContactsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/providerContact/{code}" : {
      "delete" : {
        "tags" : [ "ProviderContact" ],
        "summary" : " Remove an existing provider contact with a given code   ",
        "description" : " Remove an existing provider contact with a given code   ",
        "operationId" : "    DELETE_ProviderContact_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/title" : {
      "get" : {
        "tags" : [ "Title" ],
        "summary" : " Search for a title with a given code   ",
        "description" : " Search for a title with a given code   ",
        "operationId" : "    GET_Title_search",
        "parameters" : [ {
          "name" : "titleCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A title's data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TitleResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TitleResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Title" ],
        "summary" : " Update an existing title  ",
        "description" : " Update an existing title  ",
        "operationId" : "    PUT_Title_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TitleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TitleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Title" ],
        "summary" : " Create a new title  ",
        "description" : " Create a new title  ",
        "operationId" : "    POST_Title_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TitleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TitleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/title/createOrUpdate" : {
      "post" : {
        "tags" : [ "Title" ],
        "summary" : " Create new or update an existing title  ",
        "description" : " Create new or update an existing title  ",
        "operationId" : "    POST_Title_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TitleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TitleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/title/version" : {
      "get" : {
        "tags" : [ "Application", "Title" ],
        "summary" : "Get version of application",
        "operationId" : "index_32",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/title/list" : {
      "get" : {
        "tags" : [ "Title" ],
        "summary" : " List titles   ",
        "description" : " List titles   ",
        "operationId" : "    GET_Title_list",
        "responses" : {
          "default" : {
            "description" : " A list of titles ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TitlesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TitlesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/title/listGetAll" : {
      "get" : {
        "tags" : [ "Title" ],
        "summary" : " List titles matching a given criteria ",
        "description" : " List titles matching a given criteria ",
        "operationId" : "    GET_Title_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of titles ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TitlesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TitlesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/title/{titleCode}" : {
      "delete" : {
        "tags" : [ "Title" ],
        "summary" : " Remove an existing title with a given code   ",
        "description" : " Remove an existing title with a given code   ",
        "operationId" : "    DELETE_Title_{titleCode}",
        "parameters" : [ {
          "name" : "titleCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount/applyProduct" : {
      "post" : {
        "tags" : [ "User account management" ],
        "summary" : "Filter counters by period date",
        "operationId" : "applyProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyProductRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyProductRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Search for a user account with a given code",
        "operationId" : "find_6",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeSubscriptions",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserAccountResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserAccountResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "User account management" ],
        "summary" : "Update an existing user account",
        "operationId" : "update_6",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User account management" ],
        "summary" : "Create a new user account",
        "operationId" : "create_6",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create new or update an existing user account",
        "operationId" : "createOrUpdate_6",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/userAccount/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "User account management" ],
        "summary" : "Filter counters by period date",
        "operationId" : "filterUserAccountCountersByPeriod",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount/{userAccountCode}/filterCountersByPeriod" : {
      "get" : {
        "tags" : [ "User account management" ],
        "summary" : "Filter counters by period date",
        "operationId" : "filterUserAccountCountersByPeriodV2",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCountersInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount/{userAccountCode}" : {
      "get" : {
        "tags" : [ "User account management" ],
        "summary" : "Search for a user account with a given code",
        "operationId" : "findV2_6",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeSubscriptions",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserAccountResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserAccountResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "User account management" ],
        "summary" : "Remove an existing user account with a given code",
        "operationId" : "remove_5",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the user account is successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "unknown user account code"
          },
          "400" : {
            "description" : "the user account is referenced"
          }
        }
      }
    },
    "/account/userAccount/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_33",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "List user accounts filtered by a billing account's code",
        "operationId" : "listByBillingAccount",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/account/userAccount/billingAccounts/{billingAccountCode}" : {
      "get" : {
        "tags" : [ "User account management" ],
        "summary" : "List user accounts filtered by a billing account's code",
        "operationId" : "listByBillingAccountV2",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/account/userAccount/listGetAll" : {
      "get" : {
        "tags" : [ "User account management" ],
        "summary" : "List all user accounts.",
        "operationId" : "listGetAll_2",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAccountsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/audit/{enableORdisable}" : {
      "put" : {
        "tags" : [ "Audit" ],
        "summary" : " Update audit logging ",
        "description" : " Update audit logging ",
        "operationId" : "    PUT_Audit_{enableORdisable}",
        "parameters" : [ {
          "name" : "enableORdisable",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/audit/version" : {
      "get" : {
        "tags" : [ "Application", "Audit" ],
        "summary" : "Get version of application",
        "operationId" : "index_34",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileFormat" : {
      "get" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Search for a File format with a given code  ",
        "description" : " Search for a File format with a given code  ",
        "operationId" : "    GET_FileFormat_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A File format's data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Update an existing File format  ",
        "description" : " Update an existing File format  ",
        "operationId" : "    PUT_FileFormat_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileFormatDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileFormatDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Create a new File format ",
        "description" : " Create a new File format ",
        "operationId" : "    POST_FileFormat_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileFormatDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileFormatDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileFormat/createOrUpdate" : {
      "post" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Create new or update an existing File formats  ",
        "description" : " Create new or update an existing File formats  ",
        "operationId" : "    POST_FileFormat_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileFormatDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileFormatDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileFormat/version" : {
      "get" : {
        "tags" : [ "Application", "FileFormat" ],
        "summary" : "Get version of application",
        "operationId" : "index_35",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileFormat/listGetAll" : {
      "get" : {
        "tags" : [ "FileFormat" ],
        "summary" : " List fileFormats matching a given criteria ",
        "description" : " List fileFormats matching a given criteria ",
        "operationId" : "    GET_FileFormat_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of fileFormats ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileFormat/{code}" : {
      "delete" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Remove an existing File format with a given code ",
        "description" : " Remove an existing File format with a given code ",
        "operationId" : "    DELETE_FileFormat_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileFormat/list" : {
      "get" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Search File formats by matching a given criteria  ",
        "description" : " Search File formats by matching a given criteria  ",
        "operationId" : "    GET_FileFormat_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of File formats ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "FileFormat" ],
        "summary" : " Search for File formats by matching a given criteria  ",
        "description" : " Search for File formats by matching a given criteria  ",
        "operationId" : "    POST_FileFormat_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of File formats ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileFormatListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/createDir" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Create a directory ",
        "description" : " Create a directory ",
        "operationId" : "    POST_Files_createDir",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/downloadFile{fullFilePath}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : " Download file with a given file name. Filename passed as part of URL path or query parameter. ",
        "description" : " Download file with a given file name. ",
        "operationId" : "    GET_Files_downloadFile",
        "parameters" : [ {
          "name" : "fullFilePath",
          "in" : "path",
          "description" : "File to download, passed as part of URL path",
          "required" : true,
          "schema" : {
            "pattern" : ".*",
            "type" : "string"
          }
        }, {
          "name" : "file",
          "in" : "query",
          "description" : "File to download, passed as query parameter",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/version" : {
      "get" : {
        "tags" : [ "Application", "Files" ],
        "summary" : "Get version of application",
        "operationId" : "index_36",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/all" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : " Get the list of files  ",
        "description" : " Get the list of files  ",
        "operationId" : "    GET_Files_all",
        "responses" : {
          "default" : {
            "description" : " List of all files  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetFilesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetFilesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : " Get the list of files in a specific directory ",
        "description" : " Get the list of files in a specific directory ",
        "operationId" : "    GET_Files_search",
        "parameters" : [ {
          "name" : "dir",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetFilesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetFilesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/moveFileOrDirectory" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "Move file or directory with a given source path and a given destination path. ",
        "description" : "Given a source path and destination path, this API will move the content from source to destination",
        "operationId" : "GET_Files_moveFileOrDirectory",
        "parameters" : [ {
          "name" : "sourcePath",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "destinationPath",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/suppressDirectory" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Suppress the directory  ",
        "description" : " Suppress the directory  ",
        "operationId" : "    POST_Files_suppressDirectory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/suppressFile" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Suppress the file  ",
        "description" : " Suppress the file  ",
        "operationId" : "    POST_Files_suppressFile",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/upload" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Upload the file form. ",
        "description" : " Upload the file form. ",
        "operationId" : "    POST_Files_upload",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileUploadForm"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/uploadFileBase64" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Upload the file with the specific file data in 64 base. ",
        "description" : " Upload the file with the specific file data in 64 base. ",
        "operationId" : "    POST_Files_uploadFileBase64",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/uploadZippedFileBase64" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Upload the zipped file with the file data.  ",
        "description" : " Upload the zipped file with the file data.  ",
        "operationId" : "    POST_Files_uploadZippedFileBase64",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/zipDirectory" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Will make a archive of a directory  ",
        "description" : " Will make a archive of a directory  ",
        "operationId" : "    POST_Files_zipDirectory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/files/zipFile" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : " Will make a archive of a file ",
        "description" : " Will make a archive of a file ",
        "operationId" : "    POST_Files_zipFile",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode" : {
      "get" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Finds an AccountingCode.  ",
        "description" : " Finds an AccountingCode.  ",
        "operationId" : "    GET_AccountingCode_search",
        "parameters" : [ {
          "name" : "accountingCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeGetResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeGetResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Updates AccountingCode. An existing AccountingCode is search using the code field.  ",
        "description" : " Updates AccountingCode. An existing AccountingCode is search using the code field.  ",
        "operationId" : "    PUT_AccountingCode_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Creates a new AccountingCode.  ",
        "description" : " Creates a new AccountingCode.  ",
        "operationId" : "    POST_AccountingCode_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/createOrUpdate" : {
      "post" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Create or update an AccountingCode. Checks if the code already exists.  ",
        "description" : " Create or update an AccountingCode. Checks if the code already exists.  ",
        "operationId" : "    POST_AccountingCode_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/{code}/disable" : {
      "post" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Disable a Accounting code with a given code  ",
        "description" : " Disable a Accounting code with a given code  ",
        "operationId" : "    POST_AccountingCode_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/{code}/enable" : {
      "post" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Enable a Accounting code with a given code  ",
        "description" : " Enable a Accounting code with a given code  ",
        "operationId" : "    POST_AccountingCode_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/version" : {
      "get" : {
        "tags" : [ "Application", "AccountingCode" ],
        "summary" : "Get version of application",
        "operationId" : "index_37",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/listGetAll" : {
      "get" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " List AccountingCodes matching a given criteria ",
        "description" : " List AccountingCodes matching a given criteria ",
        "operationId" : "    GET_AccountingCode_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of AccountingCodes ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/list" : {
      "get" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " List AccountingCode matching the given criteria.  ",
        "description" : " List AccountingCode matching the given criteria.  ",
        "operationId" : "    GET_AccountingCode_list",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of AccountingCode ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " List AccountingCode matching the given criteria.  ",
        "description" : " List AccountingCode matching the given criteria.  ",
        "operationId" : "    POST_AccountingCode_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " list of AccountingCode ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountingCodeListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/accountingCode/{accountingCode}" : {
      "delete" : {
        "tags" : [ "AccountingCode" ],
        "summary" : " Removes an AccountingCode entity.  ",
        "description" : " Removes an AccountingCode entity.  ",
        "operationId" : "    DELETE_AccountingCode_{accountingCode}",
        "parameters" : [ {
          "name" : "accountingCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/einvoicing/pdp-status" : {
      "post" : {
        "tags" : [ "E-Invoice" ],
        "operationId" : "creatOrUpdatePdpStatus",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PdpStatusDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PdpStatusDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/billing/einvoicing/version" : {
      "get" : {
        "tags" : [ "Application", "E-Invoice" ],
        "summary" : "Get version of application",
        "operationId" : "index_38",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlanItems" : {
      "get" : {
        "tags" : [ "InvoicingPlanItem" ],
        "summary" : "Search for a invoicingPlanItem with a given code",
        "description" : "Search for a invoicingPlanItem with a given code",
        "operationId" : "GET_InvoicingPlanItem_search",
        "parameters" : [ {
          "name" : "invoicingPlanItemCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "A invoicingPlanItem's data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlanItemResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlanItemResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InvoicingPlanItem" ],
        "summary" : "Update an existing invoicingPlanItem",
        "description" : "Update an existing invoicingPlanItem",
        "operationId" : "PUT_InvoicingPlanItem_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoicingPlanItem" ],
        "summary" : "Create a new invoicingPlanItem",
        "description" : "Create a new invoicingPlanItem",
        "operationId" : "POST_InvoicingPlanItem_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlanItems/createOrUpdate" : {
      "post" : {
        "tags" : [ "InvoicingPlanItem" ],
        "summary" : "Create new or update an existing invoicingPlanItem",
        "description" : "Create new or update an existing invoicingPlanItem",
        "operationId" : "POST_InvoicingPlanItem_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlanItems/version" : {
      "get" : {
        "tags" : [ "Application", "InvoicingPlanItem" ],
        "summary" : "Get version of application",
        "operationId" : "index_39",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlanItems/list" : {
      "post" : {
        "tags" : [ "InvoicingPlanItem" ],
        "summary" : "List invoicingPlanItems matching a given criteria",
        "description" : "List invoicingPlanItems matching a given criteria",
        "operationId" : "POST_InvoicingPlanItem_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "A list of invoicingPlanItems",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlanItemsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlanItemsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlanItems/{invoicingPlanItemCode}" : {
      "delete" : {
        "tags" : [ "InvoicingPlanItem" ],
        "summary" : "Remove an existing invoicingPlanItem with a given code",
        "description" : "Remove an existing invoicingPlanItem with a given code",
        "operationId" : "DELETE_InvoicingPlanItem_{invoicingPlanItemCode}",
        "parameters" : [ {
          "name" : "invoicingPlanItemCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Request processing status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlans" : {
      "get" : {
        "tags" : [ "InvoicingPlan" ],
        "summary" : "\t  Search for a invoicingPlan with a given code\t  \t  ",
        "description" : "\t  Search for a invoicingPlan with a given code\t  \t  ",
        "operationId" : "GET_InvoicingPlan_search",
        "parameters" : [ {
          "name" : "invoicingPlanCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A invoicingPlan's data\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlanResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlanResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InvoicingPlan" ],
        "summary" : "\t  Update an existing invoicingPlan\t  \t  ",
        "description" : "\t  Update an existing invoicingPlan\t  \t  ",
        "operationId" : "PUT_InvoicingPlan_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InvoicingPlan" ],
        "summary" : "\t  Create a new invoicingPlan\t  \t  ",
        "description" : "\t  Create a new invoicingPlan\t  \t  ",
        "operationId" : "POST_InvoicingPlan_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicingPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlans/version" : {
      "get" : {
        "tags" : [ "Application", "InvoicingPlan" ],
        "summary" : "Get version of application",
        "operationId" : "index_40",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlans/list" : {
      "post" : {
        "tags" : [ "InvoicingPlan" ],
        "summary" : "\t  List invoicingPlans matching a given criteria\t  \t  ",
        "description" : "\t  List invoicingPlans matching a given criteria\t  \t  ",
        "operationId" : "POST_InvoicingPlan_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A list of invoicingPlans\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlansResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicingPlansResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicingPlans/{invoicingPlanCode}" : {
      "delete" : {
        "tags" : [ "InvoicingPlan" ],
        "summary" : "\t  Remove an existing invoicingPlan with a given code\t  \t  ",
        "description" : "\t  Remove an existing invoicingPlan with a given code\t  \t  ",
        "operationId" : "DELETE_InvoicingPlan_{invoicingPlanCode}",
        "parameters" : [ {
          "name" : "invoicingPlanCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/cancelBillingRun" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Cancel a billing run based on billingRun id. ",
        "description" : " Cancel a billing run based on billingRun id. ",
        "operationId" : "    PUT_Invoicing_cancelBillingRun",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelBillingRunRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelBillingRunRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Cancels a billing run",
        "description" : " Cancels a billing run. Sets RatedTransaction.status associated to billing run to OPEN. Remove aggregates and invoice associated to the billing run. Set billingAccount.billingRun to null.  ",
        "operationId" : "    POST_Invoicing_cancelBillingRun",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/billingRun/{billingRunId}/cancelInvoice" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.    ",
        "description" : " Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.    ",
        "operationId" : "    PUT_Invoicing_billingRun_{billingRunId}_cancelInvoice",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/billingRun/{billingRunId}/canceledInvoices" : {
      "delete" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Delete canceled invoices for a given billing run.    ",
        "description" : " Delete canceled invoices for a given billing run.    ",
        "operationId" : "    DELETE_Invoicing_billingRun_{billingRunId}_canceledInvoices",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Delete canceled invoices for a given billing run. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/createBillingRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Create a new billing run. The id of the created BillingRun is returned on 'message' field of response object.  ",
        "description" : " Create a new billing run. The id of the created BillingRun is returned on 'message' field of response object.  ",
        "operationId" : "    POST_Invoicing_createBillingRun",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBillingRunDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBillingRunDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/createOrUpdateBillingRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Create or Update billing run. The id of the created BillingRun is returned on 'message' field of response object.  ",
        "description" : " Create a new billing run. The id of the created BillingRun is returned on 'message' field of response object.  ",
        "operationId" : "    POST_Invoicing_createBillingRun_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBillingRunDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBillingRunDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/getBillingAccountListInRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Returns the list of billable billing accounts of a billing run  ",
        "description" : " Returns the list of billable billing accounts of a billing run  ",
        "operationId" : "    POST_Invoicing_getBillingAccountListInRun",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A list of billing accounts ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingAccountListInRunResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingAccountListInRunResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/getBillingRunInfo" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Search for a billing run info with a given Id   ",
        "description" : " Search for a billing run info with a given Id   ",
        "operationId" : "    POST_Invoicing_getBillingRunInfo",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " The billing run info ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingRunInfoResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBillingRunInfoResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/getPostInvoicingReport" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Returns the post-invoicing report for a given billing run Id  ",
        "description" : " Returns the post-invoicing report for a given billing run Id  ",
        "operationId" : "    POST_Invoicing_getPostInvoicingReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A post-invoicing reports ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPostInvoicingReportsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPostInvoicingReportsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/getPreInvoicingReport" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Returns the pre-invoicing report for a given billing run Id  ",
        "description" : " Returns the pre-invoicing report for a given billing run Id  ",
        "operationId" : "    POST_Invoicing_getPreInvoicingReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A pre-invoicing reports ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPreInvoicingReportsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPreInvoicingReportsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/version" : {
      "get" : {
        "tags" : [ "Application", "Invoicing" ],
        "summary" : "Get version of application",
        "operationId" : "index_41",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/billingRun/{billingRunId}/invalidateInvoiceDocuments" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : "This API will empty xml_filename and pdf_filename from all invoices in the specified billing run.",
        "description" : "This API will empty xml_filename and pdf_filename from all invoices in the specified billing run.",
        "operationId" : "    PUT_Invoicing_billingRun_{billingRunId}_invalidateInvoice",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvalidateInvoiceDocumentsDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvalidateInvoiceDocumentsDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Invalidate billing run invoice files",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/billingRun/{billingRunId}/moveInvoice" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.    ",
        "description" : " Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.    ",
        "operationId" : "    PUT_Invoicing_billingRun_{billingRunId}_moveInvoice",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/rebuildInvoice" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Recompute invoices based on RatedTransactions and re-apply invoiceValidationScript    ",
        "description" : " Recompute invoices based on RatedTransactions and re-apply invoiceValidationScript    ",
        "operationId" : "    PUT_Invoicing_rebuildInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Recompute invoices based on RatedTransactions and re-apply invoiceValidationScript ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/billingRun/{billingRunId}/rejectInvoice" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Reject one or several invoices (change status to REJECTED). Body will contains a list of invoice ids.    ",
        "description" : " Reject one or several invoices (change status to REJECTED). Body will contains a list of invoice ids.    ",
        "operationId" : "    PUT_Invoicing_billingRun_{billingRunId}_rejectInvoice",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Reject one or several invoices (change status to REJECTED). Body will contains a list of invoice ids. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/validateBillingRun" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Validate a billing run based on billingRun id. ",
        "description" : " Validate a billing run based on billingRun id. ",
        "operationId" : "    PUT_Invoicing_validateBillingRun",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateBillingRunRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateBillingRunRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Depending on the status of the billing run, produce the pre-invoicing report, the post-Invoicing report or validates a billing run",
        "description" : " Depending on the status of the billing run, produce the pre-invoicing report, the post-Invoicing report or validates a billing run. Sets the next invoice date of a billing account to the next calendar date.  ",
        "operationId" : "    POST_Invoicing_validateBillingRun",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/billingRun/{billingRunId}/validateInvoice" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : " Validate one or several invoices (change status to DRAFT). Body will contain a list of invoice id    ",
        "description" : " Validate one or several invoices (change status to DRAFT). Body will contain a list of invoice id    ",
        "operationId" : "    PUT_Invoicing_billingRun_{billingRunId}_validateInvoice",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ActionStatus.class Validate one or several invoices (change status to DRAFT). Body will contain a list of invoice id ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/cancelReservation" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Cancels the reservation  ",
        "description" : " Cancels the reservation  ",
        "operationId" : "    POST_Mediation_cancelReservation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrepaidReservationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrepaidReservationDto"
              }
            },
            "text/plain" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrepaidReservationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/chargeCdr" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Same as registerCdrList, but at the same process rate the EDR created  ",
        "description" : " Same as registerCdrList, but at the same process rate the EDR created  ",
        "operationId" : "    POST_Mediation_chargeCdr",
        "parameters" : [ {
          "name" : "isVirtual",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "rateTriggeredEdr",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "maxDepth",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "returnEDRs",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnWalletOperations",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnWalletOperationDetails",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnCounters",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "generateRTs",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            },
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeCDRResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeCDRResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/confirmReservation" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Confirms the reservation  ",
        "description" : " Confirms the reservation  ",
        "operationId" : "    POST_Mediation_confirmReservation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrepaidReservationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrepaidReservationDto"
              }
            },
            "text/plain" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrepaidReservationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/createCDR" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "operationId" : "createCDR",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrDto"
              }
            },
            "text/plain" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/version" : {
      "get" : {
        "tags" : [ "Application", "Mediation" ],
        "summary" : "Get version of application",
        "operationId" : "index_42",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/notifyOfRejectedCdrs" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Notify of rejected CDRs  ",
        "description" : " Notify of rejected CDRs  ",
        "operationId" : "    POST_Mediation_notifyOfRejectedCdrs",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDto"
              }
            },
            "text/plain" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/processCdrList" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Convert CDRs to EDRs ",
        "description" : " Convert CDRs to EDRs ",
        "operationId" : "    POST_Mediation_processCdrList",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "text/plain" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/registerCdrList" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Accepts a list of CDR line. This CDR is parsed and created as EDR. CDR is same format use in mediation job  ",
        "description" : " Accepts a list of CDR line. This CDR is parsed and created as EDR. CDR is same format use in mediation job  ",
        "operationId" : "    POST_Mediation_registerCdrList",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDto"
              }
            },
            "text/plain" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/mediation/reserveCdr" : {
      "post" : {
        "tags" : [ "Mediation" ],
        "summary" : " Allows the user to reserve a CDR, this will create a new reservation entity attached to a wallet operation",
        "description" : " Allows the user to reserve a CDR, this will create a new reservation entity attached to a wallet operation. A reservation has expiration limit save in the provider entity (PREPAID_RESRV_DELAY_MS)  ",
        "operationId" : "    POST_Mediation_reserveCdr",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            },
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Available quantity and reservationID is ed ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CdrReservationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CdrReservationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/purchaseOrder" : {
      "post" : {
        "operationId" : "create_7",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseOrderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseOrderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/purchaseOrder/{id}" : {
      "put" : {
        "operationId" : "update_7",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseOrderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseOrderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/billing/ratedTransaction/cancelRatedTransactions" : {
      "post" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : " Call service to cancel one or many opened Rated Transactions according to the passed query, cancel an opened Rated Transaction is to set status to CANCELED",
        "description" : " Call service to cancel one or many opened Rated Transactions according to the passed query, cancel an opened Rated Transaction is to set status to CANCELED.  ",
        "operationId" : "    POST_RatedTransaction_cancelRatedTransactions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " ActionStatus with SUCESS or FAIL status inside ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "403" : {
            "description" : "Only rated transactions in statuses OPEN, REJECTED, CANCELED can be cancelled"
          }
        }
      }
    },
    "/billing/ratedTransaction/version" : {
      "get" : {
        "tags" : [ "Application", "RatedTransaction" ],
        "summary" : "Get version of application",
        "operationId" : "index_43",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/ratedTransaction/listGetAll" : {
      "get" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : " List ratedTransactions matching a given criteria ",
        "description" : " List ratedTransactions matching a given criteria ",
        "operationId" : "    GET_RatedTransaction_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of ratedTransactions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RatedTransactionListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RatedTransactionListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/ratedTransaction/list" : {
      "get" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : " Get a list of rated transactions ",
        "description" : " Get a list of rated transactions ",
        "operationId" : "    GET_RatedTransaction_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        }, {
          "name" : "returnUserAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of Rated transactions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RatedTransactionListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RatedTransactionListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : " Get a list of rated transactions ",
        "description" : " Get a list of rated transactions ",
        "operationId" : "    POST_RatedTransaction_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A list of Rated transactions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RatedTransactionListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RatedTransactionListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/activate" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Activate a given Subscription.  ",
        "description" : " Activate a given Subscription.  ",
        "operationId" : "    PUT_Subscription_activate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActivateSubscriptionRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActivateSubscriptionRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Activate a given Subscription. ",
        "description" : " Activate a given Subscription. ",
        "operationId" : "    POST_Subscription_activate",
        "parameters" : [ {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/activateForCustomer" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Activate a given Subscription for a customer. ",
        "description" : " Activate a given Subscription for a customer. ",
        "operationId" : "    POST_Subscription_activateForCustomer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionForCustomerRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionForCustomerRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the raw result holding the Subscription EndAgreementDate in its response. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionForCustomerResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionForCustomerResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/activatePatchedSubscription" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Activate the patched version of a given Subscription. ",
        "description" : " Activate the patched version of a given Subscription. ",
        "operationId" : "    POST_Patched_Subscription_activate",
        "parameters" : [ {
          "name" : "updateEffectiveDate",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "newEffectiveDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/activateServices" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Activate services",
        "description" : " Activate services. Subscription should not be in status (RESILIATED OR CANCELLED). This service allows to override the charge instance price before activation. This service is actually a 2 step process: service instantiation then activation. If service.subscriptionDate is not set a service is only instantiated else it's instantiated then activated.  ",
        "operationId" : "    POST_Subscription_activateServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActivateServicesRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActivateServicesRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/applyOneShotChargeInstance" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Apply one shot charge. Subscription should not be in status (RESILIATED OR CANCELLED).  ",
        "description" : " Apply one shot charge. Subscription should not be in status (RESILIATED OR CANCELLED).  ",
        "operationId" : "    POST_Subscription_applyOneShotChargeInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyOneShotChargeInstanceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyOneShotChargeInstanceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/applyProduct" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Apply a product on a subscription. ",
        "description" : " Apply a product on a subscription. ",
        "operationId" : "    POST_Subscription_applyProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyProductRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyProductRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/cancelSubscriptionRenewal/{subscriptionCode}" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Cancels the renewal term of an active subscription. ",
        "description" : " Cancels the renewal term of an active subscription. ",
        "operationId" : "    POST_Subscription_cancelSubscriptionRenewal_{subscriptionCode}",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " status of the request ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/cancelSubscriptionTermination/{subscriptionCode}" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Cancels the programed termination of a subscription. ",
        "description" : " Cancels the programed termination of a subscription. ",
        "operationId" : "    POST_Subscription_cancelSubscriptionRenewal_{subscriptionCode}_1",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " status of the request ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " Search for a subscription with a given code.  ",
        "description" : " Search for a subscription with a given code.  ",
        "operationId" : "    GET_Subscription_search",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mergedCF",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "validityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSubscriptionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSubscriptionResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Updates a subscription. It cannot update a subscription with status=RESILIATED  ",
        "description" : " Updates a subscription. It cannot update a subscription with status=RESILIATED  ",
        "operationId" : "    PUT_Subscription_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Create a subscription. It does not activate it  ",
        "description" : " Create a subscription. It does not activate it  ",
        "operationId" : "    POST_Subscription_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/createOrUpdate" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Create or update subscription information ONLY. Does not include access, services nor products  ",
        "description" : " Create or update subscription information ONLY. Does not include access, services nor products  ",
        "operationId" : "    POST_Subscription_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/createOrUpdatePartial" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Create or update subscription information WITH access, services and products",
        "description" : " Create or update subscription information WITH access, services and products. Terminates subscription if termination date is provided on subscription. Terminates service if termination date is provided on service. Activates inactive service if service subscription date is provided. Instantiates service if no matching service found. Updates service if matching service found. Only those services, access and products passed will be afected.   ",
        "operationId" : "    POST_Subscription_createOrUpdatePartial",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/{subscriptionId}/delete-si" : {
      "delete" : {
        "tags" : [ "Subscription" ],
        "summary" : "API to delete 'INACTIVE' and 'PENDING' serviceInstance from subscription",
        "description" : "API to delete 'INACTIVE' and 'PENDING' serviceInstance from subscription",
        "operationId" : "DELETE_Subscription_serviceInstance",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceInstanceToDelete"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceInstanceToDelete"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A subscription ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/findByCustomer" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " List subscriptions matching a given criteria  ",
        "description" : " List subscriptions matching a given criteria  ",
        "operationId" : "    GET_Subscription_findByCustomer",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of subscriptions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/dueDateDelay" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " Returns the due date delay information.  ",
        "description" : " Returns the due date delay information.  ",
        "operationId" : "    GET_Subscription_dueDateDelay",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoiceTypeCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of due date delay ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDueDateDelayResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDueDateDelayResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/serviceInstance" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " Find service instance.  ",
        "description" : " Find service instance.  ",
        "operationId" : "    GET_SubscriptionserviceInstance",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceInstanceId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "serviceInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Service instance ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServiceInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServiceInstanceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/listOneshotChargeOthers" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " Search for a subscription with a given code.   ",
        "description" : " Search for a subscription with a given code.   ",
        "operationId" : "    GET_Subscription_listOneshotChargeOthers",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of one-shot other charges. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOneShotChargesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOneShotChargesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/version" : {
      "get" : {
        "tags" : [ "Application", "Subscription" ],
        "summary" : "Get version of application",
        "operationId" : "index_44",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/instantiateServices" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Instantiate a Service subscription   ",
        "description" : " Instantiate a Service subscription   ",
        "operationId" : "    POST_Subscription_instantiateServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InstantiateServicesRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InstantiateServicesRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/listGetAll" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " List subscriptions matching a given criteria ",
        "description" : " List subscriptions matching a given criteria ",
        "operationId" : "    GET_Subscription_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of subscriptions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/listAll" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " Deprecated in v.4.7.2 Use /list instead.  ",
        "description" : " Deprecated in v.4.7.2 Use /list instead.  ",
        "operationId" : "    GET_Subscription_listAll",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "mergedCF",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of all subscriptions. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/billing/subscription/list" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " List subscriptions matching a given criteria  ",
        "description" : " List subscriptions matching a given criteria  ",
        "operationId" : "    GET_Subscription_list",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mergedCF",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of subscriptions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " List subscriptions matching a given criteria  ",
        "description" : " List subscriptions matching a given criteria  ",
        "operationId" : "    POST_Subscription_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of subscriptions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionsListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/serviceInstances" : {
      "get" : {
        "tags" : [ "Subscription" ],
        "summary" : " Returns a list of service instances.  ",
        "description" : " Returns a list of service instances.  ",
        "operationId" : "    GET_SubscriptionserviceInstances",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionValidityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "serviceInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of service instances ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListServiceInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListServiceInstanceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/{code}/offer" : {
      "patch" : {
        "tags" : [ "Subscription" ],
        "summary" : " patch subscription  ",
        "description" : " patch subscription  ",
        "operationId" : "    PATCH_Subscription_{code}_offer",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionPatchDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionPatchDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/rate" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Give a rate data for subscription  ",
        "description" : " Give a rate data for subscription  ",
        "operationId" : "    POST_Subscription_rate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RateSubscriptionRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RateSubscriptionRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " list of service instances ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RateSubscriptionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RateSubscriptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/resumeServices" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Resume an existing services  ",
        "description" : " Resume an existing services  ",
        "operationId" : "    PUT_SubscriptionresumeServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationServicesRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationServicesRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/resume" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Resume an existing subscription  ",
        "description" : " Resume an existing subscription  ",
        "operationId" : "    PUT_Subscriptionresume",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationSubscriptionRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationSubscriptionRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/{code}/offer/rollback" : {
      "patch" : {
        "tags" : [ "Subscription" ],
        "summary" : " rollback offer  ",
        "description" : " rollback offer  ",
        "operationId" : "    PATCH_Subscription{code}_offer_rollback",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferRollbackDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferRollbackDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/subscribeAndActivateProducts" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " subscribe And Activate Products ",
        "description" : " Create a subscribe And Activate Products  ",
        "operationId" : "POST_Subscription_subscribeAndActivateProducts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionAndProductsToInstantiateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionAndProductsToInstantiateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/subscribeAndActivateServices" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Create a subscription and activate services in a single transaction.  ",
        "description" : " Create a subscription and activate services in a single transaction.  ",
        "operationId" : "    POST_Subscription_subscribeAndActivateServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionAndServicesToActivateRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionAndServicesToActivateRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/billing/subscription/subscribeAndInstantiateProducts" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Create a subscription and instanciate product in a single transaction.  ",
        "description" : " Create a subscription and instanciate product in a single transaction.  ",
        "operationId" : "    POST_Subscription_subscribeAndInstantiateProducts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionAndProductsToInstantiateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionAndProductsToInstantiateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/suspendServices" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Suspend an existing services  ",
        "description" : " Suspend an existing services  ",
        "operationId" : "    PUT_SubscriptionsuspendServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationServicesRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationServicesRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/suspend" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Suspend an existing subscription  ",
        "description" : " Suspend an existing subscription  ",
        "operationId" : "    PUT_Subscriptionsuspend",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationSubscriptionRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OperationSubscriptionRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/oneShotCharge/{subscriptionCode}/{oneshotChargeCode}" : {
      "delete" : {
        "tags" : [ "Subscription" ],
        "summary" : " Search for a subscription with a given code.  ",
        "description" : " Search for a subscription with a given code.  ",
        "operationId" : "    DELETE_Subscription_oneShotCharge_{subscriptionCode}_{oneshotChargeCode}",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "oneshotChargeCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validityDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A subscription ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/terminateServices" : {
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Terminate a list of services. If a service is already TERMINATED, an error is thrown.  ",
        "description" : " Terminate a list of services. If a service is already TERMINATED, an error is thrown.  ",
        "operationId" : "    POST_Subscription_terminateServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminateSubscriptionServicesRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminateSubscriptionServicesRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/terminate" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Terminate a subscription. If subscription status is RESILIATED, an error is thrown ",
        "description" : " Terminate a subscription. If subscription status is RESILIATED, an error is thrown ",
        "operationId" : "    PUT_Subscription_terminate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminateSubscriptionRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminateSubscriptionRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Subscription" ],
        "summary" : " Terminate a subscription. If subscription status is RESILIATED, an error is thrown  ",
        "description" : " Terminate a subscription. If subscription status is RESILIATED, an error is thrown  ",
        "operationId" : "    POST_Subscription_terminate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminateSubscriptionRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TerminateSubscriptionRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/updateServices" : {
      "put" : {
        "tags" : [ "Subscription" ],
        "summary" : " Update existing services  ",
        "description" : " Update existing services  ",
        "operationId" : "    PUT_SubscriptionupdateServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateServicesRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateServicesRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/reservation/{reservationId}" : {
      "delete" : {
        "tags" : [ "Wallet" ],
        "summary" : " Cancel a reservation given an id.  ",
        "description" : " Cancel a reservation given an id.  ",
        "operationId" : "    DELETE_Wallet_reservation_{reservationId:[0-9]+}",
        "parameters" : [ {
          "name" : "reservationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/reservation/confirm" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Confirm a reservation given an id.  ",
        "description" : " Confirm a reservation given an id.  ",
        "operationId" : "    POST_Wallet_reservation_confirm",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletReservationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletReservationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/operation" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Create a new operation  ",
        "description" : " Create a new operation  ",
        "operationId" : "    POST_Wallet_operation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletOperationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletOperationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/template/createOrUpdate" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Create new or update an existing wallet template  ",
        "description" : " Create new or update an existing wallet template  ",
        "operationId" : "    POST_Wallet_template_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/reservation" : {
      "put" : {
        "tags" : [ "Wallet" ],
        "summary" : " Updates a reservation. Same as create we just need to pass the id of the reservation.  ",
        "description" : " Updates a reservation. Same as create we just need to pass the id of the reservation.  ",
        "operationId" : "    PUT_Wallet_reservation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletReservationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletReservationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Create reservation for a given offer, user account, seller, provider and date.  ",
        "description" : " Create reservation for a given offer, user account, seller, provider and date.  ",
        "operationId" : "    POST_Wallet_reservation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletReservationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletReservationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/template" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "summary" : " Search for a wallet template with a given code  ",
        "description" : " Search for a wallet template with a given code  ",
        "operationId" : "    GET_Wallet_template",
        "parameters" : [ {
          "name" : "walletTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A wallet template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetWalletTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetWalletTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Wallet" ],
        "summary" : " Update an existing wallet template  ",
        "description" : " Update an existing wallet template  ",
        "operationId" : "    PUT_Wallet_template",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Create a new wallet template  ",
        "description" : " Create a new wallet template  ",
        "operationId" : "    POST_Wallet_template",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/balance/current" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Gets the current (open or reserved) wallet balance amount at a given level and date period. In wallet operation, status='OPEN OR RESERVED'.  ",
        "description" : " Gets the current (open or reserved) wallet balance amount at a given level and date period. In wallet operation, status='OPEN OR RESERVED'.  ",
        "operationId" : "    POST_Wallet_balance_current",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletBalanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletBalanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status and balance amounts ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WalletBalanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WalletBalanceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/operation/find" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Search for an operation with a given (example) code. Deprecated in v.4.7.2  ",
        "description" : " Search for an operation with a given (example) code. Deprecated in v.4.7.2  ",
        "operationId" : "    POST_Wallet_operation_find",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FindWalletOperationsDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FindWalletOperationsDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of wallet operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/billing/wallet/version" : {
      "get" : {
        "tags" : [ "Application", "Wallet" ],
        "summary" : "Get version of application",
        "operationId" : "index_45",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/operation/listGetAll" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "summary" : " List wallet operations matching a given criteria ",
        "description" : " List wallet operations matching a given criteria ",
        "operationId" : "    GET_Wallet_operation_listGetAll",
        "parameters" : [ {
          "name" : "withRTs",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of wallet operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/operation/list" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "summary" : " List wallet operations matching a given criteria  ",
        "description" : " List wallet operations matching a given criteria  ",
        "operationId" : "    GET_Wallet_operation_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        }, {
          "name" : "withRTs",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of wallet operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " List wallet operations matching a given criteria  ",
        "description" : " List wallet operations matching a given criteria  ",
        "operationId" : "    POST_Wallet_operation_list",
        "parameters" : [ {
          "name" : "withRTs",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of wallet operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FindWalletOperationsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/balance/open" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Gets the open wallet balance amount at a given level and date period. In wallet operation, status='OPEN'.  ",
        "description" : " Gets the open wallet balance amount at a given level and date period. In wallet operation, status='OPEN'.  ",
        "operationId" : "    POST_Wallet_balance_open",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletBalanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletBalanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status and balance amounts status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WalletBalanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WalletBalanceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/template/{walletTemplateCode}" : {
      "delete" : {
        "tags" : [ "Wallet" ],
        "summary" : " Remove an existing wallet template with a given code  ",
        "description" : " Remove an existing wallet template with a given code  ",
        "operationId" : "    DELETE_Wallet_template_{walletTemplateCode}",
        "parameters" : [ {
          "name" : "walletTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/billing/wallet/balance/reserved" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "summary" : " Gets the reserved wallet balance amount at a given level and date period. In wallet operation, status='RESERVED'.  ",
        "description" : " Gets the reserved wallet balance amount at a given level and date period. In wallet operation, status='RESERVED'.  ",
        "operationId" : "    POST_Wallet_balance_reserved",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletBalanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WalletBalanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status and balance amounts ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WalletBalanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WalletBalanceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/bundleTemplate" : {
      "put" : {
        "tags" : [ "BundleTemplate" ],
        "summary" : " Update bundleTemplate  ",
        "description" : " Update bundleTemplate  ",
        "operationId" : "    PUT_BundleTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BundleTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BundleTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the update bundleTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BundleTemplate" ],
        "summary" : " Create bundleTemplate  ",
        "description" : " Create bundleTemplate  ",
        "operationId" : "    POST_BundleTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BundleTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BundleTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create bundleTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/bundleTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "BundleTemplate" ],
        "summary" : " Create or update bundleTemplate  ",
        "description" : " Create or update bundleTemplate  ",
        "operationId" : "    POST_BundleTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BundleTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BundleTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create or update bundleTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/bundleTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "BundleTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_46",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessOfferModel" : {
      "get" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " Remove an existing business offer model with a given code.  ",
        "description" : " Remove an existing business offer model with a given code.  ",
        "operationId" : "    GET_BusinessOfferModel_search",
        "parameters" : [ {
          "name" : "businessOfferModelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loadOfferServiceTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadOfferProductTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadServiceChargeTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadProductChargeTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A business offer model ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessOfferModelResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessOfferModelResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " Update an existing business offer model.  ",
        "description" : " Update an existing business offer model.  ",
        "operationId" : "    PUT_BusinessOfferModel_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " Create a new business offer model.  ",
        "description" : " Create a new business offer model.  ",
        "operationId" : "    POST_BusinessOfferModel_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessOfferModel/createOrUpdate" : {
      "post" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " Create new or update an existing business offer model.  ",
        "description" : " Create new or update an existing business offer model.  ",
        "operationId" : "    POST_BusinessOfferModel_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessOfferModel/version" : {
      "get" : {
        "tags" : [ "Application", "BusinessOfferModel" ],
        "summary" : "Get version of application",
        "operationId" : "index_47",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessOfferModel/install" : {
      "put" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " Install business offer model module. ",
        "description" : " Install business offer model module. ",
        "operationId" : "    PUT_BusinessOfferModel_install",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessOfferModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessOfferModel/list" : {
      "get" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " List business offer models. ",
        "description" : " List business offer models. ",
        "operationId" : "    GET_BusinessOfferModel_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of business offer models ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " List business offer models.  ",
        "description" : " List business offer models.  ",
        "operationId" : "    POST_BusinessOfferModel_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A list of business offer models ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessOfferModel/{businessOfferModelCode}" : {
      "delete" : {
        "tags" : [ "BusinessOfferModel" ],
        "summary" : " Remove an existing business offer model with a given code.  ",
        "description" : " Remove an existing business offer model with a given code.  ",
        "operationId" : "    DELETE_BusinessOfferModel_{businessOfferModelCode}",
        "parameters" : [ {
          "name" : "businessOfferModelCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel" : {
      "get" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " Remove an existing business product model with a given code   ",
        "description" : " Remove an existing business product model with a given code   ",
        "operationId" : "    GET_BusinessProductModel_search",
        "parameters" : [ {
          "name" : "businessProductModelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A business product model ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessProductModelResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessProductModelResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " Update an existing business product model  ",
        "description" : " Update an existing business product model  ",
        "operationId" : "    PUT_BusinessProductModel_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " Create a new business product model  ",
        "description" : " Create a new business product model  ",
        "operationId" : "    POST_BusinessProductModel_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel/createOrUpdate" : {
      "post" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " Create new or update an existing business product model  ",
        "description" : " Create new or update an existing business product model  ",
        "operationId" : "    POST_BusinessProductModel_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel/version" : {
      "get" : {
        "tags" : [ "Application", "BusinessProductModel" ],
        "summary" : "Get version of application",
        "operationId" : "index_48",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel/install" : {
      "put" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " Install business product model module ",
        "description" : " Install business product model module ",
        "operationId" : "    PUT_BusinessProductModel_install",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessProductModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel/list" : {
      "get" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " List business product models  ",
        "description" : " List business product models  ",
        "operationId" : "    GET_BusinessProductModel_list",
        "responses" : {
          "default" : {
            "description" : " A list of business product models ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel/listGetAll" : {
      "get" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " List Business Product Models matching a given criteria ",
        "description" : " List Business Product Models matching a given criteria ",
        "operationId" : "    GET_BusinessProductModel_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of Business Account Models ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessProductModel/{businessProductModelCode}" : {
      "delete" : {
        "tags" : [ "BusinessProductModel" ],
        "summary" : " Remove an existing business product model with a given code   ",
        "description" : " Remove an existing business product model with a given code   ",
        "operationId" : "    DELETE_BusinessProductModel_{businessProductModelCode}",
        "parameters" : [ {
          "name" : "businessProductModelCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel" : {
      "get" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " Search for a business service model with a given code   ",
        "description" : " Search for a business service model with a given code   ",
        "operationId" : "    GET_BusinessServiceModel_search",
        "parameters" : [ {
          "name" : "businessServiceModelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A business servie model ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessServiceModelResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessServiceModelResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " Update an existing business service model  ",
        "description" : " Update an existing business service model  ",
        "operationId" : "    PUT_BusinessServiceModel_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " Create a new business service model  ",
        "description" : " Create a new business service model  ",
        "operationId" : "    POST_BusinessServiceModel_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel/createOrUpdate" : {
      "post" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " Create new or update an existing business service model  ",
        "description" : " Create new or update an existing business service model  ",
        "operationId" : "    POST_BusinessServiceModel_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel/version" : {
      "get" : {
        "tags" : [ "Application", "BusinessServiceModel" ],
        "summary" : "Get version of application",
        "operationId" : "index_49",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel/install" : {
      "put" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " Install business offer model module  ",
        "description" : " Install business offer model module  ",
        "operationId" : "    PUT_BusinessServiceModel_install",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessServiceModelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel/list" : {
      "get" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " List business service model  ",
        "description" : " List business service model  ",
        "operationId" : "    GET_BusinessServiceModel_list",
        "responses" : {
          "default" : {
            "description" : " A list of business service models ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel/listGetAll" : {
      "get" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " List Business Service Models matching a given criteria ",
        "description" : " List Business Service Models matching a given criteria ",
        "operationId" : "    GET_BusinessServiceModel_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of Business Service Models ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/businessServiceModel/{businessServiceModelCode}" : {
      "delete" : {
        "tags" : [ "BusinessServiceModel" ],
        "summary" : " Remove an existing business service model with a given code   ",
        "description" : " Remove an existing business service model with a given code   ",
        "operationId" : "    DELETE_BusinessServiceModel_{businessServiceModelCode}",
        "parameters" : [ {
          "name" : "businessServiceModelCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channel" : {
      "get" : {
        "tags" : [ "Channel" ],
        "summary" : " Search for a channel with a given code  ",
        "description" : " Search for a channel with a given code  ",
        "operationId" : "    GET_Channel_search",
        "parameters" : [ {
          "name" : "channelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A channel ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChannelResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChannelResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Channel" ],
        "summary" : " Update an existing channel  ",
        "description" : " Update an existing channel  ",
        "operationId" : "    PUT_Channel_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Channel" ],
        "summary" : " Create a new channel  ",
        "description" : " Create a new channel  ",
        "operationId" : "    POST_Channel_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Channel" ],
        "summary" : " Remove an existing channel with a given code  ",
        "description" : " Remove an existing channel with a given code  ",
        "operationId" : "    DELETE_Channel_delete",
        "parameters" : [ {
          "name" : "channelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channel/createOrUpdate" : {
      "post" : {
        "tags" : [ "Channel" ],
        "summary" : " Create new or update an existing channel  ",
        "description" : " Create new or update an existing channel  ",
        "operationId" : "    POST_Channel_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channel/{code}/disable" : {
      "post" : {
        "tags" : [ "Channel" ],
        "summary" : " Disable a Channel with a given code  ",
        "description" : " Disable a Channel with a given code  ",
        "operationId" : "    POST_Channel_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channel/{code}/enable" : {
      "post" : {
        "tags" : [ "Channel" ],
        "summary" : " Enable a Channel with a given code  ",
        "description" : " Enable a Channel with a given code  ",
        "operationId" : "    POST_Channel_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channel/version" : {
      "get" : {
        "tags" : [ "Application", "Channel" ],
        "summary" : "Get version of application",
        "operationId" : "index_50",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channelsAndSegments/version" : {
      "get" : {
        "tags" : [ "Application", "ChannelsAndSegments" ],
        "summary" : "Get version of application",
        "operationId" : "index_51",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/channelsAndSegments" : {
      "get" : {
        "tags" : [ "ChannelsAndSegments" ],
        "summary" : " Returns all the active channels list  ",
        "description" : " Returns all the active channels list  ",
        "operationId" : "    GET_ChannelsAndSegments_search",
        "parameters" : [ {
          "name" : "active",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A channel list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListChannelsAndSegmentsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListChannelsAndSegmentsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/chargeTemplates/{chargeTemplateCode}/duplicate" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "ChargeTemplate" ],
        "summary" : "add duplicate charge template for a given code",
        "description" : "add duplicate charge template for a given code",
        "operationId" : "POST_ChargeTemplate_chargeTemplates_{chargeTemplateCode}",
        "parameters" : [ {
          "name" : "chargeTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "charge template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/chargeTemplate" : {
      "get" : {
        "tags" : [ "ChargeTemplates", "ChargeTemplate" ],
        "summary" : " Search for a charge template with a given code   ",
        "description" : " Search for a charge template with a given code   ",
        "operationId" : "    GET_ChargeTemplate_chargeTemplate",
        "parameters" : [ {
          "name" : "chargeTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A charge template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/catalog/chargeTemplates/{chargeTemplateCode}" : {
      "get" : {
        "tags" : [ "ChargeTemplates", "ChargeTemplate" ],
        "summary" : "\t  Search for a charge template with a given code\t \t  ",
        "description" : "\t  Search for a charge template with a given code\t \t  ",
        "operationId" : "GET_ChargeTemplate_chargeTemplates_{chargeTemplateCode}",
        "parameters" : [ {
          "name" : "chargeTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A charge template\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/version" : {
      "get" : {
        "tags" : [ "Application", "ChargeTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_53",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/chargeTemplates/{chargeTemplateCode}/status/{status}" : {
      "put" : {
        "tags" : [ "ChargeTemplates", "ChargeTemplate" ],
        "summary" : "update charge template status for a given code",
        "description" : "update charge template status for a given code",
        "operationId" : "PUT_ChargeTemplate_chargeTemplates_{chargeTemplateCode}",
        "parameters" : [ {
          "name" : "chargeTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "charge template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate" : {
      "get" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Search counter template with a given code.  ",
        "description" : " Search counter template with a given code.  ",
        "operationId" : "    GET_CounterTemplate_search",
        "parameters" : [ {
          "name" : "counterTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " counter template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCounterTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCounterTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Update counter template.  ",
        "description" : " Update counter template.  ",
        "operationId" : "    PUT_CounterTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Create counter template.  ",
        "description" : " Create counter template.  ",
        "operationId" : "    POST_CounterTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Create or update a counter Template. ",
        "description" : " Create or update a counter Template. ",
        "operationId" : "    POST_CounterTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Disable a Counter template with a given code  ",
        "description" : " Disable a Counter template with a given code  ",
        "operationId" : "    POST_CounterTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Enable a Counter template with a given code  ",
        "description" : " Enable a Counter template with a given code  ",
        "operationId" : "    POST_CounterTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "CounterTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_52",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " List CounterTemplates matching a given criteria ",
        "description" : " List CounterTemplates matching a given criteria ",
        "operationId" : "    GET_CounterTemplate_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of CounterTemplates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CounterTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CounterTemplatesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/counterTemplate/{counterTemplateCode}" : {
      "delete" : {
        "tags" : [ "CounterTemplate" ],
        "summary" : " Remove counter template with a given code.  ",
        "description" : " Remove counter template with a given code.  ",
        "operationId" : "    DELETE_CounterTemplate_{counterTemplateCode}",
        "parameters" : [ {
          "name" : "counterTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem" : {
      "get" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Find a discount plan item with a given code. ",
        "description" : " Find a discount plan item with a given code. ",
        "operationId" : "    GET_DiscountPlanItem_search",
        "parameters" : [ {
          "name" : "discountPlanItemCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A discount plan item ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountPlanItemResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountPlanItemResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " update an existed discount plan item.  ",
        "description" : " update an existed discount plan item.  ",
        "operationId" : "    PUT_DiscountPlanItem_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Create a new discount plan item. ",
        "description" : " Create a new discount plan item. ",
        "operationId" : "    POST_DiscountPlanItem_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/tradingDiscountPlanItem" : {
      "post" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Create a new trading discount plan item. ",
        "description" : " Create a new trading discount plan item. ",
        "operationId" : "    POST_TradingDiscountPlanItem_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingDiscountPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingDiscountPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/createOrUpdate" : {
      "post" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " create/update a discount plan item. ",
        "description" : " create/update a discount plan item. ",
        "operationId" : "    POST_DiscountPlanItem_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/tradingDiscountPlanItem/{id}" : {
      "put" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Update an existing trading discount plan item. ",
        "description" : " Update an existing new trading discount plan item. ",
        "operationId" : "    POST_TradingDiscountPlanItem_update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of trading discount plan item to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingDiscountPlanItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingDiscountPlanItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Delete an existing trading discount plan item. ",
        "description" : " Delete an existing new trading discount plan item. ",
        "operationId" : "    POST_TradingDiscountPlanItem_delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of trading discount plan item to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/{code}/disable" : {
      "post" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Disable a Discount plan item with a given code  ",
        "description" : " Disable a Discount plan item with a given code  ",
        "operationId" : "    POST_DiscountPlanItem_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/{code}/enable" : {
      "post" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " Enable a Discount plan item with a given code  ",
        "description" : " Enable a Discount plan item with a given code  ",
        "operationId" : "    POST_DiscountPlanItem_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/version" : {
      "get" : {
        "tags" : [ "Application", "DiscountPlanItem" ],
        "summary" : "Get version of application",
        "operationId" : "index_54",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/list" : {
      "get" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " List all discount plan items by current user. ",
        "description" : " List all discount plan items by current user. ",
        "operationId" : "    GET_DiscountPlanItem_list",
        "responses" : {
          "default" : {
            "description" : " List of discount plan items ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountPlanItemsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountPlanItemsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/listGetAll" : {
      "get" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " List DiscountPlanItems matching a given criteria ",
        "description" : " List DiscountPlanItems matching a given criteria ",
        "operationId" : "    GET_DiscountPlanItem_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of DiscountPlanItems ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountPlanItemsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountPlanItemsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlanItem/{discountPlanItemCode}" : {
      "delete" : {
        "tags" : [ "DiscountPlanItem" ],
        "summary" : " remove a discount plan item by code. ",
        "description" : " remove a discount plan item by code. ",
        "operationId" : "    DELETE_DiscountPlanItem_{discountPlanItemCode}",
        "parameters" : [ {
          "name" : "discountPlanItemCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan" : {
      "get" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " Find a discount plan with a given code   ",
        "description" : " Find a discount plan with a given code   ",
        "operationId" : "    GET_DiscountPlan_search",
        "parameters" : [ {
          "name" : "discountPlanCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return discount plan ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlanResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlanResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " Update an existing discount plan  ",
        "description" : " Update an existing discount plan  ",
        "operationId" : "    PUT_DiscountPlan_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " Create a new discount plan  ",
        "description" : " Create a new discount plan  ",
        "operationId" : "    POST_DiscountPlan_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " Remove an existing discount plan with a given code   ",
        "description" : " Remove an existing discount plan with a given code   ",
        "operationId" : "    DELETE_DiscountPlan_delete",
        "parameters" : [ {
          "name" : "discountPlanCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan/createOrUpdate" : {
      "post" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " Create new or update an existing discount plan  ",
        "description" : " Create new or update an existing discount plan  ",
        "operationId" : "    POST_DiscountPlan_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan/{code}/disable" : {
      "post" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " Enable a Discount plan with a given code  ",
        "description" : " Enable a Discount plan with a given code  ",
        "operationId" : "    POST_DiscountPlan_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan/{code}/enable" : {
      "post" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " List DiscountPlans matching a given criteria ",
        "description" : " List DiscountPlans matching a given criteria ",
        "operationId" : "    POST_DiscountPlan_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of DiscountPlans ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlansResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlansResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan/version" : {
      "get" : {
        "tags" : [ "Application", "DiscountPlan" ],
        "summary" : "Get version of application",
        "operationId" : "index_55",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan/list" : {
      "get" : {
        "tags" : [ "DiscountPlan" ],
        "summary" : " List discount plan  ",
        "description" : " List discount plan  ",
        "operationId" : "    GET_DiscountPlan_list",
        "responses" : {
          "default" : {
            "description" : " A list of discount plans ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlansResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlansResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/discountPlan/listGetAll" : {
      "get" : {
        "tags" : [ "DiscountPlan" ],
        "operationId" : "listGetAll_3",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlansResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiscountPlansResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplateCategory" : {
      "get" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Find a offer template category with a given code  ",
        "description" : " Find a offer template category with a given code  ",
        "operationId" : "    GET_OfferTemplateCategory_search",
        "parameters" : [ {
          "name" : "offerTemplateCategoryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return offerTemplateCategoryCodeDto containing offerTemplateCategoryCode ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateCategoryResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Update an existing offer template category  ",
        "description" : " Update an existing offer template category  ",
        "operationId" : "    PUT_OfferTemplateCategory_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Create a new offer template category  ",
        "description" : " Create a new offer template category  ",
        "operationId" : "    POST_OfferTemplateCategory_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Remove an existing offer template category with a given code  ",
        "description" : " Remove an existing offer template category with a given code  ",
        "operationId" : "    DELETE_OfferTemplateCategory_delete",
        "parameters" : [ {
          "name" : "offerTemplateCategoryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplateCategory/createOrUpdate" : {
      "post" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Create new or update an existing offer template category  ",
        "description" : " Create new or update an existing offer template category  ",
        "operationId" : "    POST_OfferTemplateCategory_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplateCategory/{code}/disable" : {
      "post" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Disable a Offer template category with a given code  ",
        "description" : " Disable a Offer template category with a given code  ",
        "operationId" : "    POST_OfferTemplateCategory_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplateCategory/{code}/enable" : {
      "post" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " Enable a Offer template category with a given code  ",
        "description" : " Enable a Offer template category with a given code  ",
        "operationId" : "    POST_OfferTemplateCategory_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplateCategory/version" : {
      "get" : {
        "tags" : [ "Application", "OfferTemplateCategory" ],
        "summary" : "Get version of application",
        "operationId" : "index_56",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplateCategory/listGetAll" : {
      "get" : {
        "tags" : [ "OfferTemplateCategory" ],
        "summary" : " List DiscountPlanItems matching a given criteria ",
        "description" : " List DiscountPlanItems matching a given criteria ",
        "operationId" : "    GET_OfferTemplateCategory_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of DiscountPlanItems ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferTemplateCategoriesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferTemplateCategoriesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/{offerCode}/addProduct" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : "Add existing product to an offer",
        "description" : "Add existing product to an offer",
        "operationId" : "addProduct",
        "parameters" : [ {
          "name" : "offerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOfferTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOfferTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status and offerTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateResponseDto"
                }
              }
            }
          },
          "412" : {
            "description" : "product code and product id paramters are missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while adding product to offer template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate" : {
      "get" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Search offer template with a given code and validity dates",
        "description" : " Search offer template with a given code and validity dates. If no validity dates are provided, an offer template valid on a current date will be returned.  ",
        "operationId" : "    GET_OfferTemplate_search",
        "parameters" : [ {
          "name" : "offerTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        }, {
          "name" : "loadOfferServiceTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadOfferProductTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadServiceChargeTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadProductChargeTemplate",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "loadAllowedDiscountPlan",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return offerTemplateDto containing offerTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateResponseDto"
                }
              }
            }
          },
          "412" : {
            "description" : "offerTemplateCode paramter is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Update offer template.  ",
        "description" : " Update offer template.  ",
        "operationId" : "    PUT_OfferTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Update offer template.  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "302" : {
            "description" : "Offer template already existe",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed creating/deleting image",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              }
            }
          },
          "412" : {
            "description" : "code of Offer template is missing / imagePath is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these entities doesn't exist : BusinessOfferModel, OfferTemplateCategory, ScriptInstance, Seller, Channel, OneShotChargeTemplate, CustomerCategory",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Create offer template.  ",
        "description" : " Create offer template.  ",
        "operationId" : "    POST_OfferTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : " Create offer template.  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "302" : {
            "description" : "Offer template already existe",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed creating/deleting image",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              }
            }
          },
          "412" : {
            "description" : "code of Offer template is missing / imagePath is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these entities doesn't exist : BusinessOfferModel, OfferTemplateCategory, ScriptInstance, Seller, Channel, OneShotChargeTemplate, CustomerCategory",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Remove offer template with a given code and validity dates",
        "description" : " Remove offer template with a given code and validity dates. If no validity dates are provided, an offer template valid on a current date will be deleted.  ",
        "operationId" : "    POST_OfferTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Enable a Offer template with a given code  ",
        "description" : " Enable a Offer template with a given code  ",
        "operationId" : "    POST_OfferTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "code paramter is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while enabling offer template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/{offerCode}/dissociateProducts" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : "dissociate existing product from an offer",
        "description" : "dissociate existing product from an offer",
        "operationId" : "dissociateProduct",
        "parameters" : [ {
          "name" : "offerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status and offerTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOfferTemplateResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while dissociate product from offer template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/duplicate/{offerTemplateCode}" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "operationId" : "duplicateOffer",
        "parameters" : [ {
          "name" : "offerTemplateCode",
          "in" : "path",
          "description" : "code of the offer that will be duplicate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "duplicateHierarchy",
          "in" : "query",
          "description" : "copy the hierarchy of the offer",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "preserveCode",
          "in" : "query",
          "description" : "preserve code of offer",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "date valid from",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "date valid to",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Create or update offer template based on a given code.  ",
        "description" : " Create or update offer template based on a given code.  ",
        "operationId" : "    POST_OfferTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "code paramter is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while enabling offer template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "OfferTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_57",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "OfferTemplate" ],
        "operationId" : "list_2",
        "parameters" : [ {
          "name" : "offerTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOfferTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOfferTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/list" : {
      "get" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " List Offer templates matching filtering and query criteria or code and validity dates",
        "description" : " List Offer templates matching filtering and query criteria or code and validity dates.  If neither date is provided, validity dates will not be considered. If only validFrom is provided, a search will return offers valid on a given date. If only validTo date is provided, a search will return offers valid from today to a given date. ",
        "operationId" : "    GET_OfferTemplate_list",
        "parameters" : [ {
          "name" : "offerTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of offer templates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOfferTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOfferTemplateResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "some field doesn't have a valid field name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " List Offer templates matching a given criteria ",
        "description" : " List Offer templates matching a given criteria ",
        "operationId" : "    POST_OfferTemplate_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of Offer templates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOfferTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOfferTemplateResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "some field doesn't have a valid field name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/cpq/list" : {
      "post" : {
        "tags" : [ "Catalog browsing", "OfferTemplate" ],
        "summary" : "List offers matching the customer and seller contexts",
        "description" : "Get offers matching the customer and seller contexts, it returns offers and their products",
        "operationId" : "listPost_3",
        "requestBody" : {
          "description" : "The customer context information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerContextDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerContextDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All offers successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCpqOfferResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCpqOfferResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "billingAccountCode does not exist"
          },
          "400" : {
            "description" : "some field doesn't have a valid field name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/massDisable" : {
      "put" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Disable all offer templates match the filter.  ",
        "description" : " Disable all offer templates match the filter.  ",
        "operationId" : "    PUT_OfferTemplate_massEnable",
        "requestBody" : {
          "description" : "Map of filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnableOfferTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnableOfferTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "Filters is required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while disabling all offer templates match the filter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/massEnable" : {
      "put" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " Enable all offer templates match the filter.  ",
        "description" : " Enable all offer templates match the filter.  ",
        "operationId" : "    PUT_OfferTemplate_massEnable_1",
        "requestBody" : {
          "description" : "Map of filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnableOfferTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnableOfferTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "Filters is required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while enabling all offer templates match the filter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/{offerTemplateCode}" : {
      "delete" : {
        "tags" : [ "OfferTemplate" ],
        "summary" : " List offerTemplates matching a given criteria  ",
        "description" : " List offerTemplates matching a given criteria  ",
        "operationId" : "    DELETE_OfferTemplate_{offerTemplateCode}",
        "parameters" : [ {
          "name" : "offerTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of offer templates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "412" : {
            "description" : "offerTemplateCode paramter is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/offerTemplate/{offerTemplateCode}/update/status" : {
      "post" : {
        "tags" : [ "OfferTemplate" ],
        "operationId" : "updateStatus",
        "parameters" : [ {
          "name" : "offerTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "new status",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          }
        }, {
          "name" : "date valid from",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "date valid to",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate" : {
      "get" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Search one shot charge templatewith a given code.  ",
        "description" : " Search one shot charge templatewith a given code.  ",
        "operationId" : "    GET_OneShotChargeTemplate_search",
        "parameters" : [ {
          "name" : "oneShotChargeTemplateCode",
          "in" : "query",
          "description" : "The One shot charge template code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " one shot charge template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOneShotChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOneShotChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Update one shot charge template.  ",
        "description" : " Update one shot charge template.  ",
        "operationId" : "    PUT_OneShotChargeTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Create one shot charge template.  ",
        "description" : " Create one shot charge template.  ",
        "operationId" : "    POST_OneShotChargeTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Remove one shot charge tesmplate with a given code.  ",
        "description" : " Remove one shot charge tesmplate with a given code.  ",
        "operationId" : "    POST_OneShotChargeTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Enable a One shot charge template with a given code  ",
        "description" : " Enable a One shot charge template with a given code  ",
        "operationId" : "    POST_OneShotChargeTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of One shot charge template to be disabled",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Create new or update an existing.  ",
        "description" : " Create new or update an existing.  ",
        "operationId" : "    POST_OneShotChargeTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of One shot charge template to be enabled",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "OneShotChargeTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_58",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "OneShotChargeTemplate" ],
        "operationId" : "list_3",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OneShotChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OneShotChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/list" : {
      "get" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " List one shot charge template with the following filters.  ",
        "description" : " List one shot charge template with the following filters.  ",
        "operationId" : "    GET_OneShotChargeTemplate_list",
        "parameters" : [ {
          "name" : "languageCode",
          "in" : "query",
          "description" : "The language code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "countryCode",
          "in" : "query",
          "description" : "The country code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "The currency code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sellerCode",
          "in" : "query",
          "description" : "The seller code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The subscription date",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of one shot charge template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OneShotChargeTemplateWithPriceListDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OneShotChargeTemplateWithPriceListDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/oneShotChargeTemplate/{oneShotChargeTemplateCode}" : {
      "delete" : {
        "tags" : [ "ChargeTemplates", "OneShotChargeTemplate" ],
        "summary" : " Return the list of oneShotChargeTemplates. ",
        "description" : " Return the list of oneShotChargeTemplates. ",
        "operationId" : "    DELETE_OneShotChargeTemplate_{oneShotChargeTemplateCode}",
        "parameters" : [ {
          "name" : "oneShotChargeTemplateCode",
          "in" : "path",
          "description" : "The one shot charge template code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of oneShotChargeTemplates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OneShotChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OneShotChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixLines" : {
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "update all price plan matrix lines",
        "description" : "update all price plan matrix lines",
        "operationId" : "updatePricePlanMatrixLines",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "the price plan line successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      },
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "add all price plan matrix lines",
        "description" : "add all price plan matrix lines",
        "operationId" : "addPricePlanMatrixLines",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "the price plan line successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanMatrixLines/calculate" : {
      "post" : {
        "operationId" : "calculateTradingPricePlanMatrixLine",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanVersionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/pricePlan" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "find a price plan matrix with a given code",
        "description" : "Find a price plan matrix with a given code",
        "operationId" : "find_7",
        "parameters" : [ {
          "name" : "pricePlanCode",
          "in" : "query",
          "description" : "The price plan code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnPricePlanMatrixLine",
          "in" : "query",
          "description" : "Indicate if returning pricePlanMatrixLine",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully retreived",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      },
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Update an existing price plan matrix",
        "description" : "Update an existing price plan matrix",
        "operationId" : "update_8",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully updated"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      },
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "create a price plan ",
        "description" : "create a price plan matrix",
        "operationId" : "create_8",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully created"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixColumns" : {
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "update a price plan matrix column",
        "description" : "update a price plan matrix column",
        "operationId" : "update_9",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixColumnDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixColumnDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan column successfully updated"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      },
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "create a price plan matrix column",
        "description" : "create a price plan matrix column",
        "operationId" : "create_9",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixColumnDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixColumnDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "the price plan column successfully created"
          },
          "412" : {
            "description" : "the price plan column with code is missing"
          },
          "302" : {
            "description" : "the price plan column already existe with the given code"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/createOrUpdate" : {
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Create new or update an existing price plan matrix ",
        "description" : "Create new or update an existing price plan matrix",
        "operationId" : "createOrUpdate_7",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully created/updated"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/pricePlanMatrixVersion" : {
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "update a price plan version",
        "description" : "update an existing price plan version",
        "operationId" : "updateMatrixPricePlanVersion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan version successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Unkonw product to attach to product version"
          },
          "400" : {
            "description" : "the product verion with product code and current version in param does not exist "
          }
        }
      },
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "create or update a price plan version",
        "description" : "create a price plan version if it doesn't exist or update an existing price plan version",
        "operationId" : "createOrUpdateMatrixPricePlanVersion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan version successfully created or updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Unkonw product to attach to product version"
          },
          "400" : {
            "description" : "the product verion with product code and current version in param does not exist "
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanVersion" : {
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Create a trading price plan version",
        "description" : "Create a trading price plan version",
        "operationId" : "createTradingPricePlanVersion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the trading price plan version successfully created"
          },
          "404" : {
            "description" : "the trading currency with price plan code or id in param does not exist "
          },
          "412" : {
            "description" : "the price plan version is mandatory to create price plan version "
          }
        }
      }
    },
    "/catalog/pricePlan/pricePlanMatrixVersion/{pricePlanVersionId}/tradingPricePlanMatrixLines/tradingCurrency/{tradingCurrencyCode}" : {
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "delete trading price plan matrix lines",
        "description" : "delete trading price plan matrix lines",
        "operationId" : "deleteTradingPricePlanMatrixLines",
        "parameters" : [ {
          "name" : "pricePlanVersionId",
          "in" : "path",
          "description" : "the id of price plan matrix version ",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tradingCurrencyCode",
          "in" : "path",
          "description" : "The price plan matrix code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "delete all trading price matrix line"
          },
          "404" : {
            "description" : "the trading currency for trading plan matrix version doesn't exist"
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanVersion/{id}" : {
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "update a trading price plan version",
        "description" : "Update a trading price plan version",
        "operationId" : "updateTradingPricePlanVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The trading price plan version id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the trading price plan version successfully Updated"
          },
          "404" : {
            "description" : "the trading currency with price plan code or id in param does not exist "
          },
          "412" : {
            "description" : "the price plan version is mandatory to create price plan version "
          }
        }
      },
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Delete a trading price plan version",
        "description" : "Delete a trading price plan version",
        "operationId" : "deleteTradingPricePlanVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of trading price plan to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the trading price plan version successfully deleted"
          },
          "404" : {
            "description" : "the trading currency with price plan code or id in param does not exist "
          },
          "412" : {
            "description" : "the price plan version is mandatory to create price plan version "
          }
        }
      }
    },
    "/catalog/pricePlan/{code}/disable" : {
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Disable a Price plan with a given code",
        "description" : "Disable a Price plan with a given code",
        "operationId" : "disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The price plan code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully disabled"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanMatrixLines/disable" : {
      "post" : {
        "operationId" : "disableAllTradingPricePlan",
        "requestBody" : {
          "description" : "contain information about all trading price that will be disabled",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanInputDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanInputDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanVersion/{id}/disable" : {
      "post" : {
        "operationId" : "disableTradingVersionPricePlan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/{pricePlanMatrixVersion}/duplication" : {
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "duplicate a price plan matrix version",
        "description" : "duplicate a product version",
        "operationId" : "duplicatePricePlan",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "description" : "The price plan matrix code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixNewCode",
          "in" : "query",
          "description" : "The price plan matrix new code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "description" : "The price plan matrix version to be duplicated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "priceVersionType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan version successfully duplicated"
          },
          "404" : {
            "description" : "the price plan version with price plan code and current version in param does not exist "
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/duplication" : {
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "duplicate a price plan matrix version",
        "description" : "duplicate a product version",
        "operationId" : "duplicatePricePlanVersion",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "description" : "The price plan matrix code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "description" : "The price plan matrix version to be duplicated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatePeriodDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatePeriodDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan version successfully duplicated"
          },
          "404" : {
            "description" : "the price plan version with price plan code and current version in param does not exist "
          },
          "409" : {
            "description" : "Warning : Unable to confirm - An other period is overlapping."
          }
        }
      }
    },
    "/catalog/pricePlan/{code}/enable" : {
      "post" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Enable a Price plan with a given code",
        "description" : "Enable a Price plan with a given code",
        "operationId" : "enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The price plan code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully enabled"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanMatrixLines/enable" : {
      "post" : {
        "operationId" : "enableAllTradingPricePlan",
        "requestBody" : {
          "description" : "contain information about all trading price that will be enabled",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanInputDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingPricePlanInputDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/tradingPricePlanVersion/{id}/enable" : {
      "post" : {
        "operationId" : "enableTradingVersionPricePlan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/pricePlanMatrixColumns/{pricePlanMatrixColumnCode}" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "get a price plan matrix column",
        "description" : "get a price plan matrix column",
        "operationId" : "findPricePlanMatrixColumn",
        "parameters" : [ {
          "name" : "pricePlanMatrixColumnCode",
          "in" : "path",
          "description" : "The price plan matrix column code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan column successfully loaded"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/charges/{chargeCode}" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Get price plan matrix by charge code",
        "description" : "Retrieve price plan matrix data for a given charge code. Matrix lines include additional fields: description, price, and priceEl",
        "operationId" : "getPricePlanMatrixByCharge",
        "parameters" : [ {
          "name" : "chargeCode",
          "in" : "path",
          "description" : "Code of the charge",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanCode",
          "in" : "query",
          "description" : "Optional price plan code filter",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Price plan matrix data successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanMatrixResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanMatrixResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Price plan not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/pricePlanMatrixLines/{pricePlanMatrixLineId}" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "get a price plan matrix line",
        "description" : "get a price plan matrix line",
        "operationId" : "getPricePlanMatrixLine",
        "parameters" : [ {
          "name" : "pricePlanMatrixLineId",
          "in" : "path",
          "description" : "The price plan matrix line id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan line successfully loaded"
          },
          "400" : {
            "description" : "Internal error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "delete a price plan matrix line",
        "description" : "delete a price plan matrix line",
        "operationId" : "removePricePlanMatrixLine",
        "parameters" : [ {
          "name" : "pricePlanMatrixLineId",
          "in" : "path",
          "description" : "The price plan matrix line id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan line successfully deleted"
          },
          "400" : {
            "description" : "Internal error"
          }
        }
      }
    },
    "/catalog/pricePlan/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_59",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/listGetAll" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "List all price plans.",
        "operationId" : "listGetAll_4",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PricePlanMatrixesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PricePlanMatrixesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/pricePlan/list" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "List price plan matrix",
        "description" : "List price plan matrix",
        "operationId" : "listPricePlanByEventCode",
        "parameters" : [ {
          "name" : "eventCode",
          "in" : "query",
          "description" : "The event code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "price plans are successfully retreived",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PricePlanMatrixesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PricePlanMatrixesResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/pricePlanMatrixVersions" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "get the price plan versions",
        "description" : "load the list of ppm versions",
        "operationId" : "listPricePlanMatrixVersions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the list of price plan version successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanCode}" : {
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Remove an existing price plan matrix with a given code",
        "description" : "Remove an existing price plan matrix with a given code",
        "operationId" : "remove_6",
        "parameters" : [ {
          "name" : "pricePlanCode",
          "in" : "path",
          "description" : "The price plan code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan is successfully removed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}" : {
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "remove a price plan version",
        "description" : "remove a price plan version with price plan code and current version",
        "operationId" : "removeMatrixPricePlanVersion",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "description" : "The price plan matrix code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "description" : "The price plan matrix version",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan version successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Unknown price plan version"
          },
          "400" : {
            "description" : "the price plan version with price plan code and current version in param does not exist or the price plan matrix version is attached to a price plan matrix"
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixColumns/{pricePlanMatrixColumnCode}" : {
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "delete a price plan matrix column",
        "description" : "delete a price plan matrix column",
        "operationId" : "removePricePlanMatrixColumnCode",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pricePlanMatrixColumnCode",
          "in" : "path",
          "description" : "The price plan matrix column code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan column successfully deleted"
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/pricePlan/pricePlanMatrixLines" : {
      "delete" : {
        "tags" : [ "Price Plan" ],
        "summary" : "delete list of a price plan matrix line",
        "description" : "delete list of a price plan matrix line",
        "operationId" : "removePricePlanMatrixLines",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the price plan lines successfully deleted"
          },
          "400" : {
            "description" : "Internal error"
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/status/{status}" : {
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "update the price plan version status",
        "description" : "the product with status DRAFT can be change to PUBLIED or CLOSED ",
        "operationId" : "updatePricePlanMatrixVersionStatus",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "description" : "The price plan matrix code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "description" : "The price plan matrix version",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "The status of Price plan",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the price plan version successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Unknown price plan version"
          },
          "400" : {
            "description" : "the status of the price plan matrix is already closed"
          }
        }
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixLines/updateWithoutDelete" : {
      "put" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Creat and update all price plan matrix lines",
        "description" : "Creat/update all price plan matrix lines",
        "operationId" : "updateWithoutDeletePricePlanMatrixLines",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMatrixLinesDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "the price plan line successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPricePlanVersionResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error"
          }
        }
      }
    },
    "/catalog/products/{productCode}/addCharges" : {
      "post" : {
        "tags" : [ "Catalog browsing" ],
        "summary" : "Allow to add existing charges from existing product",
        "description" : "Allow to add existing charges to an existing product",
        "operationId" : "addCharges",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ProductChargeTemplateMappingDto"
                }
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ProductChargeTemplateMappingDto"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All charges was added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "product or one of the charges doesn't exist"
          }
        }
      }
    },
    "/catalog/products/productLines" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to create or update a product line",
        "description" : "create a product line if it doesn't exist or update an existing product line",
        "operationId" : "createOrUpdateProductLine",
        "requestBody" : {
          "description" : "create new product line or update an existing product line",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductLineDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductLineDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the product line successfully created or updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductLineDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductLineDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "the product with code in param does exist for a new product line "
          }
        }
      }
    },
    "/catalog/products/productVersions" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to create or update a product version",
        "description" : "create a product version if it doesn't exist or update an existing product line",
        "operationId" : "createOrUpdateProductVersion",
        "requestBody" : {
          "description" : "create new product version or update an existing product version",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductVersionDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the product version successfully created or updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductVersionResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductVersionResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Unkonw product to attach to product version"
          },
          "400" : {
            "description" : "the product verion with product code and current version in param does not exist "
          }
        }
      }
    },
    "/catalog/products" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "Get products matching the given criteria",
        "description" : "Get products matching the given criteria",
        "operationId" : "listProducts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListProductsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListProductsResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to create a new product",
        "description" : "creation of the product",
        "operationId" : "createProduct",
        "requestBody" : {
          "description" : "product dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the product successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "the product with code is missing"
          },
          "302" : {
            "description" : "the product already existe with the given code"
          },
          "400" : {
            "description" : "Internat error"
          },
          "404" : {
            "description" : "one of the entites doesn't exist : "
          }
        }
      }
    },
    "/catalog/products/{productCode}/duplication" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to duplicate a product",
        "description" : "duplicate a product with the published its version or a recent version",
        "operationId" : "duplicateProduct",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "description" : "code of the product that will be duplicate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "duplicateHierarchy",
          "in" : "query",
          "description" : "copy the hierarchy of the product",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "preserveCode",
          "in" : "query",
          "description" : "preserve code of product",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product successfully duplicated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "the product with product code in param does not exist ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/products/{productCode}/productVersions/{productVersion}/duplication" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to duplicate a product version",
        "description" : "duplicate a product version",
        "operationId" : "duplicateProductVersion",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product version successfully duplicated"
          },
          "404" : {
            "description" : "the product verion with product code and current version in param does not exist "
          }
        }
      }
    },
    "/catalog/products/{productCode}" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to find an existing product  ",
        "description" : "retrieving a product with its code",
        "operationId" : "findProductByCode",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "description" : "code product for searching an existing product",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "the product with code in param does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to update a product ",
        "description" : "to update the product the status must be DRAFT otherwise exception will be thrown",
        "operationId" : "updateProduct",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "description" : "code of the product to be updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "product dto for updating a product",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the product successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Unknown producth"
          },
          "400" : {
            "description" : "the status of the product is different to DRAFT"
          }
        }
      },
      "delete" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to remove an existing product",
        "description" : "remove a product by its code",
        "operationId" : "removeProduct",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "description" : "product code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product is successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "unknown product line"
          },
          "400" : {
            "description" : "the product is attached to an offer"
          }
        }
      }
    },
    "/catalog/products/productLines/{productLineCode}" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to retrieve a product line",
        "description" : "retrieving a product line with its code",
        "operationId" : "findProductLineByCode",
        "parameters" : [ {
          "name" : "productLineCode",
          "in" : "path",
          "description" : "find an existing product line",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductLineDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductLineDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "productLineCode parameter is missing"
          },
          "404" : {
            "description" : "Unkonw product line"
          },
          "400" : {
            "description" : "the product line with code in param does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to remove an existing product line",
        "description" : "remove a product line by its code",
        "operationId" : "removeProductLine",
        "parameters" : [ {
          "name" : "productLineCode",
          "in" : "path",
          "description" : "productLine code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product line is successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "unknown product line"
          },
          "400" : {
            "description" : "the product line is attached to a product"
          }
        }
      }
    },
    "/catalog/products/{productCode}/productVersions/{productVersion}" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to find a product version",
        "description" : "find a product version",
        "operationId" : "findProductVersion",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductVersionResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductVersionResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "the product verion with product code and current version in param does not exist "
          }
        }
      },
      "delete" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to remove a product version",
        "description" : "remove a product version with product code and current version",
        "operationId" : "removeProductVersion",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product version successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Unknown product version"
          },
          "400" : {
            "description" : "the product version with product code and current version in param does not exist or the product version is attached to a product"
          }
        }
      }
    },
    "/catalog/products/{productCode}/productVersions" : {
      "get" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to find all product versions related to a product",
        "description" : "find product versions by product code",
        "operationId" : "findProductVersions",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListProductVersionsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListProductVersionsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/products/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_60",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/products/cpq/offers" : {
      "post" : {
        "tags" : [ "Catalog browsing" ],
        "summary" : "Get products with their attributes that match the quote offer context",
        "description" : "Get products with their attributes that match the offer context",
        "operationId" : "listPost_4",
        "requestBody" : {
          "description" : "The Offer context",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferContextDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferContextDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCpqOfferResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCpqOfferResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "offerCode does not exist"
          }
        }
      }
    },
    "/catalog/products/{productCode}/removeCharges" : {
      "post" : {
        "tags" : [ "Catalog browsing" ],
        "summary" : "Allow to remove existing charges from existing product",
        "description" : "remove to add existing charges from existing product",
        "operationId" : "removeCharge",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All charges was removed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "product or one of the charges doesn't exist"
          }
        }
      }
    },
    "/catalog/products/{productCode}/status/{status}" : {
      "put" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to update product status  ",
        "description" : "the product with status DRAFT can be change to ACTIVE or CLOSED, if the product status is ACTIVE then the only value possible is CLOSED otherwise it will throw exception",
        "operationId" : "updateProductStatus",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "CLOSED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "the status of the product is already closed"
          }
        }
      }
    },
    "/catalog/products/{productCode}/productVersions/{productVersion}/status/{status}" : {
      "put" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to update the product version status",
        "description" : "the product with status DRAFT can be change to PUBLIED or CLOSED ",
        "operationId" : "updateProductVersionStatus",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the product version successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductVersionResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductVersionResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Unknown product version"
          },
          "400" : {
            "description" : "the status of the product is already closed"
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate" : {
      "get" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Find a recurring charge template with a given code.  ",
        "description" : " Find a recurring charge template with a given code.  ",
        "operationId" : "    GET_RecurringChargeTemplate_search",
        "parameters" : [ {
          "name" : "recurringChargeTemplateCode",
          "in" : "query",
          "description" : "code of recurring charge template",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return a recurringChargeTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRecurringChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRecurringChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Return the list of recurringChargeTemplates. ",
        "description" : " Return the list of recurringChargeTemplates. ",
        "operationId" : "    PUT_RecurringChargeTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " list of recurringChargeTemplates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Create a new recurring charge template.  ",
        "description" : " Create a new recurring charge template.  ",
        "operationId" : "    POST_RecurringChargeTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Remove an existing recurring charge template with a given code.  ",
        "description" : " Remove an existing recurring charge template with a given code.  ",
        "operationId" : "    POST_RecurringChargeTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Enable a Recurring charge template with a given code  ",
        "description" : " Enable a Recurring charge template with a given code  ",
        "operationId" : "    POST_RecurringChargeTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of recurring charge template to be disabled",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Create new or update an existing recurring charge template  ",
        "description" : " Create new or update an existing recurring charge template  ",
        "operationId" : "    POST_RecurringChargeTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of recurring charge template to be enabled",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "RecurringChargeTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_61",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "RecurringChargeTemplate" ],
        "operationId" : "list_4",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/recurringChargeTemplate/{recurringChargeTemplateCode}" : {
      "delete" : {
        "tags" : [ "ChargeTemplates", "RecurringChargeTemplate" ],
        "summary" : " Update an existing recurring charge template.  ",
        "description" : " Update an existing recurring charge template.  ",
        "operationId" : "    DELETE_RecurringChargeTemplate_{recurringChargeTemplateCode}",
        "parameters" : [ {
          "name" : "recurringChargeTemplateCode",
          "in" : "path",
          "description" : "The recurring charge template code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate" : {
      "get" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Find a service template with a given code.  ",
        "description" : " Find a service template with a given code.  ",
        "operationId" : "    GET_ServiceTemplate_search",
        "parameters" : [ {
          "name" : "serviceTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return serviceTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServiceTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServiceTemplateResponseDto"
                }
              }
            }
          },
          "412" : {
            "description" : "serviceTemplateCode is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "ServiceTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Update an existing service template.  ",
        "description" : " Update an existing service template.  ",
        "operationId" : "    PUT_ServiceTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Update an existing service template.  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "one of these fields is missing : code, renewalInfo/initillyActiveForUnit, renewalInfo/endOfTermAction, renewalInfo/renewFor, renewalInfo/renewForUnit, renewalInfo/terminationReason",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "ServiceTemplateService already existe",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these entities doesn't exist : Calendar, BusinessServiceModel, OneShotChargeTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed creating/deleting image",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Create a new service template.  ",
        "description" : " Create a new service template.  ",
        "operationId" : "    POST_ServiceTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Create a new service template.  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "one of these fields is missing : code, renewalInfo/initillyActiveForUnit, renewalInfo/endOfTermAction, renewalInfo/renewFor, renewalInfo/renewForUnit, renewalInfo/terminationReason",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "ServiceTemplateService already existe",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these entities doesn't exist : Calendar, BusinessServiceModel, OneShotChargeTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed creating/deleting image",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Create new or update an existing service template  ",
        "description" : " Create new or update an existing service template  ",
        "operationId" : "    POST_ServiceTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "one of these fields is missing : code, renewalInfo/initillyActiveForUnit, renewalInfo/endOfTermAction, renewalInfo/renewFor, renewalInfo/renewForUnit, renewalInfo/terminationReason",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "ServiceTemplateService already existe",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these entities doesn't exist : Calendar, BusinessServiceModel, OneShotChargeTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed creating/deleting image",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidImageData"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Disable a Service template with a given code  ",
        "description" : " Disable a Service template with a given code  ",
        "operationId" : "    POST_ServiceTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "code paramter is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while enabling offer template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Enable a Service template with a given code  ",
        "description" : " Enable a Service template with a given code  ",
        "operationId" : "    POST_ServiceTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "code paramter is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "OfferTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Internat error while enabling offer template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "ServiceTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_62",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/list" : {
      "post" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Gets a service template list matching given criteria .  ",
        "description" : " Gets a service template list matching given criteria .  ",
        "operationId" : "    POST_ServiceTemplate_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Return serviceTemplate list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListServiceTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListServiceTemplateResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "some field doesn't have a valid field name",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "ServiceTemplate" ],
        "operationId" : "listGetAll_5",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListServiceTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListServiceTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/serviceTemplate/{serviceTemplateCode}" : {
      "delete" : {
        "tags" : [ "ServiceTemplate" ],
        "summary" : " Remove service template with a given code.  ",
        "description" : " Remove service template with a given code.  ",
        "operationId" : "    DELETE_ServiceTemplate_{serviceTemplateCode}",
        "parameters" : [ {
          "name" : "serviceTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "serviceTemplateCode is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "ServiceTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/triggeredEdr" : {
      "get" : {
        "tags" : [ "TriggeredEdr" ],
        "summary" : " Find triggered edr with a given code.  ",
        "description" : " Find triggered edr with a given code.  ",
        "operationId" : "    GET_TriggeredEdr_search",
        "parameters" : [ {
          "name" : "triggeredEdrCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Returns triggeredEdrTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTriggeredEdrResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTriggeredEdrResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TriggeredEdr" ],
        "summary" : " Update an existing triggered edr. template  ",
        "description" : " Update an existing triggered edr. template  ",
        "operationId" : "    PUT_TriggeredEdr_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TriggeredEdr" ],
        "summary" : " Create a new triggered edr. template  ",
        "description" : " Create a new triggered edr. template  ",
        "operationId" : "    POST_TriggeredEdr_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/triggeredEdr/createOrUpdate" : {
      "post" : {
        "tags" : [ "TriggeredEdr" ],
        "summary" : " Create new or update an existing triggered edr template  ",
        "description" : " Create new or update an existing triggered edr template  ",
        "operationId" : "    POST_TriggeredEdr_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/triggeredEdr/version" : {
      "get" : {
        "tags" : [ "Application", "TriggeredEdr" ],
        "summary" : "Get version of application",
        "operationId" : "index_63",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/triggeredEdr/listGetAll" : {
      "get" : {
        "tags" : [ "TriggeredEdr" ],
        "summary" : " Gets a triggeredEdrs list. ",
        "description" : " Gets a triggeredEdrs list. ",
        "operationId" : "    GET_TriggeredEdr_listGetAll",
        "responses" : {
          "default" : {
            "description" : " Return triggeredEdrs list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TriggeredEdrsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TriggeredEdrsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/triggeredEdr/{triggeredEdrCode}" : {
      "delete" : {
        "tags" : [ "TriggeredEdr" ],
        "summary" : " Remove an existing triggered edr template with a given code.  ",
        "description" : " Remove an existing triggered edr template with a given code.  ",
        "operationId" : "    DELETE_TriggeredEdr_{triggeredEdrCode}",
        "parameters" : [ {
          "name" : "triggeredEdrCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/unitOfMeasure" : {
      "get" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " Search for a unitOfMeasure with a given code  ",
        "description" : " Search for a unitOfMeasure with a given code  ",
        "operationId" : "    GET_UnitOfMeasure_search",
        "parameters" : [ {
          "name" : "unitOfMeasureCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A unitOfMeasure ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUnitOfMeasureResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUnitOfMeasureResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " Update an existing unitOfMeasure  ",
        "description" : " Update an existing unitOfMeasure  ",
        "operationId" : "update_10",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitOfMeasureDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitOfMeasureDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " Create a new unitOfMeasure  ",
        "description" : " Create a new unitOfMeasure  ",
        "operationId" : "create_10",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitOfMeasureDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitOfMeasureDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/unitOfMeasure/createOrUpdate" : {
      "post" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " Create new or update an existing unitOfMeasure  ",
        "description" : " Create new or update an existing unitOfMeasure  ",
        "operationId" : "createOrUpdate_8",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitOfMeasureDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitOfMeasureDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/unitOfMeasure/{code}" : {
      "delete" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " Remove an existing unitOfMeasure with a given code  ",
        "description" : " Remove an existing unitOfMeasure with a given code  ",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/unitOfMeasure/version" : {
      "get" : {
        "tags" : [ "Application", "UnitOfMeasure" ],
        "summary" : "Get version of application",
        "operationId" : "index_64",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/unitOfMeasure/list" : {
      "get" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " List all currencies. ",
        "description" : " List all currencies. ",
        "operationId" : "    GET_UnitOfMeasure_list",
        "responses" : {
          "default" : {
            "description" : " list of all unitOfMeasure/ ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListUnitOfMeasureResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListUnitOfMeasureResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/unitOfMeasure/listGetAll" : {
      "get" : {
        "tags" : [ "UnitOfMeasure" ],
        "summary" : " List UnitOfMeasures matching a given criteria ",
        "description" : " List UnitOfMeasures matching a given criteria ",
        "operationId" : "    GET_UnitOfMeasure_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of UnitOfMeasures ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListUnitOfMeasureResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListUnitOfMeasureResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate" : {
      "get" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Find an existing usage charge template with a given code.  ",
        "description" : " Find an existing usage charge template with a given code.  ",
        "operationId" : "    GET_UsageChargeTemplate_search",
        "parameters" : [ {
          "name" : "usageChargeTemplateCode",
          "in" : "query",
          "description" : "The usage charge template code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Returns a usageChargeTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUsageChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUsageChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Update usage charge template.  ",
        "description" : " Update usage charge template.  ",
        "operationId" : "    PUT_UsageChargeTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Create new usage charge template.  ",
        "description" : " Create new usage charge template.  ",
        "operationId" : "    POST_UsageChargeTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Create new or update an existing charge template with a given code.  ",
        "description" : " Create new or update an existing charge template with a given code.  ",
        "operationId" : "    POST_UsageChargeTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Disable a Usage charge template with a given code  ",
        "description" : " Disable a Usage charge template with a given code  ",
        "operationId" : "    POST_UsageChargeTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the usage charge template to be disabeled",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Enable a Usage charge template with a given code  ",
        "description" : " Enable a Usage charge template with a given code  ",
        "operationId" : "    POST_UsageChargeTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the usage charge template to be enabled",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "UsageChargeTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_65",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "UsageChargeTemplate" ],
        "operationId" : "listGetAll_6",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/list" : {
      "post" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " List UsageChargeTemplate matching a given criteria ",
        "description" : " List UsageChargeTemplate matching a given criteria ",
        "operationId" : "    POST_UsageChargeTemplate_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of UsageChargeTemplate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageChargeTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageChargeTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/usageChargeTemplate/{usageChargeTemplateCode}" : {
      "delete" : {
        "tags" : [ "ChargeTemplates", "UsageChargeTemplate" ],
        "summary" : " Remove usage charge template with a given code.  ",
        "description" : " Remove usage charge template with a given code.  ",
        "operationId" : "    DELETE_UsageChargeTemplate_{usageChargeTemplateCode}",
        "parameters" : [ {
          "name" : "usageChargeTemplateCode",
          "in" : "path",
          "description" : "The usage charge template code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/Communication/inbound" : {
      "post" : {
        "tags" : [ "Communication" ],
        "summary" : " Receives inbound communication from external source given the rest url above",
        "description" : " Receives inbound communication from external source given the rest url above. MEVEO handles it by throwing an inbount communication event with the communicationRequestDto.  ",
        "operationId" : "    POST_Communication_inbound",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommunicationRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommunicationRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/Communication/version" : {
      "get" : {
        "tags" : [ "Application", "Communication" ],
        "summary" : "Get version of application",
        "operationId" : "index_66",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/emailTemplate" : {
      "get" : {
        "tags" : [ "EmailTemplate" ],
        "summary" : " Find an email template with a given code  ",
        "description" : " Find an email template with a given code  ",
        "operationId" : "    GET_EmailTemplate_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Returns an email template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "EmailTemplate" ],
        "summary" : "\t  update an emailTemplate by dto\t  ",
        "description" : "\t  update an emailTemplate by dto\t  ",
        "operationId" : "    PUT_EmailTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "EmailTemplate" ],
        "summary" : "\t  Create an email template by dto\t  ",
        "description" : "\t  Create an email template by dto\t  ",
        "operationId" : "POST_EmailTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/emailTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "EmailTemplate" ],
        "summary" : " Create new or update an existing email template by dto  ",
        "description" : " Create new or update an existing email template by dto  ",
        "operationId" : "    POST_EmailTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/emailTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "EmailTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_67",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/emailTemplate/list" : {
      "get" : {
        "tags" : [ "EmailTemplate" ],
        "summary" : " List email templates  ",
        "description" : " List email templates  ",
        "operationId" : "    GET_EmailTemplate_list",
        "responses" : {
          "default" : {
            "description" : " List of email templates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplatesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/communication/emailTemplate/{code}" : {
      "delete" : {
        "tags" : [ "EmailTemplate" ],
        "summary" : " remove an emailTemplate by code  ",
        "description" : " remove an emailTemplate by code  ",
        "operationId" : "    DELETE_EmailTemplate_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/meveoInstance" : {
      "get" : {
        "tags" : [ "MeveoInstance" ],
        "summary" : " Find a meveoInstance by code ",
        "description" : " Find a meveoInstance by code ",
        "operationId" : "    GET_MeveoInstance_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoInstanceResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "MeveoInstance" ],
        "summary" : "\t  Update a meveoInstance by dto\t  ",
        "description" : "\t  Update a meveoInstance by dto\t  ",
        "operationId" : "    PUT_MeveoInstance_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "MeveoInstance" ],
        "summary" : "\t  Create a meveoInstance by dto.\t  ",
        "description" : "\t  Create a meveoInstance by dto.\t  ",
        "operationId" : "POST_MeveoInstance_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/meveoInstance/createOrUpdate" : {
      "post" : {
        "tags" : [ "MeveoInstance" ],
        "summary" : " CreateOrUpdate a meveoInstance by dto ",
        "description" : " CreateOrUpdate a meveoInstance by dto ",
        "operationId" : "    POST_MeveoInstance_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/meveoInstance/version" : {
      "get" : {
        "tags" : [ "Application", "MeveoInstance" ],
        "summary" : "Get version of application",
        "operationId" : "index_68",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communication/meveoInstance/list" : {
      "get" : {
        "tags" : [ "MeveoInstance" ],
        "summary" : " List meveoInstances ",
        "description" : " List meveoInstances ",
        "operationId" : "    GET_MeveoInstance_list",
        "responses" : {
          "default" : {
            "description" : " List of Meveo Instances  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/communication/meveoInstance/{code}" : {
      "delete" : {
        "tags" : [ "MeveoInstance" ],
        "summary" : " Remove a meveoInstance by code ",
        "description" : " Remove a meveoInstance by code ",
        "operationId" : "    DELETE_MeveoInstance_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/attributes" : {
      "put" : {
        "tags" : [ "Attribute" ],
        "summary" : "This endpoint allows to update an existing Attribute",
        "description" : "Updating an existing Attribute",
        "operationId" : "update_11",
        "requestBody" : {
          "description" : "attribute dto for updating an existing attribute",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AttributeDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AttributeDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Attribute successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for AttributeDTO.The required params are : code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "No grouped attribute is found for the parameter GroupedAttributeCode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Attribute" ],
        "summary" : "This endpoint allows to create new attribute",
        "description" : "Creating a new attribute",
        "operationId" : "create_11",
        "requestBody" : {
          "description" : "Attribute dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AttributeDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AttributeDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the Attribute successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for AttributeDto.The required params are : code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "No grouped attribute is found for the parameter GroupedAttributeCode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/attributes/{code}" : {
      "get" : {
        "tags" : [ "Attribute" ],
        "summary" : "This endpoint allows to find an attribute by its code",
        "description" : "Finding an attribute by its code ",
        "operationId" : "findByCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "retrieving a attribute with its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attribute successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Attribute" ],
        "summary" : "This endpoint allows to  delete an existing Attribute",
        "description" : "Deleting an existing Attribute with its code",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "contain the code of Attribute te be deleted by its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attribute successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttributeDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "No Attribute found for the code parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/attributes/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_69",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/attributes/cpq/offers/{productCode}/{productVersion}" : {
      "post" : {
        "tags" : [ "Catalog browsing" ],
        "summary" : "Get attributes related to the given product that match the quote offer context",
        "description" : "Get attributes related to the given product that match the quote offer context",
        "operationId" : "listPost_5",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "description" : "product code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productVersion",
          "in" : "path",
          "description" : "product version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The Offer context",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferContextDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferContextDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "selected service does not exist"
          }
        }
      }
    },
    "/orderManagement/commercialOrders" : {
      "get" : {
        "tags" : [ "Order management" ],
        "summary" : "Get commercial orders matching the given criteria",
        "description" : "Get commercial orders matching the given criteria",
        "operationId" : "listCommercialOrder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialOrderDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialOrderDtoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "update an existing order",
        "operationId" : "update_12",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialOrderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialOrderDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The order is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "One of attached fields is unknown",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Only Active PriceList can be attached to an Order",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order management" ],
        "summary" : "Create a order",
        "operationId" : "create_12",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialOrderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialOrderDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The order is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "The order already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "One of attached fields is unknown",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Only Active PriceList can be attached to an Order",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessApiException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/orderOffers" : {
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "This endpoint allows to update an existing order offer",
        "description" : "Updating an existing order offer",
        "operationId" : "updateOrderOffer",
        "requestBody" : {
          "description" : "order offer dto for updating an existing order offer",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderOfferDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderOfferDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the order offer successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for order offer.The required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order management" ],
        "summary" : "This endpoint allows to create new order offer",
        "description" : "Creating a new order offer",
        "operationId" : "createOrderOffer",
        "parameters" : [ {
          "name" : "isQuickOrder",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "saveAsDraft",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "order offer dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderOfferDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderOfferDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the order offer successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for order offer required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{orderId}" : {
      "delete" : {
        "tags" : [ "Order management" ],
        "summary" : "delete an existing order",
        "operationId" : "delete_2",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is succeffully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "id of order is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "Order Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/orderOffers/{id}" : {
      "get" : {
        "tags" : [ "Order management" ],
        "summary" : "Get order offer matching the given order id",
        "description" : "Get order offer matching the given order id",
        "operationId" : "findOrderOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the order offer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order type is succefully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Order offer Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order management" ],
        "summary" : "This endpoint allows to  delete an existing order offer",
        "description" : "Deleting an existing order offer with its id",
        "operationId" : "deleteOrderOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of order offer te be deleted by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order offer successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderOfferDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "No order offer found for the id parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{orderId}/duplication" : {
      "post" : {
        "tags" : [ "Order management" ],
        "summary" : "duplicate an order",
        "operationId" : "duplicate",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is succeffully duplicated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "id of order is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "Order Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{orderNumber}" : {
      "get" : {
        "tags" : [ "Order management" ],
        "summary" : "Get commercial orders matching the given order number",
        "description" : "Get commercial order matching the given order number",
        "operationId" : "findByOrderNumber",
        "parameters" : [ {
          "name" : "orderNumber",
          "in" : "path",
          "description" : "The order number for an existing commercial order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is succefully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialOrderDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialOrderDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Order Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{orderId}/orderValidation" : {
      "post" : {
        "tags" : [ "Order management" ],
        "summary" : "Launch the order validation process",
        "description" : "Launch the order validation process",
        "operationId" : "orderValidationProcess",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is successfully validated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialOrderDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialOrderDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Order Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{commercialOrderId}/invoicingPlans/{invoicingPlanCode}" : {
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "update commercial order invoicing plan",
        "operationId" : "updateOrderInvoicingPlan",
        "parameters" : [ {
          "name" : "commercialOrderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoicingPlanCode",
          "in" : "path",
          "description" : "The code of the invoicing plan",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "One of attached fields is unknown",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{commercialOrderId}/orderProgress/{progressValue}" : {
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "update order progress",
        "operationId" : "updateOrderProgress",
        "parameters" : [ {
          "name" : "commercialOrderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "progressValue",
          "in" : "path",
          "description" : "The value of order to be progress",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order progress is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{orderId}/status/{statusTarget}" : {
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "update status for order",
        "operationId" : "updateStatus_1",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "statusTarget",
          "in" : "path",
          "description" : "The status to be updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order's status is succeffully updated ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "id of order is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "Order Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{commercialOrderId}/userAccounts/{userAccountCode}" : {
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "update commercial order user account",
        "operationId" : "updateUserAccount",
        "parameters" : [ {
          "name" : "commercialOrderId",
          "in" : "path",
          "description" : "The id of the commercial order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "userAccountCode",
          "in" : "path",
          "description" : "The code of the user account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "One of attached fields is unknown",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "Get commercial rules matching the given criteria",
        "description" : "Get commercial rules matching the given criteria",
        "operationId" : "list_5",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "This endpoint allows to update an existing CommercialRule",
        "description" : "Updating an existing CommercialRule",
        "operationId" : "update_13",
        "requestBody" : {
          "description" : "commercialRule dto for updating an existing commercialRule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the CommercialRule successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for CommercialRuleDTO.The required params are : code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "This endpoint allows to create new commercialRule",
        "description" : "Creating a new commercialRule",
        "operationId" : "create_13",
        "requestBody" : {
          "description" : "CommercialRule dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the CommercialRule successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for CommercialRuleDto.The required params are : code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/{code}" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "This endpoint allows to find a commercialRule by its code",
        "description" : "Finding a commercialRule by its code ",
        "operationId" : "findByCode_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "retrieving a commercialRule with its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The CommercialRule successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "This endpoint allows to  delete an existing CommercialRule",
        "description" : "Deleting an existing CommercialRule with its code",
        "operationId" : "delete_3",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "contain the code of CommercialRule te be deleted by its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The CommercialRule successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCommercialRuleDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "No CommercialRule found for the code parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/attributeRules" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "Get attribute commercial rules",
        "description" : "Get attribute commercial rules",
        "operationId" : "findAttributeRules",
        "parameters" : [ {
          "name" : "attributeCode",
          "in" : "query",
          "description" : "attribute code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productCode",
          "in" : "query",
          "description" : "product code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/groupedAttributeRules" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "Get grouped attribute commercial rules",
        "description" : "Get grouped attribute commercial rules",
        "operationId" : "findGroupedAttributeRules",
        "parameters" : [ {
          "name" : "groupedAttributeCode",
          "in" : "query",
          "description" : "grouped attribute code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productCode",
          "in" : "query",
          "description" : "product code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/offerRules/{offerCode}" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "Get offer commercial rules",
        "description" : "Get offer commercial rules",
        "operationId" : "findOfferRules",
        "parameters" : [ {
          "name" : "offerCode",
          "in" : "path",
          "description" : "offer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/productRules" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "Get product commercial rules",
        "description" : "Get product commercial rules",
        "operationId" : "findProductRules",
        "parameters" : [ {
          "name" : "offerCode",
          "in" : "query",
          "description" : "offer code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productCode",
          "in" : "query",
          "description" : "product code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productVersion",
          "in" : "query",
          "description" : "product version",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/tagRules/{tagCode}" : {
      "get" : {
        "tags" : [ "CommercialRules" ],
        "summary" : "Get tag commercial rules",
        "description" : "Get tag commercial rules",
        "operationId" : "findTagRules",
        "parameters" : [ {
          "name" : "tagCode",
          "in" : "path",
          "description" : "tag code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListCommercialRulesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/commercialRules/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_70",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to find a Contract by accountCode and contractAccountLevel parameters",
        "description" : "Find a Contract type by accountCode and contractAccountLevel parameters",
        "operationId" : "findByCode_3",
        "parameters" : [ {
          "name" : "contractAccountLevel",
          "in" : "query",
          "description" : "retrieving a Contract with its contract account level",
          "schema" : {
            "type" : "string",
            "enum" : [ "SELLER", "CUSTOMER", "CUSTOMER_ACCOUNT", "BILLING_ACCOUNT" ]
          }
        }, {
          "name" : "accountCode",
          "in" : "query",
          "description" : "retrieving a Contract with its code",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Contract successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListContractDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListContractDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "One of the parameters is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to update an existing Contract",
        "description" : "Updating an existing Contract",
        "operationId" : "updateContract",
        "requestBody" : {
          "description" : "contract dto for an updating an existing contract",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Contract successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for contractDto.The required params are : code, sellerCode, contractDate, beginDate, endDate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "date start is great than date end ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          },
          "302" : {
            "description" : "code of the contract already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "code of the seller doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to create new contract",
        "description" : "Creating a new contract",
        "operationId" : "createContract",
        "requestBody" : {
          "description" : "contract dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the contract successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "number"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "number"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for contractDto.The required params are : code, sellerCode, contractDate, beginDate, endDate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "date start is great than date end ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          },
          "302" : {
            "description" : "code of the contract already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "code of the seller doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/contractLines" : {
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to create new contract Line",
        "description" : "Creating a new contract Line",
        "operationId" : "updateContractLine",
        "requestBody" : {
          "description" : "contract Line dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractItemDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the contract Line successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "number"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "number"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for contractDto.The required params are : contractCode, code, serviceTemplateCode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these parameters contractCode, serviceTemplateCode doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to create new contract Line",
        "description" : "Creating a new contract Line",
        "operationId" : "createContractLine",
        "requestBody" : {
          "description" : "contract Line dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractItemDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the contract Line successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "number"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "number"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for contractDto.The required params are : contractCode, code, serviceTemplateCode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "code of the contract line already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "one of these parameters contractCode, serviceTemplateCode doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/contractLines/tradingContractItem" : {
      "post" : {
        "summary" : " Create a new trading contract item. ",
        "description" : "Create a new trading contract item. ",
        "operationId" : "POST_TradingContractItem_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingContractItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingContractItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/{contractCode}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to find a Contract by ContractCode parameter",
        "description" : "Find a Contract type by contractCode parameter",
        "operationId" : "findByCode_2",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "description" : "retrieving a Contract with its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Contract successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetContractDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetContractDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "The parameter contractCode is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to  delete an existing Contract",
        "description" : "Deleting an existing Contract with its code",
        "operationId" : "deleteContract",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "description" : "contain the code of contract te be deleted by its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Contract successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
                }
              }
            }
          },
          "404" : {
            "description" : "No Contract found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Status of the contract is Active",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/contractLines/{contractCode}" : {
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to  delete an existing Contract item",
        "description" : "Deleting an existing Contract with its code",
        "operationId" : "deleteContractLine",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "description" : "contract item code to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Contract item successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
                }
              }
            }
          },
          "404" : {
            "description" : "No Contract item found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Status of the contract is Active",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/contractLines/tradingContractItem/{id}" : {
      "put" : {
        "summary" : "Update an existing trading contract item. ",
        "description" : "Update an existing new trading contract item. ",
        "operationId" : "PUT_TradingContractItem_update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of trading contract item to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingContractItemDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TradingContractItemDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete an existing trading contract item. ",
        "description" : "Delete an existing trading contract item. ",
        "operationId" : "DELETE_TradingContractItem_delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of trading contract item to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/{contractCode}/duplicate" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Duplicate a Contract by contracCode parameter",
        "description" : "Duplicate a Contract by contracCode parameter",
        "operationId" : "duplicateContract",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "description" : "Contract Code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The contract has been successfully duplicated"
          },
          "404" : {
            "description" : "Contract with code=contractcode does not exists ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/contractLines/{contractItemCode}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows to find a Contract item by contractItemCode parameters",
        "description" : "Find a Contract item type by contractItemCode parameters",
        "operationId" : "getContractLine",
        "parameters" : [ {
          "name" : "contractItemCode",
          "in" : "path",
          "description" : "contract item code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Contract item successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListContractDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListContractDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "contractItemCode is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_71",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/contracts/{contractCode}/status/{status}" : {
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "This endpoint allows update the contract status",
        "description" : "update contract status",
        "operationId" : "updateStatus_2",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "description" : "contract code to update status",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "target contract status",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Contract successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "One of the parameters is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get a list of quotes optionally filtered by some criteria",
        "operationId" : "findQuotes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "quotes are successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpqQuotesListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpqQuotesListResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "Modify a quote",
        "operationId" : "updateQuote",
        "requestBody" : {
          "description" : "Product quote information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The quote is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Applicant account code is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Create a quote",
        "operationId" : "createQuote",
        "requestBody" : {
          "description" : "Product quote information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The quote is successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "the parameter quote.applicantAccountCode is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "The quote already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "Applicant account is unknown",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteItems" : {
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "Modify a quote item",
        "operationId" : "updateQuoteItem",
        "requestBody" : {
          "description" : "Product quote information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteOfferDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteOfferDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The quote item is successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteOfferDtoResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Create a quote item",
        "operationId" : "createQuoteItem",
        "requestBody" : {
          "description" : "Product quote item information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteOfferDTO"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteOfferDTO"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "quote item is successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteOfferDtoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Create a quote version",
        "operationId" : "createQuoteVersion",
        "requestBody" : {
          "description" : "Product quote version information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "New quote version is successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "the quote version with code or short description  is missing"
          }
        }
      }
    },
    "/cpq/quotes/{quoteCode}" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get a quote by its code",
        "operationId" : "getQuote",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The quote is successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The quote is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Quote management" ],
        "summary" : "Delete a quote.",
        "operationId" : "deleteQuote",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The quote is successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Quote code doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteItems/{quoteItemId}" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get f quote offer by quote id",
        "operationId" : "findQuoteItem",
        "parameters" : [ {
          "name" : "quoteItemId",
          "in" : "path",
          "description" : "quote offer id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The quote is succeffully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteOfferDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteOfferDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The quote offer doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Quote management" ],
        "summary" : "Delete a quote item",
        "operationId" : "deleteQuoteItem",
        "parameters" : [ {
          "name" : "quoteItemId",
          "in" : "path",
          "description" : "Product quote item code",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote item is successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}" : {
      "delete" : {
        "tags" : [ "Quote management" ],
        "summary" : "Delete a quote version",
        "operationId" : "deleteQuoteVersion",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "quote code attached to quote version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "quote version number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing quote version is successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "No quote version was found with quoteCode and quoteVersion in parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/{quoteCode}/{quoteVersion}/duplication" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "this endpoint allow you to duplicate a quote and it quote version",
        "description" : "duplicate quote and their related entities",
        "operationId" : "duplicateQuote",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote is successfully duplicated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Quote doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}/duplication" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "this endpoint allow you to duplicate a quote version",
        "description" : "duplicate quote version and their related entities",
        "operationId" : "duplicateQuoteVersion",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote version  is successfully duplicated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Quote version doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteItems/{quoteCode}/quoteVersions/{quoteVersion}" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get List of quote offer by quote code and quote version number",
        "operationId" : "findQuoteItems",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The quote is successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The quote offer doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{currentVersion}/xmlGeneration" : {
      "post" : {
        "tags" : [ "Quotation" ],
        "summary" : "Generate the quote XML and optionnaly quote PDF if generatePdf is True ",
        "operationId" : "generateQuoteXml",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "The code of the quote",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currentVersion",
          "in" : "path",
          "description" : "The version of the quote",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "generatePdf",
          "in" : "query",
          "description" : "Indicate if the quote will generate a new xml",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote XML is successfully generated!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfQuoteResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfQuoteResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{currentVersion}/pdfGeneration" : {
      "post" : {
        "tags" : [ "Quotation" ],
        "summary" : "Get the quote PDF. if generatePdf is true, the PDF is generated and override existing one if already exists",
        "operationId" : "getQuotePDF",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "The code of the quote",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currentVersion",
          "in" : "path",
          "description" : "The version of the quote",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "generatePdf",
          "in" : "query",
          "description" : "Indicate if the quote will generate a new pdf",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote PDF is successfully returned!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfQuoteResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfQuoteResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quotePrices/override" : {
      "put" : {
        "operationId" : "overridePrices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OverrideChargedPricesDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OverrideChargedPricesDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/cpq/quotes/{quoteCode}/quoteVersions/{quoteVersion}/orderPlacement" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Place an order based on a quote",
        "operationId" : "placeOrder",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "quote code attached to quote version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "quote version number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "order successfully created from current quote",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}/quotation" : {
      "post" : {
        "tags" : [ "Quotation" ],
        "summary" : "Get quote quotation",
        "operationId" : "quoteQuotation",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "quote version number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quotation is successfully done!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/{quoteCode}/status/{status}" : {
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "this endpoint allow you to update a quote of status",
        "description" : "status can not be modified if is already Cancelled or rejected",
        "operationId" : "updateQuoteStatus",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote status is successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Quote  doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "the status can not be update, because of its current status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{currentVersion}/status/{status}" : {
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "this endpoint allow you to update a quote version of status",
        "description" : "status can not be modified if is already Closed or Published",
        "operationId" : "updateQuoteVersionStatus",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currentVersion",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote version status is successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Quote version doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "the status can not be update, because of its current status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/groupedAttributes" : {
      "get" : {
        "tags" : [ "GroupedAttribute" ],
        "summary" : "This endpoint allows to retrieve a Grouped attribute information by its code",
        "description" : "retrieve and return an existing grouped attribute",
        "operationId" : "find_8",
        "parameters" : [ {
          "name" : "groupedAttributeCode",
          "in" : "query",
          "description" : "The code of the grouped attribute",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the grouped attribute successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetGroupedAttributesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetGroupedAttributesResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "the grouped attribute with groupedAttributeCode in param does not exist"
          },
          "500" : {
            "description" : "No grouped attribute is found for the groupedAttributeCode param",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "GroupedAttribute" ],
        "summary" : "updating a existing grouped attribute by its code",
        "description" : "check if the code is not null for updating a existing grouped attribute",
        "operationId" : "update_14",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupedAttributeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupedAttributeDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the grouped attribute successfully updated"
          },
          "404" : {
            "description" : "the grouped attribute with groupedAttributeDto in param does not exist or null"
          },
          "500" : {
            "description" : "No grouped attribute is found for the groupedAttributeCode param",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "GroupedAttribute" ],
        "summary" : "This endpoint allows to create new groupedAttribute",
        "description" : "Creating a new groupedAttribute",
        "operationId" : "create_14",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupedAttributeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupedAttributeDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the GroupedAttribute successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetGroupedAttributesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetGroupedAttributesResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for GroupedAttributeDto required params are : code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "No GroupedAttribute is found for the parameter code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/groupedAttributes/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_72",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/groupedAttributes/{groupedAttributeCode}" : {
      "delete" : {
        "tags" : [ "GroupedAttribute" ],
        "summary" : "remove a grouped attribute",
        "description" : "Remove an Grouped Attribute with a given grouped attribute code",
        "operationId" : "remove_7",
        "parameters" : [ {
          "name" : "groupedAttributeCode",
          "in" : "path",
          "description" : "The code of the grouped attribute",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the grouped attribute successfully removed"
          },
          "404" : {
            "description" : "the grouped attribute with groupedAttributeCode in param does not exist"
          },
          "500" : {
            "description" : "No grouped attribute is found for the groupedAttributeCode param",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/media" : {
      "put" : {
        "tags" : [ "Media management" ],
        "summary" : "update an existing Media",
        "description" : "update an exsiting  Media",
        "operationId" : "update_15",
        "requestBody" : {
          "description" : "updading for a new media",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediaDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediaDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The media is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMediaDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMediaDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "One of the requied parameters is missing ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "composed id of media does not exist or ServiceTemplate doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Media management" ],
        "summary" : "Create a new Media",
        "description" : "creation of a new Media",
        "operationId" : "createMedia",
        "requestBody" : {
          "description" : "information for a new media",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediaDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediaDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The media is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMediaDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMediaDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "One of the requied parameters is missing ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "The media already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          },
          "404" : {
            "description" : "composed id of media does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/media/{code}" : {
      "get" : {
        "tags" : [ "Media management" ],
        "summary" : "get an existing Media",
        "description" : "get an exsiting  Media",
        "operationId" : "findByCode_4",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "media code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The media is succeffully fetched",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMediaDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMediaDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "One of the requied parameters is missing ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "composed id of media does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Media management" ],
        "summary" : "delete an existing Media",
        "description" : "delete an exsiting  Media",
        "operationId" : "deleteMedia",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "media code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The media is succeffully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "412" : {
            "description" : "One of the requied parameters is missing ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "composed id of media does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/orderTypes" : {
      "put" : {
        "tags" : [ "Order management" ],
        "summary" : "update an existing order type",
        "operationId" : "update_16",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderTypeDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The order is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "current code of order type doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order management" ],
        "summary" : "Create a order type",
        "operationId" : "create_15",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderTypeDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The order type is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "Missing required parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "302" : {
            "description" : "The order type already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityAlreadyExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/orderTypes/{orderTypeCode}" : {
      "get" : {
        "tags" : [ "Order type" ],
        "summary" : "Get order type matching the given order number",
        "description" : "Get order type matching the given order number",
        "operationId" : "find_9",
        "parameters" : [ {
          "name" : "orderTypeCode",
          "in" : "path",
          "description" : "The code of the order type",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order type is succefully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Order type Does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order management" ],
        "summary" : "delete an existing order",
        "operationId" : "delete_4",
        "parameters" : [ {
          "name" : "orderTypeCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order is succeffully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrderTypeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "code of order type is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "404" : {
            "description" : "current code of order type doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/orderTypes/list" : {
      "post" : {
        "tags" : [ "Order type" ],
        "summary" : "Get order type matching the given criteria",
        "description" : "Get order type matching the given criteria",
        "operationId" : "list_6",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The search operation is succefully executed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOrderTypeResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListOrderTypeResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/tags" : {
      "get" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to find a tag by codeTag parameter",
        "description" : "Find a tag type by codeTag parameter",
        "operationId" : "findByCode_5",
        "parameters" : [ {
          "name" : "codeTag",
          "in" : "query",
          "description" : "retrieving a tag with its code",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Tag successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to update an existing Tag",
        "description" : "Updating an existing Tag",
        "operationId" : "updateTag",
        "requestBody" : {
          "description" : "tag dto for updating an existing tag",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Tag successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Tag code : ${parentTag.code} already has a tag parent with code : ${tagDto.code}"
          },
          "404" : {
            "description" : "Seller with code=${tagDto.sellerCode} does not exists."
          },
          "412" : {
            "description" : "The following parameters are required or contain invalid values: code, name, TagTypeCode."
          }
        }
      },
      "post" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to create new tag",
        "description" : "Creating a new tag",
        "operationId" : "createTag",
        "requestBody" : {
          "description" : "tag dto for a new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the Tag successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              }
            }
          },
          "302" : {
            "description" : "Tag with code=${tagDto.code} already exists."
          },
          "400" : {
            "description" : "Parent and child has the same code !!"
          },
          "404" : {
            "description" : "Seller with code=${tagDto.sellerCode} does not exists."
          },
          "412" : {
            "description" : "The following parameters are required or contain invalid values: code, name, TagTypeCode."
          }
        }
      }
    },
    "/cpq/tags/tagTypes" : {
      "put" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to update new tag type",
        "description" : "updating a new tag type",
        "operationId" : "updateTagType",
        "requestBody" : {
          "description" : "tag type dto for updating an existing tag type",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagTypeDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Tag type successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "missing required paramter for TagDto.The required parameter is  code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          },
          "400" : {
            "description" : "No tag type was found with the code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to create new tag type",
        "description" : "Creating a new tag type",
        "operationId" : "createTagType",
        "requestBody" : {
          "description" : "tag type dto for new insertion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagTypeDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagTypeDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Tag type successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "The following parameters are required or contain invalid values: code."
          },
          "302" : {
            "description" : "TagType with code=${code} already exists."
          }
        }
      }
    },
    "/cpq/tags/{codeTag}" : {
      "delete" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to  delete an existing Tag",
        "description" : "Deleting an existing Tag with its code",
        "operationId" : "deleteTag",
        "parameters" : [ {
          "name" : "codeTag",
          "in" : "path",
          "description" : "contain the code of tag te be deleted by its code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Tag successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Impossible to delete a Tag, because it contains product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/tags/tagTypes/{codeTagType}" : {
      "get" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to retrieve a tag type",
        "description" : "Retrieving a tag type with code tag type parameter",
        "operationId" : "findTagTypeBycode",
        "parameters" : [ {
          "name" : "codeTagType",
          "in" : "path",
          "description" : "code tag type for retrieving an existing one",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Tag type successfully found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "No tag type was found with the code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tag" ],
        "summary" : "This endpoint allows to  delete an existing Tag type",
        "description" : "Deleting an existing Tag type",
        "operationId" : "deleteTagType",
        "parameters" : [ {
          "name" : "codeTagType",
          "in" : "path",
          "description" : "tagCode",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Tag type successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTagTypeDtoResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No Tag type found for the tagCode parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          },
          "400" : {
            "description" : "Impossible to delete a Tag type,it is attached to a Tag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          }
        }
      }
    },
    "/cpq/tags/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_73",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/addressbook/addContact" : {
      "get" : {
        "tags" : [ "AddressBook" ],
        "summary" : " Create a new contact address for a contact code ",
        "description" : " Create a new contact address for a contact code ",
        "operationId" : "    GET_AddressBook_addContact",
        "parameters" : [ {
          "name" : "addressbookCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contactCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/addressbook/createAll" : {
      "get" : {
        "tags" : [ "AddressBook" ],
        "summary" : " Create All addressbook ",
        "description" : " Create All addressbook ",
        "operationId" : "GET_AddressBook_createAll",
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/addressbook" : {
      "get" : {
        "tags" : [ "AddressBook" ],
        "summary" : " Find a AddressBook with a given code and from ",
        "description" : " Find a AddressBook with a given code and from ",
        "operationId" : "    GET_AddressBook_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " GetAddressBookResponse data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAddressBookResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAddressBookResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/addressbook/version" : {
      "get" : {
        "tags" : [ "Application", "AddressBook" ],
        "summary" : "Get version of application",
        "operationId" : "index_74",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/addressbook/list" : {
      "get" : {
        "tags" : [ "AddressBook" ],
        "summary" : " List of address ",
        "description" : " List of address ",
        "operationId" : "    GET_AddressBook_list",
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/contact/{code}/{tag}" : {
      "put" : {
        "tags" : [ "Contact" ],
        "summary" : " Add a tag to a contact with his code ",
        "description" : " Add a tag to a contact with his code ",
        "operationId" : "    PUT_Contact_{code}_{tag}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contact" ],
        "summary" : " Delete a tag to a contact with his code ",
        "description" : " Delete a tag to a contact with his code ",
        "operationId" : "    DELETE_Contact_{code}_{tag}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/contact" : {
      "get" : {
        "tags" : [ "Contact" ],
        "summary" : " Find a contact with a given code ",
        "description" : " Find a contact with a given code ",
        "operationId" : "    GET_Contact_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetContactResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetContactResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contact" ],
        "summary" : " Update a contact CRM informatopn ",
        "description" : " Update a contact CRM informatopn ",
        "operationId" : "    PUT_Contact_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : " Create a new CRM Contact  ",
        "description" : " Create a new CRM Contact  ",
        "operationId" : "POST_Contact_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/contact/createOrUpdate" : {
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : " Create or update a CRM contact  ",
        "description" : " Create or update a CRM contact  ",
        "operationId" : "    POST_Contact_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/contact/importCSVFile" : {
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : " Import the contact list from a file ",
        "description" : " Import the contact list from a file ",
        "operationId" : "    POST_Contact_importCSVFile",
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/contact/importCSVText" : {
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : " Import the contact list to a CSV file text ",
        "description" : " Import the contact list to a CSV file text ",
        "operationId" : "    POST_Contact_importCSVText",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/contact/version" : {
      "get" : {
        "tags" : [ "Application", "Contact" ],
        "summary" : "Get version of application",
        "operationId" : "index_75",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/contact/list" : {
      "get" : {
        "tags" : [ "Contact" ],
        "summary" : " List contacts matching a given criteria ",
        "description" : " List contacts matching a given criteria ",
        "operationId" : "    GET_Contact_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        }, {
          "name" : "inheritCF",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INHERIT_NO_MERGE",
            "enum" : [ "INHERIT_NONE", "INHERIT_NO_MERGE", "INHERIT_MERGED", "ACCUMULATED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of contacts ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : " Retrieve a list by using paging and filter option ",
        "description" : " Retrieve a list by using paging and filter option ",
        "operationId" : "    POST_Contact_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/contact/listGetAll" : {
      "get" : {
        "tags" : [ "Contact" ],
        "summary" : " List Contacts matching a given criteria ",
        "description" : " List Contacts matching a given criteria ",
        "operationId" : "    GET_Contact_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of Contacts ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{code}" : {
      "delete" : {
        "tags" : [ "Contact" ],
        "summary" : " Delete a contact with a given code ",
        "description" : " Delete a contact with a given code ",
        "operationId" : "    DELETE_Contact_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/{customEntityTemplateCode}" : {
      "put" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Update an existing custom entity instance using a custom entity template  ",
        "description" : " Update an existing custom entity instance using a custom entity template  ",
        "operationId" : "    PUT_CustomEntityInstance_{customEntityTemplateCode}",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Create a new custom entity instance using a custom entity template. ",
        "description" : " Create a new custom entity instance using a custom entity template. ",
        "operationId" : "    POST_CustomEntityInstance_{customEntityTemplateCode}",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/{customEntityTemplateCode}/createOrUpdate" : {
      "post" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Create new or update an existing custom entity instance with a given code.  ",
        "description" : " Create new or update an existing custom entity instance with a given code.  ",
        "operationId" : "    POST_CustomEntityInstance_{customEntityTemplateCode}_createOrUpdate",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/{customEntityTemplateCode}/{code}/disable" : {
      "post" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Disable a Custom entity instance with a given code  ",
        "description" : " Disable a Custom entity instance with a given code  ",
        "operationId" : "    POST_CustomEntityInstance_{customEntityTemplateCode}_{code}_disable",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/{customEntityTemplateCode}/{code}/enable" : {
      "post" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Enable a Custom entity instance with a given code  ",
        "description" : " Enable a Custom entity instance with a given code  ",
        "operationId" : "    POST_CustomEntityInstance_{customEntityTemplateCode}_{code}_enable",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/{customEntityTemplateCode}/{code}" : {
      "get" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Find a #### with a given (exemple) code .  ",
        "description" : " Find a #### with a given (exemple) code .  ",
        "operationId" : "    GET_CustomEntityInstance_{customEntityTemplateCode}_{code}",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return a customEntityInstance ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityInstanceResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Remove an existing custom entity instance with a given code from a custom entity template given by code  ",
        "description" : " Remove an existing custom entity instance with a given code from a custom entity template given by code  ",
        "operationId" : "    DELETE_CustomEntityInstance_{customEntityTemplateCode}_{code}",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/version" : {
      "get" : {
        "tags" : [ "Application", "CustomEntityInstance" ],
        "summary" : "Get version of application",
        "operationId" : "index_76",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customEntityInstance/list/{customEntityTemplateCode}" : {
      "get" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " List custom entity instances.  ",
        "description" : " List custom entity instances.  ",
        "operationId" : "    GET_CustomEntityInstance_list_{customEntityTemplateCode}",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of custom entity instances ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityInstancesResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CustomEntityInstance" ],
        "summary" : " Search in custom entity instances.  ",
        "description" : " Search in custom entity instances.  ",
        "operationId" : "    POST_CustomEntityInstance_list_{customEntityTemplateCode}",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Custom table data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityInstancesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityInstancesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/customFieldTemplate" : {
      "get" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Get custom field definition  ",
        "description" : " Get custom field definition  ",
        "operationId" : "    GET_CustomFieldTemplate_search",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " instance of GetCustomFieldTemplateReponseDto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomFieldTemplateReponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomFieldTemplateReponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Update existing custom field definition  ",
        "description" : " Update existing custom field definition  ",
        "operationId" : "    PUT_CustomFieldTemplate_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Define a new custom field  ",
        "description" : " Define a new custom field  ",
        "operationId" : "    POST_CustomFieldTemplate_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customFieldTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Define new or update existing custom field definition  ",
        "description" : " Define new or update existing custom field definition  ",
        "operationId" : "    POST_CustomFieldTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customFieldTemplate/{customFieldTemplateCode}/{appliesTo}/disable" : {
      "post" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Disable a Custom field template with a given code  ",
        "description" : " Disable a Custom field template with a given code  ",
        "operationId" : "    POST_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}_disable",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customFieldTemplate/{customFieldTemplateCode}/{appliesTo}/enable" : {
      "post" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Enable a Custom field template with a given code  ",
        "description" : " Enable a Custom field template with a given code  ",
        "operationId" : "    POST_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}_enable",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customFieldTemplate/version" : {
      "get" : {
        "tags" : [ "Application", "CustomFieldTemplate" ],
        "summary" : "Get version of application",
        "operationId" : "index_77",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customFieldTemplate/{customFieldTemplateCode}/{appliesTo}" : {
      "delete" : {
        "tags" : [ "CustomFieldTemplate" ],
        "summary" : " Remove custom field definition given its code and entity it applies to  ",
        "description" : " Remove custom field definition given its code and entity it applies to  ",
        "operationId" : "    DELETE_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customTable" : {
      "put" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Update existing data in a custom table  ",
        "description" : " Update existing data in a custom table  ",
        "operationId" : "    PUT_CustomTable_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Append data to a custom table ",
        "description" : " Append data to a custom table ",
        "operationId" : "    POST_CustomTable_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Remove an existing data from a custom table.  ",
        "description" : " Remove an existing data from a custom table.  ",
        "operationId" : "    DELETE_CustomTable_delete",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/createOrUpdate" : {
      "post" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Append or update data in a custom table  ",
        "description" : " Append or update data in a custom table  ",
        "operationId" : "    POST_CustomTable_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/disable" : {
      "post" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Mark records as disabled in a custom table. Applies only to those custom tables that contain a field 'disabled' ",
        "description" : " Mark records as disabled in a custom table. Applies only to those custom tables that contain a field 'disabled' ",
        "operationId" : "    POST_CustomTable_disable",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/enable" : {
      "post" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Mark records as enabled in a custom table. Applies only to those custom tables that contain a field 'disabled'  ",
        "description" : " Mark records as enabled in a custom table. Applies only to those custom tables that contain a field 'disabled'  ",
        "operationId" : "    POST_CustomTable_enable",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/version" : {
      "get" : {
        "tags" : [ "Application", "CustomTable" ],
        "summary" : "Get version of application",
        "operationId" : "index_78",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/list/{customTableCode}" : {
      "post" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Search in custom tables  ",
        "description" : " Search in custom tables  ",
        "operationId" : "    POST_CustomTable_list_{customTableCode}",
        "parameters" : [ {
          "name" : "customTableCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Custom table data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomTableDataResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomTableDataResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/listFromWrapper" : {
      "post" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Search in custom tables using CustomTableWrapper ",
        "description" : " Search in custom tables using CustomTableWrapper ",
        "operationId" : "    POST_CustomTable_listFromWrapper",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableWrapperDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomTableWrapperDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Custom table data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomTableDataResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomTableDataResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/customTable/{customTableCode}" : {
      "delete" : {
        "tags" : [ "CustomTable" ],
        "summary" : " Remove existing data from a custom table given search parameters  ",
        "description" : " Remove existing data from a custom table given search parameters  ",
        "operationId" : "    DELETE_CustomTable_{customTableCode}",
        "parameters" : [ {
          "name" : "customTableCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Custom table data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/action" : {
      "get" : {
        "tags" : [ "customize entity" ],
        "summary" : "Get entity action definition",
        "operationId" : "findAction",
        "parameters" : [ {
          "name" : "actionCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomActionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomActionResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "customize entity" ],
        "summary" : "Update existing entity action definition",
        "operationId" : "updateAction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomActionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomActionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "Define a new entity action",
        "operationId" : "createAction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomActionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomActionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entity" : {
      "put" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "update entity template",
        "operationId" : "updateEntityTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "create entity template",
        "operationId" : "createEntityTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/field" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Get custom field definition",
        "operationId" : "findField",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomFieldTemplateReponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomFieldTemplateReponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "customize entity" ],
        "summary" : "Update existing custom field definition",
        "operationId" : "updateField",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "Define a new custom field",
        "operationId" : "createField",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/action/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Define new or update existing entity action definition",
        "operationId" : "createOrUpdateAction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomActionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomActionDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/entityCustomization/cet/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "create or update customized entity template",
        "operationId" : "createOrUpdateCustumizedEntityTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/entityCustomization/entity/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "create or update entity template",
        "operationId" : "createOrUpdateEntityTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomEntityTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/entityCustomization/field/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Define new or update existing custom field definition",
        "operationId" : "createOrUpdateField",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomFieldTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/entityCustomization/customize" : {
      "put" : {
        "tags" : [ "customize entity" ],
        "summary" : "Customize a standard Meveo entity definition by adding fields and/or custom actions",
        "operationId" : "customizeEntity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomizationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityCustomizationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/field/{actionCode}/{appliesTo}/disable" : {
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "Disable a Entity action with a given code",
        "operationId" : "disableAction",
        "parameters" : [ {
          "name" : "actionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entity/{code}/disable" : {
      "post" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "disable entity template",
        "operationId" : "disableEntityTemplate",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/field/{customFieldTemplateCode}/{appliesTo}/disable" : {
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "disable a Custom field template with a given code",
        "operationId" : "disableField",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/field/{actionCode}/{appliesTo}/enable" : {
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "Enable a Entity action with a given code",
        "operationId" : "enableAction",
        "parameters" : [ {
          "name" : "actionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entity/{code}/enable" : {
      "post" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "enable entity template",
        "operationId" : "enableEntityTemplate",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/field/{customFieldTemplateCode}/{appliesTo}/enable" : {
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "Enable a Custom field template with a given code",
        "operationId" : "enableField",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/entityCustomization/entity/action/execute/{actionCode}/{appliesTo}/{entityCode}" : {
      "post" : {
        "tags" : [ "customize entity" ],
        "summary" : "Execute and action of a given entity",
        "operationId" : "execute",
        "parameters" : [ {
          "name" : "actionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/action/{actionCode}/{appliesTo}" : {
      "get" : {
        "tags" : [ "customize entity" ],
        "summary" : "Get entity action definition",
        "operationId" : "findActionV2",
        "parameters" : [ {
          "name" : "actionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomActionResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomActionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "customize entity" ],
        "summary" : "Remove entity action definition given its code and entity it applies to",
        "operationId" : "removeAction",
        "parameters" : [ {
          "name" : "actionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/customize/{customizedEntityClass}" : {
      "get" : {
        "tags" : [ "customize entity" ],
        "summary" : "Get customizations made on a standard Meveo entity given its class",
        "operationId" : "findEntityCustomizations",
        "parameters" : [ {
          "name" : "customizedEntityClass",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomizationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomizationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entity/{customEntityTemplateCode}" : {
      "get" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "get entity template",
        "operationId" : "findEntityTemplate",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "delete entity template",
        "operationId" : "removeEntityTemplate",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/field/{customFieldTemplateCode}/{appliesTo}" : {
      "get" : {
        "tags" : [ "customize entity" ],
        "summary" : "Get custom field definition",
        "operationId" : "findFieldV2",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomFieldTemplateReponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomFieldTemplateReponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "customize entity" ],
        "summary" : "Remove custom field definition given its code and entity it applies to",
        "operationId" : "removeField",
        "parameters" : [ {
          "name" : "customFieldTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appliesTo",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_79",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/listBusinessEntityForCFVByCode" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Returns a List of BusinessEntities given a CustomFieldTemplate code. The CustomFieldTemplate is pulled from the database and entityClass is use in query. For example entity class is of type OfferTemplate, then it will return a list of OfferTemplates.",
        "operationId" : "listBusinessEntityForCFVByCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "wildcode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessEntityResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessEntityResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/entityCustomization/listBusinessEntityForCFVByCode/{code}/{wildcode}" : {
      "get" : {
        "tags" : [ "customize entity" ],
        "summary" : "Returns a List of BusinessEntities given a CustomFieldTemplate code. The CustomFieldTemplate is pulled from the database and entityClass is use in query. For example entity class is of type OfferTemplate, then it will return a list of OfferTemplates.",
        "operationId" : "listBusinessEntityForCFVByCodeV2",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "wildcode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessEntityResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessEntityResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entity/listELFiltered" : {
      "get" : {
        "tags" : [ "customize entity" ],
        "summary" : "Returns a list of filtered CustomFieldTemplate of an entity. The list of entity is evaluted againsts the entity with the given code.",
        "operationId" : "listELFiltered",
        "parameters" : [ {
          "name" : "appliesTo",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomizationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityCustomizationResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entities" : {
      "get" : {
        "tags" : [ "Entity Customization" ],
        "summary" : "list entity template",
        "operationId" : "listEntityTemplates",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityTemplatesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/entityCustomization/entity/list" : {
      "get" : {
        "tags" : [ "Deprecated" ],
        "summary" : "list entity template",
        "operationId" : "listEntityTemplates_1",
        "parameters" : [ {
          "name" : "customEntityTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomEntityTemplatesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/unitaryCustomTable" : {
      "put" : {
        "tags" : [ "unitary-custom-table-data-dto" ],
        "summary" : "update a single customTable row",
        "description" : "update custom table data row",
        "operationId" : "update_17",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "row updated succefully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "unitary-custom-table-data-dto" ],
        "summary" : "Create a single customTable row",
        "description" : "Returns the id of the created table row",
        "operationId" : "create_16",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "the created custom table row",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/unitaryCustomTable/{tableName}/{id}/disable" : {
      "post" : {
        "tags" : [ "unitary-custom-table-data-dto" ],
        "summary" : "enable a single customTable row",
        "description" : "update custom table data row",
        "operationId" : "disable_1",
        "parameters" : [ {
          "name" : "tableName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "row updated succefully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/unitaryCustomTable/{tableName}/{id}/enable" : {
      "post" : {
        "tags" : [ "unitary-custom-table-data-dto" ],
        "summary" : "enable a single customTable row",
        "description" : "update custom table data row",
        "operationId" : "enable_1",
        "parameters" : [ {
          "name" : "tableName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "row updated succefully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/unitaryCustomTable/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_80",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/unitaryCustomTable/{tableName}/{id}" : {
      "delete" : {
        "tags" : [ "unitary-custom-table-data-dto" ],
        "summary" : "delete a single customTable row",
        "description" : "delete custom table data row",
        "operationId" : "remove_8",
        "parameters" : [ {
          "name" : "tableName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "row deleted succefully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnitaryCustomTableDataDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/dataCollector" : {
      "get" : {
        "tags" : [ "DataCollector" ],
        "summary" : " Find a data collector with a given code. ",
        "description" : " Find a data collector with a given code. ",
        "operationId" : "    GET_DataCollector_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Data collector information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataCollectorResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataCollectorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DataCollector" ],
        "summary" : " Create a new data collector using a DataCollectorDto. ",
        "description" : " Create a new data collector using a DataCollectorDto. ",
        "operationId" : "    POST_DataCollector_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataCollectorDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataCollectorDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/dataCollector/executeQuery" : {
      "get" : {
        "tags" : [ "DataCollector" ],
        "summary" : " Execute data collector SQL query ",
        "description" : " Execute data collector SQL query ",
        "operationId" : "    GET_DataCollector_executeQuery",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/dataCollector/version" : {
      "get" : {
        "tags" : [ "Application", "DataCollector" ],
        "summary" : "Get version of application",
        "operationId" : "index_81",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/document/sign/procedures" : {
      "post" : {
        "tags" : [ "DocumentSign" ],
        "summary" : " Creates the procedure. ",
        "description" : " Creates the procedure. ",
        "operationId" : "    POST _DocumentSign_procedures ",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateProcedureRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateProcedureRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the sign procedure response dto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignProcedureResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignProcedureResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/document/sign/files/{id}/download" : {
      "get" : {
        "tags" : [ "DocumentSign" ],
        "summary" : " Download the files with the given id ",
        "description" : " Download the files with the given id ",
        "operationId" : "    GET _DocumentSign_files_{id}_download ",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the file by id ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignFileResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignFileResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/document/sign/procedures/{id}" : {
      "get" : {
        "tags" : [ "DocumentSign" ],
        "summary" : " Gets the procedure by id. ",
        "description" : " Gets the procedure by id. ",
        "operationId" : "    GET _DocumentSign_procedures_{id} ",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the procedure by id ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignProcedureResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignProcedureResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/document/sign/procedures/{id}/status" : {
      "get" : {
        "tags" : [ "DocumentSign" ],
        "summary" : " Gets the procedure status by id. ",
        "description" : " Gets the procedure status by id. ",
        "operationId" : "    GET _DocumentSign_procedures_{id}_status ",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the procedure status by id ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RawResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RawResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/document/sign/version" : {
      "get" : {
        "tags" : [ "Application", "DocumentSign" ],
        "summary" : "Get version of application",
        "operationId" : "index_82",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/document/pdf" : {
      "post" : {
        "tags" : [ "PDFDocument" ],
        "summary" : " Generate PDF document. ",
        "description" : " Generate PDF document. ",
        "operationId" : "    POST_PDFDocument_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PDFDocumentRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PDFDocumentRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the PDF contarct response dto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PDFDocumentResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PDFDocumentResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/document/pdf/version" : {
      "get" : {
        "tags" : [ "Application", "PDFDocument" ],
        "summary" : "Get version of application",
        "operationId" : "index_83",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/dunning/dunningDocument/addPayments" : {
      "put" : {
        "tags" : [ "DunningDocument" ],
        "summary" : " Add Payments to dunningDocument.  ",
        "description" : " Add Payments to dunningDocument.  ",
        "operationId" : "    PUT_DunningDocument_addPayments",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningDocumentDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningDocumentDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/dunning/dunningDocument" : {
      "get" : {
        "tags" : [ "DunningDocument" ],
        "summary" : " Search for a dunningDocument with a given code.  ",
        "description" : " Search for a dunningDocument with a given code.  ",
        "operationId" : "    GET_DunningDocument_search",
        "parameters" : [ {
          "name" : "dunningDocumentCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " customer account ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DunningDocumentResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DunningDocumentResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DunningDocument" ],
        "summary" : " Create a dunningDocument.  ",
        "description" : " Create a dunningDocument.  ",
        "operationId" : "    POST_DunningDocument_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningDocumentDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningDocumentDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/dunning/dunningDocument/version" : {
      "get" : {
        "tags" : [ "Application", "DunningDocument" ],
        "summary" : "Get version of application",
        "operationId" : "index_84",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/dunning/dunningDocument/list" : {
      "post" : {
        "tags" : [ "DunningDocument" ],
        "summary" : " List dunningDocuments matching a given criteria  ",
        "description" : " List dunningDocuments matching a given criteria  ",
        "operationId" : "    POST_DunningDocument_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of dunningDocuments ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DunningDocumentsListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DunningDocumentsListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/chart" : {
      "get" : {
        "tags" : [ "Chart" ],
        "summary" : " Find a chart with a given code  ",
        "description" : " Find a chart with a given code  ",
        "operationId" : "    GET_Chart_search",
        "parameters" : [ {
          "name" : "chartCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Get Chart Response ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChartResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetChartResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Chart" ],
        "summary" : " Update an existing chart  ",
        "description" : " Update an existing chart  ",
        "operationId" : "    PUT_Chart_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Create a new chart  ",
        "description" : " Create a new chart  ",
        "operationId" : "    POST_Chart_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "delete" : {
        "tags" : [ "Chart" ],
        "summary" : " Remove an existing chart with a given code  ",
        "description" : " Remove an existing chart with a given code  ",
        "operationId" : "    DELETE_Chart_delete",
        "parameters" : [ {
          "name" : "chartCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/bar" : {
      "put" : {
        "tags" : [ "Chart" ],
        "summary" : " Update an existing bar chart  ",
        "description" : " Update an existing bar chart  ",
        "operationId" : "    PUT_Chart_bar",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BarChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BarChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Create a new bar chart  ",
        "description" : " Create a new bar chart  ",
        "operationId" : "    POST_Chart_bar",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BarChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BarChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/line" : {
      "put" : {
        "tags" : [ "Chart" ],
        "summary" : " Update an existing line chart  ",
        "description" : " Update an existing line chart  ",
        "operationId" : "    PUT_Chart_line",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LineChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LineChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Create a new line chart  ",
        "description" : " Create a new line chart  ",
        "operationId" : "    POST_Chart_line",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LineChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LineChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/createOrUpdate" : {
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Create new or update an existing chart with a given code  ",
        "description" : " Create new or update an existing chart with a given code  ",
        "operationId" : "    POST_Chart_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/pie" : {
      "put" : {
        "tags" : [ "Chart" ],
        "summary" : " Update an existing pie chart  ",
        "description" : " Update an existing pie chart  ",
        "operationId" : "    PUT_Chart_pie",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PieChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PieChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Create a new pie chart  ",
        "description" : " Create a new pie chart  ",
        "operationId" : "    POST_Chart_pie",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PieChartDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PieChartDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/{code}/disable" : {
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Disable a Chart with a given code  ",
        "description" : " Disable a Chart with a given code  ",
        "operationId" : "    POST_Chart_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/{code}/enable" : {
      "post" : {
        "tags" : [ "Chart" ],
        "summary" : " Enable a Chart with a given code  ",
        "description" : " Enable a Chart with a given code  ",
        "operationId" : "    POST_Chart_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/version" : {
      "get" : {
        "tags" : [ "Application", "Chart" ],
        "summary" : "Get version of application",
        "operationId" : "index_85",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/chart/listGetAll" : {
      "get" : {
        "tags" : [ "Chart" ],
        "summary" : " List Calendars matching a given criteria ",
        "description" : " List Calendars matching a given criteria ",
        "operationId" : "    GET_Chart_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of Calendars ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChartsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChartsResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity" : {
      "get" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Get Measurable quantity from a given code.  ",
        "description" : " Get Measurable quantity from a given code.  ",
        "operationId" : "    GET_MeasurableQuantity_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Measurable Quantity Response data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMeasurableQuantityResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMeasurableQuantityResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Update Measurable quantity from mesearable quantities.  ",
        "description" : " Update Measurable quantity from mesearable quantities.  ",
        "operationId" : "    PUT_MeasurableQuantity_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeasurableQuantityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeasurableQuantityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " actions status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Create a Measurable quantity. ",
        "description" : " Create a Measurable quantity. ",
        "operationId" : "    POST_MeasurableQuantity_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeasurableQuantityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeasurableQuantityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity/{code}/disable" : {
      "post" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Disable a Measurable quantity with a given code  ",
        "description" : " Disable a Measurable quantity with a given code  ",
        "operationId" : "    POST_MeasurableQuantity_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity/{code}/enable" : {
      "post" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Enable a Measurable quantity with a given code  ",
        "description" : " Enable a Measurable quantity with a given code  ",
        "operationId" : "    POST_MeasurableQuantity_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity/findMVByDateAndPeriod" : {
      "get" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Find a Measurable value during a period of date and period ",
        "description" : " Find a Measurable value during a period of date and period ",
        "operationId" : "    GET_MeasurableQuantity_findMVByDateAndPeriod",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "toDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "DAILY", "WEEKLY", "MONTHLY", "YEARLY" ]
          }
        }, {
          "name" : "mqCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " mesurable value by date and period. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity/version" : {
      "get" : {
        "tags" : [ "Application", "MeasurableQuantity" ],
        "summary" : "Get version of application",
        "operationId" : "index_86",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity/list" : {
      "get" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " List Measurable quantity with a given code.  ",
        "description" : " List Measurable quantity with a given code.  ",
        "operationId" : "    GET_MeasurableQuantity_list",
        "responses" : {
          "default" : {
            "description" : " A list of measurable quantities ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListMeasurableQuantityResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListMeasurableQuantityResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/measurableQuantity/{code}" : {
      "delete" : {
        "tags" : [ "MeasurableQuantity" ],
        "summary" : " Remove Measurable quantity with a given code.  ",
        "description" : " Remove Measurable quantity with a given code.  ",
        "operationId" : "    DELETE_MeasurableQuantity_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/filteredList/version" : {
      "get" : {
        "tags" : [ "Application", "FilteredList" ],
        "summary" : "Get version of application",
        "operationId" : "index_87",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/filteredList/listByFilter" : {
      "post" : {
        "tags" : [ "FilteredList" ],
        "summary" : " Execute a filter to retrieve a list of entities ",
        "description" : " Execute a filter to retrieve a list of entities ",
        "operationId" : "    POST_FilteredList_listByFilter",
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts" : {
      "get" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Search for a report extract with a given code. ",
        "description" : " Search for a report extract with a given code. ",
        "operationId" : "    GET_ReportExtract_search",
        "parameters" : [ {
          "name" : "reportExtractCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " matched report extract ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Updates a report extract with the given data. ",
        "description" : " Updates a report extract with the given data. ",
        "operationId" : "    POST_ReportExtract_create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportExtractDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportExtractDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the call ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Delete a Report Extract with a given code.  ",
        "description" : " Delete a Report Extract with a given code.  ",
        "operationId" : "    DELETE_ReportExtract_delete",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the call ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/createOrUpdate" : {
      "post" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Create / update a report extract with the given data. ",
        "description" : " Create / update a report extract with the given data. ",
        "operationId" : "    POST_ReportExtract_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportExtractDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportExtractDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the call ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/{code}/disable" : {
      "post" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Disable a Report extract with a given code  ",
        "description" : " Disable a Report extract with a given code  ",
        "operationId" : "    POST_ReportExtract_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/{code}/enable" : {
      "post" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Enable a Report extract with a given code  ",
        "description" : " Enable a Report extract with a given code  ",
        "operationId" : "    POST_ReportExtract_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/executionHistory" : {
      "get" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Finds and returns a list of ReportExtract history for a given code.  ",
        "description" : " Finds and returns a list of ReportExtract history for a given code.  ",
        "operationId" : "    GET_ReportExtract_executionHistory_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of report extract execution detail ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/version" : {
      "get" : {
        "tags" : [ "Application", "ReportExtract" ],
        "summary" : "Get version of application",
        "operationId" : "index_88",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/list" : {
      "get" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Returns a paginated list of ReportExtract.  ",
        "description" : " Returns a paginated list of ReportExtract.  ",
        "operationId" : "GET_ReportExtract_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "DESCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of ReportExtract ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/executionHistory/list" : {
      "get" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Returns a list of filtered and paginated report extract execution history.  ",
        "description" : " Returns a list of filtered and paginated report extract execution history.  ",
        "operationId" : "    GET_ReportExtract_executionHistory_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "DESCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of ReportExtract run history ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultsResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Returns a list of filtered and paginated report extract execution history.  ",
        "description" : " Returns a list of filtered and paginated report extract execution history.  ",
        "operationId" : "    POST_ReportExtract_executionHistory_list_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " list of ReportExtract run history ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/run" : {
      "post" : {
        "tags" : [ "ReportExtract" ],
        "summary" : " Runs a report extract with the given parameter. ",
        "description" : " Runs a report extract with the given parameter. ",
        "operationId" : "    POST_ReportExtract_run",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RunReportExtractDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RunReportExtractDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the call ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportExtractExecutionResultResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow" : {
      "get" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Find a workflow with a given code  ",
        "description" : " Find a workflow with a given code  ",
        "operationId" : "    GET_GenericWorkflow_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Generic Work flow Response data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericWorkflowResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericWorkflowResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Update an existing workflow  ",
        "description" : " Update an existing workflow  ",
        "operationId" : "    PUT_GenericWorkflow_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericWorkflowDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericWorkflowDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Create a new workflow  ",
        "description" : " Create a new workflow  ",
        "operationId" : "    POST_GenericWorkflow_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericWorkflowDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericWorkflowDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/createOrUpdate" : {
      "post" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Create new or update an existing workflow with a given code  ",
        "description" : " Create new or update an existing workflow with a given code  ",
        "operationId" : "    POST_GenericWorkflow_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericWorkflowDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericWorkflowDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/{code}/disable" : {
      "post" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Disable a Workflow with a given code  ",
        "description" : " Disable a Workflow with a given code  ",
        "operationId" : "    POST_GenericWorkflow_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/{code}/enable" : {
      "post" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Enable a Workflow with a given code  ",
        "description" : " Enable a Workflow with a given code  ",
        "operationId" : "    POST_GenericWorkflow_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/execute" : {
      "post" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Execute a workflow  ",
        "description" : " Execute a workflow  ",
        "operationId" : "    POST_GenericWorkflow_execute",
        "parameters" : [ {
          "name" : "baseEntityName",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/executeTransition" : {
      "post" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " execute transition  ",
        "description" : " execute transition  ",
        "operationId" : "    POST_GenericWorkflow_executeTransition",
        "parameters" : [ {
          "name" : "baseEntityName",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "transition",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "force",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/findByEntity" : {
      "get" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Find a workflow by entity  ",
        "description" : " Find a workflow by entity  ",
        "operationId" : "    GET_GenericWorkflow_findByEntity",
        "parameters" : [ {
          "name" : "baseEntityName",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericWorkflowsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericWorkflowsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/history" : {
      "get" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Find workflow history  ",
        "description" : " Find workflow history  ",
        "operationId" : "    GET_GenericWorkflow_history",
        "parameters" : [ {
          "name" : "entityInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromStatus",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "toStatus",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowInsHistoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowInsHistoryResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/version" : {
      "get" : {
        "tags" : [ "Application", "GenericWorkflow" ],
        "summary" : "Get version of application",
        "operationId" : "index_89",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/list" : {
      "get" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " List of workflows.  ",
        "description" : " List of workflows.  ",
        "operationId" : "    GET_GenericWorkflow_list",
        "responses" : {
          "default" : {
            "description" : " A list of workflow ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericWorkflowsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericWorkflowsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/genericWorkflow/{code}" : {
      "delete" : {
        "tags" : [ "GenericWorkflow" ],
        "summary" : " Remove an existing workflow with a given code  ",
        "description" : " Remove an existing workflow with a given code  ",
        "operationId" : "    DELETE_GenericWorkflow_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/hierarchy/userGroupLevel" : {
      "get" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " Search for a user group level with a given code.  ",
        "description" : " Search for a user group level with a given code.  ",
        "operationId" : "    GET_UserHierarchyLevel_search",
        "parameters" : [ {
          "name" : "hierarchyLevelCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the UserHierarchyLevel given the hierarchyCode ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserHierarchyLevelResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserHierarchyLevelResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " Update an existing user hierarchy level  ",
        "description" : " Update an existing user hierarchy level  ",
        "operationId" : "    PUT_UserHierarchyLevel_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserHierarchyLevelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserHierarchyLevelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " Create a new user hierarchy level  ",
        "description" : " Create a new user hierarchy level  ",
        "operationId" : "    POST_UserHierarchyLevel_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserHierarchyLevelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserHierarchyLevelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/hierarchy/userGroupLevel/createOrUpdate" : {
      "post" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " Create new or update an existing user hierarchy level with a given code  ",
        "description" : " Create new or update an existing user hierarchy level with a given code  ",
        "operationId" : "    POST_UserHierarchyLevel_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserHierarchyLevelDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserHierarchyLevelDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/hierarchy/userGroupLevel/version" : {
      "get" : {
        "tags" : [ "Application", "UserHierarchyLevel" ],
        "summary" : "Get version of application",
        "operationId" : "index_90",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/hierarchy/userGroupLevel/list" : {
      "get" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " List user hierarchy levels matching a given criteria  ",
        "description" : " List user hierarchy levels matching a given criteria  ",
        "operationId" : "    GET_UserHierarchyLevel_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of user hierarchy levels ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserHierarchyLevelsDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserHierarchyLevelsDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " List user hierarchy levels matching a given criteria  ",
        "description" : " List user hierarchy levels matching a given criteria  ",
        "operationId" : "    POST_UserHierarchyLevel_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " A list of user hierarchy levels ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserHierarchyLevelsDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserHierarchyLevelsDto"
                }
              }
            }
          }
        }
      }
    },
    "/hierarchy/userGroupLevel/{hierarchyLevelCode}" : {
      "delete" : {
        "tags" : [ "UserHierarchyLevel" ],
        "summary" : " Remove an existing hierarchy level with a given code  ",
        "description" : " Remove an existing hierarchy level with a given code  ",
        "operationId" : "    DELETE_UserHierarchyLevel_{hierarchyLevelCode}",
        "parameters" : [ {
          "name" : "hierarchyLevelCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/importExport/checkImportDataResult" : {
      "get" : {
        "tags" : [ "ImportExport" ],
        "summary" : " Check for execution results for a given execution identifier  ",
        "description" : " Check for execution results for a given execution identifier  ",
        "operationId" : "    GET_ImportExport_checkImportDataResult",
        "parameters" : [ {
          "name" : "executionId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the execution result ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/importExport/generateEntityList" : {
      "post" : {
        "tags" : [ "ImportExport" ],
        "summary" : " returns an entity list CSV ",
        "description" : " returns an entity list CSV ",
        "operationId" : "    POST_ImportExport_generateEntityList",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportExportRequestDto"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportExportRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "type ImportExportResponseDto.class s an entity list CSV ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/importExport/exportData" : {
      "post" : {
        "tags" : [ "ImportExport" ],
        "summary" : " export data  ",
        "description" : " export data  ",
        "operationId" : "    POST_ImportExport_exportData",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportExportRequestDto"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportExportRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ImportExportResponseDto response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/importExport/exportDataFromEntityList" : {
      "post" : {
        "tags" : [ "ImportExport" ],
        "summary" : " export Data From Entity List  ",
        "description" : " export Data From Entity List  ",
        "operationId" : "    POST_ImportExport_exportDataFromEntityList",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultipartFormDataInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "ImportExportResponseDto response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/importExport/importData" : {
      "post" : {
        "tags" : [ "ImportExport" ],
        "summary" : " Send a file to be imported. ImportExportResponseDto.executionId contains  ",
        "description" : " Send a file to be imported. ImportExportResponseDto.executionId contains  ",
        "operationId" : "    POST_ImportExport_importData",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultipartFormDataInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " As import is async process, ImportExportResponseDto.executionId contains and ID to be used to query for execution results via a call to/importExport/checkImportDataResult?id=.. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/importExport/version" : {
      "get" : {
        "tags" : [ "Application", "ImportExport" ],
        "summary" : "Get version of application",
        "operationId" : "index_91",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/cancel" : {
      "put" : {
        "tags" : [ "Invoice" ],
        "summary" : " Cancel an invoice based on invoice id. ",
        "description" : " Cancel an invoice based on invoice id. ",
        "operationId" : "    PUT_Invoice_cancel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelInvoiceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelInvoiceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Cancel an invoice based on invoice id.  ",
        "description" : " Cancel an invoice based on invoice id.  ",
        "operationId" : "    POST_Invoice_cancel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoice" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " Search for an invoice given an invoice id or invoice number and invoice type.  ",
        "description" : " Search for an invoice given an invoice id or invoice number and invoice type.  ",
        "operationId" : "    GET_Invoice_search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoiceType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeTransactions",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includePdf",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeXml",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " instance of GetInvoiceResponseDto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetInvoiceResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Create invoice. Invoice number depends on invoice type  ",
        "description" : " Create invoice. Invoice number depends on invoice type  ",
        "operationId" : "    POST_Invoice_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " created invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/listInvoiceByCustomerAccount" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " Search for a list of invoices given a customer account code",
        "description" : " Search for a list of invoices given a customer account code.  Deprecated in v.4.7.2, use list() instead with criteria billingAccount.customerAccount.code=xxx  ",
        "operationId" : "    GET_Invoice_listInvoiceByCustomerAccount",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnPdf",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " customer invoice. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerInvoicesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerInvoicesResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/invoice/fetchPdfInvoice" : {
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Finds an invoice based on invoice number and optionally an invoice type and return it as pdf as byte []",
        "description" : " Finds an invoice based on invoice number and optionally an invoice type and return it as pdf as byte []. Invoice is not recreated, instead invoice stored as pdf in database is returned. ",
        "operationId" : "    POST_Invoice_fetchPdfInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetPdfInvoiceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetPdfInvoiceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " pdf invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/getPdfInvoice" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " Finds an invoice based on invoice number and return it as pdf as byte []",
        "description" : " Finds an invoice based on invoice number and return it as pdf as byte []. Invoice is not recreated, instead invoice stored as pdf in database is returned.  ",
        "operationId" : "    GET_Invoice_getPdfInvoice",
        "parameters" : [ {
          "name" : "invoiceId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " pdf invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/getPdfInvoiceWithType" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " Finds an invoice based on invoice number and invoice type and return it as pdf as byte []",
        "description" : " Finds an invoice based on invoice number and invoice type and return it as pdf as byte []. Invoice is not recreated, instead invoice stored as pdf in database is returned. ",
        "operationId" : "    GET_Invoice_getPdfInvoiceWithType",
        "parameters" : [ {
          "name" : "invoiceId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoiceType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " pdf invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPdfInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/fetchXMLInvoice" : {
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Finds an invoice based on its invoice number and optionally an invoice type and return it as xml string. ",
        "description" : " Finds an invoice based on its invoice number and optionally an invoice type and return it as xml string. ",
        "operationId" : "    POST_Invoice_fetchXMLInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetXmlInvoiceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetXmlInvoiceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " xml invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetXmlInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetXmlInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/getXMLInvoice" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " Finds an invoice based on its invoice number and return it as xml string.  ",
        "description" : " Finds an invoice based on its invoice number and return it as xml string.  ",
        "operationId" : "    GET_Invoice_getXMLInvoice",
        "parameters" : [ {
          "name" : "invoiceId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " xml invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetXmlInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetXmlInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/getXMLInvoiceWithType" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " Finds an invoice based on invoice number and invoice type. It returns the result as xml string ",
        "description" : " Finds an invoice based on invoice number and invoice type. It returns the result as xml string ",
        "operationId" : "    GET_Invoice_getXMLInvoiceWithType",
        "parameters" : [ {
          "name" : "invoiceId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoiceType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " xml invoice ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetXmlInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetXmlInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/generateDraftInvoice" : {
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Generate a Draft invoice  ",
        "description" : " Generate a Draft invoice  ",
        "operationId" : "    POST_Invoice_generateDraftInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateInvoiceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateInvoiceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenerateInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenerateInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/generateInvoice" : {
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Launch all the invoicing process for a given billingAccount, that's mean",
        "description" : " Launch all the invoicing process for a given billingAccount, that's mean.  <ul> <li>Create rated transactions <li>Create an exceptional billingRun with given dates <li>Validate the pre-invoicing report <li>Validate the post-invoicing report <li>Validate the BillingRun  </ul>  ",
        "operationId" : "    POST_Invoice_generateInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateInvoiceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateInvoiceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " invoice response ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenerateInvoiceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenerateInvoiceResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/version" : {
      "get" : {
        "tags" : [ "Application", "Invoice" ],
        "summary" : "Get version of application",
        "operationId" : "index_92",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/listGetAll" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " List invoices matching a given criteria ",
        "description" : " List invoices matching a given criteria ",
        "operationId" : "    GET_Invoice_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of invoices ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/list" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " List invoices matching a given criteria.  ",
        "description" : " List invoices matching a given criteria.  ",
        "operationId" : "    GET_Invoice_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An invoice list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " List invoices matching a given criteria.  ",
        "description" : " List invoices matching a given criteria.  ",
        "operationId" : "    POST_Invoice_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An invoice list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/listPresentInAR" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : " List invoices with account operation for a given customer account  Deprecated in v",
        "description" : " List invoices with account operation for a given customer account  Deprecated in v.4.8. Use list() instead with criteria recordedInvoice=IS_NOT_NULL and billingAccount.customerAccount.code=xxx  ",
        "operationId" : "    GET_Invoice_listPresentInAR",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePdf",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of invoices ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerInvoicesResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerInvoicesResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/invoice/sendByEmail" : {
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Send invoice by Email. ",
        "description" : " Send invoice by Email. ",
        "operationId" : "    POST_Invoice_sendByEmail",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " SUCCESS if sent, FAIL else ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/invoice/validate" : {
      "put" : {
        "tags" : [ "Invoice" ],
        "summary" : " Validate an invoice based on invoice id. ",
        "description" : " Validate an invoice based on invoice id. ",
        "operationId" : "    PUT_Invoice_validate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateInvoiceRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateInvoiceRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : " Validate an invoice based on the invoice id.  ",
        "description" : " Validate an invoice based on the invoice id.  ",
        "operationId" : "    POST_Invoice_validate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "invoiceId" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "invoiceId" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoicing/paymentTerms" : {
      "post" : {
        "tags" : [ "paymentTerms" ],
        "operationId" : "create_17",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentTerm"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentTerm"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/v2/billing/invoicing/paymentTerms/{paymentTermCode}/disable" : {
      "patch" : {
        "tags" : [ "paymentTerms" ],
        "operationId" : "disable_2",
        "parameters" : [ {
          "name" : "paymentTermCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/v2/billing/invoicing/paymentTerms/{paymentTermCode}/enable" : {
      "patch" : {
        "tags" : [ "paymentTerms" ],
        "operationId" : "enable_2",
        "parameters" : [ {
          "name" : "paymentTermCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/v2/billing/invoicing/paymentTerms/{paymentTermCode}" : {
      "get" : {
        "tags" : [ "paymentTerms" ],
        "operationId" : "find_10",
        "parameters" : [ {
          "name" : "paymentTermCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "paymentTerms" ],
        "operationId" : "update_18",
        "parameters" : [ {
          "name" : "paymentTermCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentTerm"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentTerm"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "paymentTerms" ],
        "operationId" : "remove_9",
        "parameters" : [ {
          "name" : "paymentTermCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/jobInstance/create" : {
      "post" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Create a new job",
        "operationId" : "create_18",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/createOrUpdate" : {
      "post" : {
        "tags" : [ "Jobs management" ],
        "summary" : " Create new or update an existing job with a given code",
        "operationId" : "createOrUpdate_9",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/{code}/disable" : {
      "post" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Disable a Job with a given code",
        "operationId" : "disable_3",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The job instance's code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/{code}/enable" : {
      "post" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Enable a Job with a given code",
        "operationId" : "enable_3",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The job instance's code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance" : {
      "get" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Find a job with a given code",
        "operationId" : "find_11",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "query",
          "description" : "The job instance's code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Update an existing job",
        "operationId" : "updatePut",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_93",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/list" : {
      "get" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Search for list of jobInstances",
        "operationId" : "list_7",
        "responses" : {
          "200" : {
            "description" : "Return the list of jobInsttance successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/{jobInstanceCode}" : {
      "delete" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Remove an existing job with a given code",
        "operationId" : "remove_10",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "path",
          "description" : "The job instance's code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobInstance/update" : {
      "post" : {
        "tags" : [ "Jobs management" ],
        "summary" : "Update an existing job",
        "operationId" : "update_19",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job/create" : {
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Create a new job instance  ",
        "description" : " Create a new job instance  ",
        "operationId" : "    POST_Job_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job/createOrUpdate" : {
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Create new or update an existing job instance with a given code  ",
        "description" : " Create new or update an existing job instance with a given code  ",
        "operationId" : "    POST_Job_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/job/timer/createOrUpdate" : {
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Create new or update an existing timer entity with a given code  ",
        "description" : " Create new or update an existing timer entity with a given code  ",
        "operationId" : "    POST_Job_timer_createOrUpdate_",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/job/timer" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Find a timer with a given code   ",
        "description" : " Find a timer with a given code   ",
        "operationId" : "    GET_Job_timer_",
        "parameters" : [ {
          "name" : "timerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimerEntityResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimerEntityResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Job" ],
        "summary" : " Update an existing timer entity  ",
        "description" : " Update an existing timer entity  ",
        "operationId" : "    PUT_Job_timer_",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Create a new timer entity  ",
        "description" : " Create a new timer entity  ",
        "operationId" : "    POST_Job_timer_",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Find a job instance with a given code   ",
        "description" : " Find a job instance with a given code   ",
        "operationId" : "    GET_Job_search",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " object containing the matched JobInstance ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "Job" ],
        "summary" : " Update an existing job instance  ",
        "description" : " Update an existing job instance  ",
        "operationId" : "    PUT_Job_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Create a new job instance ",
        "description" : " Create a new job instance ",
        "operationId" : "    POST_Job_create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job/execute" : {
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Execute a given job instance info   ",
        "description" : " Execute a given job instance info   ",
        "operationId" : "    POST_Job_execute",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceInfoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceInfoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/job/execution" : {
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Execute a given job instance info ",
        "description" : " Execute a given job instance info ",
        "operationId" : "    POST_Job_execution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceInfoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobInstanceInfoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/jobReport" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Find a job execution result.  ",
        "description" : " Find a job execution result.  ",
        "operationId" : "    GET_Job_jobReport",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " object containing the JobExecutionResultImpl ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/job/{code}/jobExecution/{id}/jobReport" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Find a job execution result. ",
        "description" : " Find a job execution result. ",
        "operationId" : "    GET_Job{code}_jobExecution_{id}_jobReport",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " object containing the JobExecutionResultImpl ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/timers/{timerCode}" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Find a timer with a given code ",
        "description" : " Find a timer with a given code ",
        "operationId" : "    GET_Job_timers_{timerCode}",
        "parameters" : [ {
          "name" : "timerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimerEntityResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimerEntityResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/{jobInstanceCode}" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Find a job instance with a given code ",
        "description" : " Find a job instance with a given code ",
        "operationId" : "    GET_Job_{jobInstanceCode}",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " object containing the matched JobInstance ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Job" ],
        "summary" : " Remove an existing job instance with a given code   ",
        "description" : " Remove an existing job instance with a given code   ",
        "operationId" : "    DELETE_Job_{jobInstanceCode}",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job/version" : {
      "get" : {
        "tags" : [ "Application", "Job" ],
        "summary" : "Get version of application",
        "operationId" : "index_94",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job/jobReport/listGetAll" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " List jobExecutions matching a given criteria ",
        "description" : " List jobExecutions matching a given criteria ",
        "operationId" : "    GET_Job_jobReport_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of jobExecutions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/jobReport/list" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Job execution list matching a given criteria ",
        "description" : " Job execution list matching a given criteria ",
        "operationId" : "    GET_Job_jobReport_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of JobExecutions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultsResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Job execution list matching a given criteria ",
        "description" : " Job execution list matching a given criteria ",
        "operationId" : "    POST_Job_jobReport_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of JobExecutions ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobExecutionResultsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/list" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " Deprecated in v.4.7.2 Use /list instead.  ",
        "description" : " Deprecated in v.4.7.2 Use /list instead.  ",
        "operationId" : "    GET_Job_list",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "mergedCF",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " list of all subscriptions. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobInstanceListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/listCategories" : {
      "get" : {
        "tags" : [ "Job" ],
        "summary" : " List job categories  ",
        "description" : " List job categories  ",
        "operationId" : "    GET_Job_listCategories",
        "responses" : {
          "default" : {
            "description" : " object containing the list of job categories ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobCategoriesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobCategoriesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/job/timer/{timerCode}" : {
      "delete" : {
        "tags" : [ "Job" ],
        "summary" : " Remove an existing timer with a given code   ",
        "description" : " Remove an existing timer with a given code   ",
        "operationId" : "    DELETE_Job_timer_{timerCode}",
        "parameters" : [ {
          "name" : "timerCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/job/stop/{jobInstanceCode}" : {
      "put" : {
        "tags" : [ "Job" ],
        "summary" : " Stop a given job instance info for put endpoint ",
        "description" : " Stop a given job instance info for put endpoint ",
        "operationId" : "    PUT_Job_stop_{jobInstanceCode}",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Job" ],
        "summary" : " Stop a given job instance info   ",
        "description" : " Stop a given job instance info   ",
        "operationId" : "    POST_Job_stop_{jobInstanceCode}",
        "parameters" : [ {
          "name" : "jobInstanceCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/timerEntity/create" : {
      "post" : {
        "tags" : [ "TimerEntity" ],
        "summary" : " Create a new timer schedule  ",
        "description" : " Create a new timer schedule  ",
        "operationId" : "    POST_TimerEntity_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/timerEntity/createOrUpdate" : {
      "post" : {
        "tags" : [ "TimerEntity" ],
        "summary" : " Create new or update an existing timer schedule with a given code  ",
        "description" : " Create new or update an existing timer schedule with a given code  ",
        "operationId" : "    POST_TimerEntity_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/timerEntity/{code}/disable" : {
      "post" : {
        "tags" : [ "TimerEntity" ],
        "summary" : " Disable a Timer schedule with a given code  ",
        "description" : " Disable a Timer schedule with a given code  ",
        "operationId" : "    POST_TimerEntity_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/timerEntity/{code}/enable" : {
      "post" : {
        "tags" : [ "TimerEntity" ],
        "summary" : " Enable a Timer schedule with a given code  ",
        "description" : " Enable a Timer schedule with a given code  ",
        "operationId" : "    POST_TimerEntity_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/timerEntity" : {
      "get" : {
        "tags" : [ "TimerEntity" ],
        "summary" : " Find a timer schedule with a given code  ",
        "description" : " Find a timer schedule with a given code  ",
        "operationId" : "    GET_TimerEntity_search",
        "parameters" : [ {
          "name" : "timerEntityCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Return timerEntity ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTimerEntityResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTimerEntityResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/timerEntity/version" : {
      "get" : {
        "tags" : [ "Application", "TimerEntity" ],
        "summary" : "Get version of application",
        "operationId" : "index_95",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/timerEntity/update" : {
      "post" : {
        "tags" : [ "TimerEntity" ],
        "summary" : " Update an existing timer schedule  ",
        "description" : " Update an existing timer schedule  ",
        "operationId" : "    POST_TimerEntity_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimerEntityDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/config" : {
      "get" : {
        "tags" : [ "MetricsConfiguration" ],
        "summary" : " Search metrics configuration with a given code. ",
        "description" : " Search metrics configuration with a given code. ",
        "operationId" : "    GET_MetricsConfiguration_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "link GetMetricsConfigurationResponse}. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMetricsConfigurationResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMetricsConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "MetricsConfiguration" ],
        "summary" : " Update an existing MetricConfiguration. If the MetricsConfiguration code exists, a metrics configuration record is updated ",
        "description" : " Update an existing MetricConfiguration. If the MetricsConfiguration code exists, a metrics configuration record is updated ",
        "operationId" : "    PUT_MetricsConfiguration_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MetricsConfigurationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MetricsConfigurationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "link org.meveo.api.dto.ActionStatus}. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "MetricsConfiguration" ],
        "summary" : " Creates a MetricConfiguration. If the MetricConfiguration code does not exists, a metrics configuration record is created ",
        "description" : " Creates a MetricConfiguration. If the MetricConfiguration code does not exists, a metrics configuration record is created ",
        "operationId" : "    POST_MetricsConfiguration_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MetricsConfigurationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MetricsConfigurationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "link org.meveo.api.dto.ActionStatus}. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "MetricsConfiguration" ],
        "summary" : " Delete metrics configuration with a given code. ",
        "description" : " Delete metrics configuration with a given code. ",
        "operationId" : "    DELETE_MetricsConfiguration_delete",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "link org.meveo.api.dto.ActionStatus}. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/config/version" : {
      "get" : {
        "tags" : [ "Application", "MetricsConfiguration" ],
        "summary" : "Get version of application",
        "operationId" : "index_96",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module" : {
      "get" : {
        "tags" : [ "Module" ],
        "summary" : " Find a Meveo's module with a given code   ",
        "description" : " Find a Meveo's module with a given code   ",
        "operationId" : "    GET_Module_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Meveo module DTO Response. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Module" ],
        "summary" : " Update an existing Meveo module  ",
        "description" : " Update an existing Meveo module  ",
        "operationId" : "    PUT_Module_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Module" ],
        "summary" : " Create a new meveo module  ",
        "description" : " Create a new meveo module  ",
        "operationId" : "    POST_Module_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/createOrUpdate" : {
      "post" : {
        "tags" : [ "Module" ],
        "summary" : " Create new or update an existing Meveo module  ",
        "description" : " Create new or update an existing Meveo module  ",
        "operationId" : "    POST_Module_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/{code}" : {
      "delete" : {
        "tags" : [ "Module" ],
        "summary" : " Remove an existing module with a given code   ",
        "description" : " Remove an existing module with a given code   ",
        "operationId" : "    DELETE_Module_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/{code}/disable" : {
      "post" : {
        "tags" : [ "Module" ],
        "summary" : " Disable a Opencell module with a given code  ",
        "description" : " Disable a Opencell module with a given code  ",
        "operationId" : "    POST_Module_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/disable" : {
      "get" : {
        "tags" : [ "Module" ],
        "summary" : " Disable a Meveo's module with a given code  ",
        "description" : " Disable a Meveo's module with a given code  ",
        "operationId" : "    GET_Module_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/{code}/enable" : {
      "post" : {
        "tags" : [ "Module" ],
        "summary" : " Enable a Opencell module with a given code  ",
        "description" : " Enable a Opencell module with a given code  ",
        "operationId" : "    POST_Module_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/enable" : {
      "get" : {
        "tags" : [ "Module" ],
        "summary" : " Enable a Meveo's module with a given code  ",
        "description" : " Enable a Meveo's module with a given code  ",
        "operationId" : "    GET_Module_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/version" : {
      "get" : {
        "tags" : [ "Application", "Module" ],
        "summary" : "Get version of application",
        "operationId" : "index_97",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/install" : {
      "put" : {
        "tags" : [ "Module" ],
        "summary" : " Install Meveo module  ",
        "description" : " Install Meveo module  ",
        "operationId" : "    PUT_Module_install",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MeveoModuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/module/list" : {
      "get" : {
        "tags" : [ "Module" ],
        "summary" : " List all Meveo's modules  ",
        "description" : " List all Meveo's modules  ",
        "operationId" : "    GET_Module_list",
        "responses" : {
          "default" : {
            "description" : " A list of Meveo's modules ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeveoModuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/module/uninstall" : {
      "get" : {
        "tags" : [ "Module" ],
        "summary" : " uninstall a Meveo's module with a given code  ",
        "description" : " uninstall a Meveo's module with a given code  ",
        "operationId" : "    GET_Module_uninstall",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/email" : {
      "get" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Find a email notification with a given code  ",
        "description" : " Find a email notification with a given code  ",
        "operationId" : "    GET_EmailNotification_search",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "  Email Notification Response data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetEmailNotificationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetEmailNotificationResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Update an existing email notification  ",
        "description" : " Update an existing email notification  ",
        "operationId" : "    PUT_EmailNotification_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Create a new email notification  ",
        "description" : " Create a new email notification  ",
        "operationId" : "    POST_EmailNotification_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/email/createOrUpdate" : {
      "post" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Create new or update an existing email notification with a given code  ",
        "description" : " Create new or update an existing email notification with a given code  ",
        "operationId" : "    POST_EmailNotification_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/email/{code}/disable" : {
      "post" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Disable a Email notification with a given code  ",
        "description" : " Disable a Email notification with a given code  ",
        "operationId" : "    POST_EmailNotification_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/email/{code}/enable" : {
      "post" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Enable a Email notification with a given code  ",
        "description" : " Enable a Email notification with a given code  ",
        "operationId" : "    POST_EmailNotification_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/email/version" : {
      "get" : {
        "tags" : [ "Application", "EmailNotification" ],
        "summary" : "Get version of application",
        "operationId" : "index_98",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/email/{notificationCode}" : {
      "delete" : {
        "tags" : [ "EmailNotification" ],
        "summary" : " Remove an existing email notification with a given code  ",
        "description" : " Remove an existing email notification with a given code  ",
        "operationId" : "    DELETE_EmailNotification_{notificationCode}",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/jobTrigger" : {
      "get" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Find a job trigger with a given code  ",
        "description" : " Find a job trigger with a given code  ",
        "operationId" : "    GET_JobTrigger_search",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Job Trigger Response data  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetJobTriggerResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetJobTriggerResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Update an existing job trigger  ",
        "description" : " Update an existing job trigger  ",
        "operationId" : "    PUT_JobTrigger_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobTriggerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobTriggerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Create a new job trigger  ",
        "description" : " Create a new job trigger  ",
        "operationId" : "    POST_JobTrigger_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobTriggerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobTriggerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/jobTrigger/createOrUpdate" : {
      "post" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Create new or update an existing job trigger with a given code  ",
        "description" : " Create new or update an existing job trigger with a given code  ",
        "operationId" : "    POST_JobTrigger_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobTriggerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/JobTriggerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/jobTrigger/{code}/disable" : {
      "post" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Disable a Job execution trigger notification with a given code  ",
        "description" : " Disable a Job execution trigger notification with a given code  ",
        "operationId" : "    POST_JobTrigger_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/jobTrigger/{code}/enable" : {
      "post" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Enable a Job execution trigger notification with a given code  ",
        "description" : " Enable a Job execution trigger notification with a given code  ",
        "operationId" : "    POST_JobTrigger_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/jobTrigger/version" : {
      "get" : {
        "tags" : [ "Application", "JobTrigger" ],
        "summary" : "Get version of application",
        "operationId" : "index_99",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/jobTrigger/{notificationCode}" : {
      "delete" : {
        "tags" : [ "JobTrigger" ],
        "summary" : " Remove an existing job trigger with a given code  ",
        "description" : " Remove an existing job trigger with a given code  ",
        "operationId" : "    DELETE_JobTrigger_{notificationCode}",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : " Find a notification with a given code  ",
        "description" : " Find a notification with a given code  ",
        "operationId" : "    GET_Notification_search",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Script notification information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetScriptNotificationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetScriptNotificationResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Notification" ],
        "summary" : " Update an existing notification  ",
        "description" : " Update an existing notification  ",
        "operationId" : "    PUT_Notification_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptNotificationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptNotificationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : " Create a new notification  ",
        "description" : " Create a new notification  ",
        "operationId" : "    POST_Notification_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptNotificationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptNotificationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/createOrUpdate" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : " Create new or update an existing notification with a given code  ",
        "description" : " Create new or update an existing notification with a given code  ",
        "operationId" : "    POST_Notification_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptNotificationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScriptNotificationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/{code}/disable" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : " Disable a Script type notification with a given code  ",
        "description" : " Disable a Script type notification with a given code  ",
        "operationId" : "    POST_Notification_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/{code}/enable" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : " Enable a Script type notification with a given code  ",
        "description" : " Enable a Script type notification with a given code  ",
        "operationId" : "    POST_Notification_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/version" : {
      "get" : {
        "tags" : [ "Application", "Notification" ],
        "summary" : "Get version of application",
        "operationId" : "index_100",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/listInboundRequest" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : " List inbound requests  ",
        "description" : " List inbound requests  ",
        "operationId" : "    GET_Notification_listInboundRequest",
        "responses" : {
          "default" : {
            "description" : " A list of inbound requests ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InboundRequestsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InboundRequestsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/notification/listNotificationHistory" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : " List the notification history  ",
        "description" : " List the notification history  ",
        "operationId" : "    GET_Notification_listNotificationHistory",
        "responses" : {
          "default" : {
            "description" : " Notification history list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationHistoriesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationHistoriesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/notification/{notificationCode}" : {
      "delete" : {
        "tags" : [ "Notification" ],
        "summary" : " Remove an existing notification with a given code  ",
        "description" : " Remove an existing notification with a given code  ",
        "operationId" : "    DELETE_Notification_{notificationCode}",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communications/sms/version" : {
      "get" : {
        "tags" : [ "Application" ],
        "summary" : "Get version of application",
        "operationId" : "index_101",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/communications/sms/send" : {
      "post" : {
        "operationId" : "send",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSInfoDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSInfoDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { },
              "application/xml" : { }
            }
          }
        }
      }
    },
    "/notification/webhook" : {
      "get" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Find a web hook notification with a given code  ",
        "description" : " Find a web hook notification with a given code  ",
        "operationId" : "    GET_WebHookNotification_search",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "  WebHook Notification Response data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetWebHookNotificationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetWebHookNotificationResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Update an existing web hook notification  ",
        "description" : " Update an existing web hook notification  ",
        "operationId" : "    PUT_WebHookNotification_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebHookDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebHookDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Create a new web hook notification  ",
        "description" : " Create a new web hook notification  ",
        "operationId" : "    POST_WebHookNotification_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebHookDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebHookDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/webhook/createOrUpdate" : {
      "post" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Create new or update an existing web hook notification with a given code  ",
        "description" : " Create new or update an existing web hook notification with a given code  ",
        "operationId" : "    POST_WebHookNotification_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebHookDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebHookDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/webhook/{code}/disable" : {
      "post" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Disable a Webhook notification with a given code  ",
        "description" : " Disable a Webhook notification with a given code  ",
        "operationId" : "    POST_WebHookNotification_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/webhook/{code}/enable" : {
      "post" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Enable a Webhook notification with a given code  ",
        "description" : " Enable a Webhook notification with a given code  ",
        "operationId" : "    POST_WebHookNotification_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/webhook/version" : {
      "get" : {
        "tags" : [ "Application", "WebHookNotification" ],
        "summary" : "Get version of application",
        "operationId" : "index_102",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/notification/webhook/{notificationCode}" : {
      "delete" : {
        "tags" : [ "WebHookNotification" ],
        "summary" : " Remove an existing web hook notification with a given code  ",
        "description" : " Remove an existing web hook notification with a given code  ",
        "operationId" : "    DELETE_WebHookNotification_{notificationCode}",
        "parameters" : [ {
          "name" : "notificationCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/addLitigation" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Add a new litigation  ",
        "description" : " Add a new litigation  ",
        "operationId" : "    POST_AccountOperation_addLitigation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LitigationRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LitigationRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/cancelLitigation" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Cancel a litigation  ",
        "description" : " Cancel a litigation  ",
        "operationId" : "    POST_AccountOperation_cancelLitigation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LitigationRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LitigationRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation" : {
      "get" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Finds an accountOperation given an id.  ",
        "description" : " Finds an accountOperation given an id.  ",
        "operationId" : "    GET_AccountOperation_search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Account operation response ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Create a new account operation  ",
        "description" : " Create a new account operation  ",
        "operationId" : "    POST_AccountOperation_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountOperationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountOperationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/exportCustomerBalance/{fileFormat}" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Export customer balance",
        "description" : "Export customer balance",
        "operationId" : "POST_AccountOperation_exportCustomerBalance",
        "parameters" : [ {
          "name" : "fileFormat",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBalanceExportDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBalanceExportDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully exported"
          }
        }
      }
    },
    "/accountOperation/findByCustomerAccount" : {
      "get" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " List accountOperations matching customer account  ",
        "description" : " List accountOperations matching customer account  ",
        "operationId" : "    GET_AccountOperation_findByCustomerAccount",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of accountOperations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/version" : {
      "get" : {
        "tags" : [ "Application", "AccountOperation" ],
        "summary" : "Get version of application",
        "operationId" : "index_103",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/list" : {
      "get" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " List account operations matching a given criteria  ",
        "description" : " List account operations matching a given criteria  ",
        "operationId" : "    GET_AccountOperation_list",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "DESCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of account operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationsResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " List account operations matching a given criteria  ",
        "description" : " List account operations matching a given criteria  ",
        "operationId" : "    POST_AccountOperation_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of account operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountOperationsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/{accountOperationId}/listMatchedOperations" : {
      "get" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " List matched operations for a given account operation  ",
        "description" : " List matched operations for a given account operation  ",
        "operationId" : "    GET_AccountOperation_{accountOperationId}_listMatchedOperations",
        "parameters" : [ {
          "name" : "accountOperationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of matched operations ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatchedOperationsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatchedOperationsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/matchOperations" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Match operations  ",
        "description" : " Match operations  ",
        "operationId" : "    POST_AccountOperation_matchOperations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatchOperationRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatchOperationRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/transferAccountOperation" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Transfer an account operation from one customer to another. ",
        "description" : " Transfer an account operation from one customer to another. ",
        "operationId" : "    POST_AccountOperation_transferAccountOperation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferAccountOperationDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferAccountOperationDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/transferOperations" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " transfer an AO from one account to another",
        "description" : " transfer an AO from one account to another",
        "operationId" : "    POST_AccountOperation_updateStatus",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferOperationsDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferOperationsDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/unMatchingOperations" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Unmatching operations  ",
        "description" : " Unmatching operations  ",
        "operationId" : "    POST_AccountOperation_unMatchingOperations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnMatchingOperationRequestDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnMatchingOperationRequestDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/{id}/updateAccountingDate/{newAccountingDate}" : {
      "put" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Update accounting date of an account operation  ",
        "description" : " Update accounting date of an account operation  ",
        "operationId" : "    PUT_AccountOperation_update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "newAccountingDate",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/accountOperation/{id}/status/{newStatus}" : {
      "put" : {
        "tags" : [ "AccountOperation" ],
        "summary" : " Update status of an account operation  ",
        "description" : " Update status of an account operation  ",
        "operationId" : "    PUT_AccountOperation_updateStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "newStatus",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/creditCategory" : {
      "get" : {
        "tags" : [ "CreditCategory" ],
        "summary" : " Get a credit category payment with a credit category code ",
        "description" : " Get a credit category payment with a credit category code ",
        "operationId" : "GET_CreditCategory_search",
        "parameters" : [ {
          "name" : "creditCategoryCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Credit Category Response data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCategoryResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CreditCategory" ],
        "summary" : " Update a credit category payment  ",
        "description" : " Update a credit category payment  ",
        "operationId" : "PUT_CreditCategory_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CreditCategory" ],
        "summary" : " Create a new credit category  ",
        "description" : " Create a new credit category  ",
        "operationId" : "POST_CreditCategory_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/creditCategory/createOrUpdate" : {
      "post" : {
        "tags" : [ "CreditCategory" ],
        "summary" : " Create or update a credit category payment  ",
        "description" : " Create or update a credit category payment  ",
        "operationId" : "POST_CreditCategory_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/creditCategory/version" : {
      "get" : {
        "tags" : [ "Application", "CreditCategory" ],
        "summary" : "Get version of application",
        "operationId" : "index_104",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/creditCategory/list" : {
      "get" : {
        "tags" : [ "CreditCategory" ],
        "summary" : " Retrieve the list of credit category paiement  ",
        "description" : " Retrieve the list of credit category paiement  ",
        "operationId" : "GET_CreditCategory_list",
        "responses" : {
          "default" : {
            "description" : " List of Credit Categories ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCategoriesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCategoriesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/creditCategory/listGetAll" : {
      "get" : {
        "tags" : [ "CreditCategory" ],
        "summary" : "\t  List creditCategories matching a given criteria\t \t  ",
        "description" : "\t  List creditCategories matching a given criteria\t \t  ",
        "operationId" : "GET_CreditCategory_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of creditCategories\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCategoriesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCategoriesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/creditCategory/{creditCategoryCode}" : {
      "delete" : {
        "tags" : [ "CreditCategory" ],
        "summary" : " Delete a credit category with his given code  ",
        "description" : " Delete a credit category with his given code  ",
        "operationId" : "DELETE_CreditCategory_{creditCategoryCode}",
        "parameters" : [ {
          "name" : "creditCategoryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddrequestLotOp" : {
      "post" : {
        "tags" : [ "DDRequestLotOp" ],
        "summary" : "\t  Create a ddrequestLotOp by dto\t  ",
        "description" : "\t  Create a ddrequestLotOp by dto\t  ",
        "operationId" : "    POST_DDRequestLotOp_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestLotOpDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestLotOpDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Action status\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddrequestLotOp/version" : {
      "get" : {
        "tags" : [ "Application", "DDRequestLotOp" ],
        "summary" : "Get version of application",
        "operationId" : "index_105",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddrequestLotOp/list" : {
      "get" : {
        "tags" : [ "DDRequestLotOp" ],
        "summary" : " List ddrequestLotOps by fromDueDate,toDueDate,status ",
        "description" : " List ddrequestLotOps by fromDueDate,toDueDate,status ",
        "operationId" : "    GET_DDRequestLotOp_list",
        "parameters" : [ {
          "name" : "fromDueDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "toDueDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "WAIT", "PROCESSED", "ERROR" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " DDRequestLotOps response  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestLotOpsResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestLotOpsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/iban/version" : {
      "get" : {
        "tags" : [ "Application", "IBan" ],
        "summary" : "Get version of application",
        "operationId" : "index_106",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/iban/validate" : {
      "get" : {
        "tags" : [ "IBan" ],
        "summary" : " validate the iban and/or bic ",
        "description" : " validate the iban and/or bic ",
        "operationId" : "    GET_IBan_validate",
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bic",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the status of the validation ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/cardPaymentMethod" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Retrieve card payment method by its id. ",
        "description" : " Retrieve card payment method by its id. ",
        "operationId" : "    GET_Payment_cardPaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Card payment DTO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardPaymentMethodTokenDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardPaymentMethodTokenDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Update existing card payment method. ",
        "description" : " Update existing card payment method. ",
        "operationId" : "    PUT_Payment_cardPaymentMethod",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardPaymentMethodDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardPaymentMethodDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Add a new card payment method. It will be marked as preferred. ",
        "description" : " Add a new card payment method. It will be marked as preferred. ",
        "operationId" : "    POST_Payment_cardPaymentMethod",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardPaymentMethodDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardPaymentMethodDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Token id in payment gateway ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardPaymentMethodTokenDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardPaymentMethodTokenDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment" ],
        "summary" : " Remove card payment method. If it was marked as preferred, some other payment method will be marked as preferred ",
        "description" : " Remove card payment method. If it was marked as preferred, some other payment method will be marked as preferred ",
        "operationId" : "    DELETE_Payment_cardPaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddRequestBuilder" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Retrieve ddRequest builder by its code. ",
        "description" : " Retrieve ddRequest builder by its code. ",
        "operationId" : "    GET_Payment_ddRequestBuilder",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " ddRequest builder DTO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Update existing ddRequest builder. ",
        "description" : " Update existing ddRequest builder. ",
        "operationId" : "    PUT_Payment_ddRequestBuilder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestBuilderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestBuilderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Add a new ddRequest builder. ",
        "description" : " Add a new ddRequest builder. ",
        "operationId" : "    POST_Payment_ddRequestBuilder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestBuilderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestBuilderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the ddRequestBuilder dto created ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment" ],
        "summary" : " Remove ddRequest builder. ",
        "description" : " Remove ddRequest builder. ",
        "operationId" : "    DELETE_Payment_ddRequestBuilder",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Retrieve payment gateway by its code. ",
        "description" : " Retrieve payment gateway by its code. ",
        "operationId" : "    GET_Payment_paymentGateway",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " payment DTO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Update existing payment gateway. ",
        "description" : " Update existing payment gateway. ",
        "operationId" : "    PUT_Payment_paymentGateway",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Add a new payment gateway. ",
        "description" : " Add a new payment gateway. ",
        "operationId" : "    POST_Payment_paymentGateway",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the paymentGateway dto created ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment" ],
        "summary" : " Remove payment gateway. ",
        "description" : " Remove payment gateway. ",
        "operationId" : "    DELETE_Payment_paymentGateway",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethod" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Retrieve payment method by its id. ",
        "description" : " Retrieve payment method by its id. ",
        "operationId" : "    GET_Payment_paymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " payment DTO ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokenDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokenDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Update existing payment method. ",
        "description" : " Update existing payment method. ",
        "operationId" : "    PUT_Payment_paymentMethod",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Add a new payment method. It will be marked as preferred. ",
        "description" : " Add a new payment method. It will be marked as preferred. ",
        "operationId" : "    POST_Payment_paymentMethod",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Token id in payment gateway ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokenDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokenDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment" ],
        "summary" : " Remove payment method. If it was marked as preferred, some other payment method will be marked as preferred ",
        "description" : " Remove payment method. If it was marked as preferred, some other payment method will be marked as preferred ",
        "operationId" : "    DELETE_Payment_paymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/approveSepaDDMandate" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " approve SepaDDMandate  ",
        "description" : " approve SepaDDMandate  ",
        "operationId" : "    GET_Payment_paymentGateway_approveSepaDDMandate",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tokenId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "ActionStatus response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleInstance/cancel" : {
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Cancel  payment Schedules instance. ",
        "description" : " Cancel  payment Schedules instance. ",
        "operationId" : "    PUT_Payment_paymentScheduleInstance_cancel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/checkMandate" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Gets a created mandate. ",
        "description" : " Gets a created mandate. ",
        "operationId" : "    GET_Payment_paymentGateway_checkMandate",
        "parameters" : [ {
          "name" : "mandateReference",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mandateId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " created mandate ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MandatInfoDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MandatInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/create" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Creates automated payment. It also process if a payment is matching or not Deprecated and replaced by reatePayment using /payment path ",
        "description" : " Creates automated payment. It also process if a payment is matching or not Deprecated and replaced by reatePayment using /payment path ",
        "operationId" : "    POST_Payment_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " payment action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/payment/ddRequestBuilder/createOrUpdate" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Create or update ddRequest builder. ",
        "description" : " Create or update ddRequest builder. ",
        "operationId" : "    POST_Payment_ddRequestBuilder_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestBuilderDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/DDRequestBuilderDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the ddRequestBuilder dto created ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/createOrUpdate" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Create or update payment gateway. ",
        "description" : " Create or update payment gateway. ",
        "operationId" : "    POST_Payment_paymentGateway_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " the paymentGateway dto created ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Create or update payment Schedules template. ",
        "description" : " Create or update payment Schedules template. ",
        "operationId" : "    POST_Payment_paymentScheduleTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Creates automated payment. It also process if a payment is matching or not ",
        "description" : " Creates automated payment. It also process if a payment is matching or not ",
        "operationId" : "    POST_Payment_create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " payment action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleTemplate" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " find  payment Schedules template. ",
        "description" : " find  payment Schedules template. ",
        "operationId" : "    GET_Payment_paymentScheduleTemplate",
        "parameters" : [ {
          "name" : "paymentScheduleTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleTemplateResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Create  payment Schedules template. ",
        "description" : " Create  payment Schedules template. ",
        "operationId" : "    PUT_Payment_paymentScheduleTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Create  payment Schedules template. ",
        "description" : " Create  payment Schedules template. ",
        "operationId" : "    POST_Payment_paymentScheduleTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment" ],
        "summary" : " remove  payment Schedules template. ",
        "description" : " remove  payment Schedules template. ",
        "operationId" : "    DELETE_Payment_paymentScheduleTemplate",
        "parameters" : [ {
          "name" : "paymentScheduleTemplateCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/rumSequence" : {
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Updates a RUM sequence associated to the given payment gateway. ",
        "description" : " Updates a RUM sequence associated to the given payment gateway. ",
        "operationId" : "    PUT_Payment_paymentGateway_rumSequence",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayRumSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayRumSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Creates a RUM sequence associated to the given payment gateway. ",
        "description" : " Creates a RUM sequence associated to the given payment gateway. ",
        "operationId" : "    POST_Payment_paymentGateway_rumSequence",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayRumSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayRumSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/rumSequence/{code}" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Finds the RUM sequence with the specified code. ",
        "description" : " Finds the RUM sequence with the specified code. ",
        "operationId" : "    GET_Payment_paymentGateway_rumSequence_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayRumSequenceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayRumSequenceResponseDto"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment" ],
        "summary" : " Deletes the RUM sequence with the specified code. ",
        "description" : " Deletes the RUM sequence with the specified code. ",
        "operationId" : "    DELETE_Payment_paymentGateway_rumSequence_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddRequestBuilder/{code}/disable" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Disable a ddRequest builder with a given code ",
        "description" : " Disable a ddRequest builder with a given code ",
        "operationId" : "    POST_Payment_ddRequestBuilder_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/{code}/disable" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Disable a Payment gateway with a given code ",
        "description" : " Disable a Payment gateway with a given code ",
        "operationId" : "    POST_Payment_paymentGateway_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethod/{id}/disable" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Disable a Payment method with a given id ",
        "description" : " Disable a Payment method with a given id ",
        "operationId" : "    POST_Payment_paymentMethod_{id}_disable",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddRequestBuilder/{code}/enable" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Enable a ddRequest builder with a given code ",
        "description" : " Enable a ddRequest builder with a given code ",
        "operationId" : "    POST_Payment_ddRequestBuilder_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/{code}/enable" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Enable a Payment gateway with a given code ",
        "description" : " Enable a Payment gateway with a given code ",
        "operationId" : "    POST_Payment_paymentGateway_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethod/{id}/enable" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Enable a Payment method with a given id ",
        "description" : " Enable a Payment method with a given id ",
        "operationId" : "    POST_Payment_paymentMethod_{id}_enable",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethod/findByCustomerAccount" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List Payment Methods matching a customer account  ",
        "description" : " List Payment Methods matching a customer account  ",
        "operationId" : "    GET_Payment_paymentMethod_findByCustomerAccount",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An payment method list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleInstance" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Find  PaymentScheduleInstance by ID ",
        "description" : " Find  PaymentScheduleInstance by ID ",
        "operationId" : "    GET_Payment_paymentScheduleInstance",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A paymentScheduleInstance dto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleInstanceResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleInstanceResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Update  payment Schedules instance. ",
        "description" : " Update  payment Schedules instance. ",
        "operationId" : "    PUT_Payment_paymentScheduleInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/getHostedCheckoutStatus" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Get the Hosted Checkout Status. ",
        "description" : " Get the Hosted Checkout Status. ",
        "operationId" : "    GET_Payment_paymentGateway_getHostedCheckoutStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ca",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seller",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the HostedCheckoutStatusResponseDto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HostedCheckoutStatusResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HostedCheckoutStatusResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/getHostedCheckoutUrl" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Get the Hosted Checkout URL for payment. ",
        "description" : " Get the Hosted Checkout URL for payment. ",
        "operationId" : "    GET_Payment_paymentGateway_getHostedCheckoutUrl",
        "parameters" : [ {
          "name" : "ca",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnUrl",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "fr_FR"
          }
        }, {
          "name" : "amount",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "100"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "EUR"
          }
        }, {
          "name" : "authorizationMode",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "FINAL_AUTHORIZATION"
          }
        }, {
          "name" : "countryCode",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "fr"
          }
        }, {
          "name" : "skipAuthentication",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "gatewayPaymentName",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "INGENICO_GC"
          }
        }, {
          "name" : "variant",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "101"
          }
        }, {
          "name" : "seller",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "automaticReturnUrl",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "allowedActions",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnContext",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "authenticationAmount",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "advancedOptions",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "isOneShotPayment",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "cancelUrl",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodType",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "CARD",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          }
        }, {
          "name" : "customerIpAddress",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "browserScreenHeight",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "browserScreenWidth",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " the PaymentHostedCheckoutResponseDto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentHostedCheckoutResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentHostedCheckoutResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/rumSequence/{code}/next" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Generates the next RUM sequence number. ",
        "description" : " Generates the next RUM sequence number. ",
        "operationId" : "    POST_Payment_paymentGateway_rumSequence_{code}_next",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " sequence value dto ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/version" : {
      "get" : {
        "tags" : [ "Application", "Payment" ],
        "summary" : "Get version of application",
        "operationId" : "index_107",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/customerPayment" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " Returns a list of account operations along with the balance of a customer. ",
        "description" : " Returns a list of account operations along with the balance of a customer. ",
        "operationId" : "    GET_Payment_customerPayment",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " list of customer's response. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerPaymentsResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerPaymentsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/cardPaymentMethod/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List available card payment methods for a given customer account identified either by id or by code. ",
        "description" : " List available card payment methods for a given customer account identified either by id or by code. ",
        "operationId" : "    GET_Payment_cardPaymentMethod_list",
        "parameters" : [ {
          "name" : "customerAccountId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of card payment methods ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardPaymentMethodTokensDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardPaymentMethodTokensDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/ddRequestBuilder/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List DDRequest Builders matching a given criteria ",
        "description" : " List DDRequest Builders matching a given criteria ",
        "operationId" : "    GET_Payment_ddRequestBuilder_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An ddRequest builder list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " List DDRequest Builders matching a given criteria. ",
        "description" : " List DDRequest Builders matching a given criteria. ",
        "operationId" : "    POST_Payment_ddRequestBuilder_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An ddRequest builder list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DDRequestBuilderResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethod/listGetAll" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List paymentMethods matching a given criteria ",
        "description" : " List paymentMethods matching a given criteria ",
        "operationId" : "    GET_Payment_paymentMethod_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of paymentMethods ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentGateway/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List payment gateways matching a given criteria ",
        "description" : " List payment gateways matching a given criteria ",
        "operationId" : "    GET_Payment_paymentGateway_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An payment gateway list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " List payment gateways matching a given criteria. ",
        "description" : " List payment gateways matching a given criteria. ",
        "operationId" : "    POST_Payment_paymentGateway_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An payment gateway list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentGatewayResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/history/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List Payment matching a given criteria. ",
        "description" : " List Payment matching a given criteria. ",
        "operationId" : "    GET_Payment_history_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An invoice list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentHistoriesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentHistoriesDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " List invoices matching a given criteria. ",
        "description" : " List invoices matching a given criteria. ",
        "operationId" : "    POST_Payment_history_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An invoice list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentHistoriesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentHistoriesDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethod/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List Payment Methods matching a given criteria ",
        "description" : " List Payment Methods matching a given criteria ",
        "operationId" : "    GET_Payment_paymentMethod_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An payment method list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " List Payment Methods matching a given criteria ",
        "description" : " List Payment Methods matching a given criteria ",
        "operationId" : "    POST_Payment_paymentMethod_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An payment method list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodTokensDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleInstance/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List  paymentScheduleInstance matching a given criteria ",
        "description" : " List  paymentScheduleInstance matching a given criteria ",
        "operationId" : "    GET_Payment_paymentScheduleInstance_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An paymentScheduleInstance dto list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleInstancesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleInstancesDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " List  PaymentScheduleInstance matching a given criteria ",
        "description" : " List  PaymentScheduleInstance matching a given criteria ",
        "operationId" : "    POST_Payment_paymentScheduleInstance_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An PaymentScheduleInstance dto list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleInstancesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleInstancesDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleTemplate/list" : {
      "get" : {
        "tags" : [ "Payment" ],
        "summary" : " List  PaymentScheduleTemplate matching a given criteria ",
        "description" : " List  PaymentScheduleTemplate matching a given criteria ",
        "operationId" : "    GET_Payment_paymentScheduleTemplate_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " An paymentScheduleTemplate dto list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleTemplatesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleTemplatesDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " List  PaymentScheduleTemplate matching a given criteria ",
        "description" : " List  PaymentScheduleTemplate matching a given criteria ",
        "operationId" : "    POST_Payment_paymentScheduleTemplate_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An paymentScheduleTemplate dto list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleTemplatesDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentScheduleTemplatesDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/payByCard" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Make a real payment through gateways like Ingenico or Stripe",
        "description" : " Make a real payment through gateways like Ingenico or Stripe. ",
        "operationId" : "POST_Payment_payByCard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayByCardOrSepaDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayByCardOrSepaDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " payByCard ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/payBySepa" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : " Make a real payment through gateways like Ingenico or Stripe",
        "description" : " Make a real payment through gateways like Ingenico or Stripe. ",
        "operationId" : "POST_Payment_payBySepa",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayByCardOrSepaDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayByCardOrSepaDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " payBySepa ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleInstance/{id}/items" : {
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Update Payment schedule instance item, the update is only about amount and requestPaymentDate. ",
        "description" : " Update Payment schedule instance item, the update is only about amount and requestPaymentDate. ",
        "operationId" : "    PUT_Payment_paymentScheduleInstance_{id}_items",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceItemsDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceItemsDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentScheduleInstance/terminate" : {
      "put" : {
        "tags" : [ "Payment" ],
        "summary" : " Terminate  payment Schedules instance. ",
        "description" : " Terminate  payment Schedules instance. ",
        "operationId" : "    PUT_Payment_paymentScheduleInstance_terminate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/refund" : {
      "post" : {
        "tags" : [ "Refund" ],
        "summary" : " Creates refund.  ",
        "description" : " Creates refund.  ",
        "operationId" : "    POST_Refund_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " payment action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefundActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefundActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/refund/version" : {
      "get" : {
        "tags" : [ "Application", "Refund" ],
        "summary" : "Get version of application",
        "operationId" : "index_108",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule" : {
      "get" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Find a revenue recognition rule with a given code  ",
        "description" : " Find a revenue recognition rule with a given code  ",
        "operationId" : "    GET_RevenueRecognitionRules_search",
        "parameters" : [ {
          "name" : "revenueRecognitionRuleCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Revenue recognition rules results ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RevenueRecognitionRuleDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RevenueRecognitionRuleDtoResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Update an existing revenue recognition rule  ",
        "description" : " Update an existing revenue recognition rule  ",
        "operationId" : "    PUT_RevenueRecognitionRules_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Create a new revenue recognition rule  ",
        "description" : " Create a new revenue recognition rule  ",
        "operationId" : "    POST_RevenueRecognitionRules_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule/createOrUpdate" : {
      "post" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Create new or update an existing revenue recognition rule with a given code  ",
        "description" : " Create new or update an existing revenue recognition rule with a given code  ",
        "operationId" : "    POST_RevenueRecognitionRules_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule/{code}/disable" : {
      "post" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Disable a Revenue recognition rule with a given code  ",
        "description" : " Disable a Revenue recognition rule with a given code  ",
        "operationId" : "    POST_RevenueRecognitionRules_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule/{code}/enable" : {
      "post" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Enable a Revenue recognition rule with a given code  ",
        "description" : " Enable a Revenue recognition rule with a given code  ",
        "operationId" : "    POST_RevenueRecognitionRules_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule/version" : {
      "get" : {
        "tags" : [ "Application", "RevenueRecognitionRules" ],
        "summary" : "Get version of application",
        "operationId" : "index_109",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule/list" : {
      "post" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " List of revenue recognition rules.  ",
        "description" : " List of revenue recognition rules.  ",
        "operationId" : "    POST_RevenueRecognitionRules_list",
        "responses" : {
          "default" : {
            "description" : " A list of revenue recognition rules ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RevenueRecognitionRuleDtosResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RevenueRecognitionRuleDtosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/revenueRecognitionRule/{revenueRecognitionRuleCode}" : {
      "delete" : {
        "tags" : [ "RevenueRecognitionRules" ],
        "summary" : " Remove an existing revenue recognition rule with a given code  ",
        "description" : " Remove an existing revenue recognition rule with a given code  ",
        "operationId" : "    DELETE_RevenueRecognitionRules_{revenueRecognitionRuleCode}",
        "parameters" : [ {
          "name" : "revenueRecognitionRuleCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/rumSequences/nextMandateNumber" : {
      "post" : {
        "tags" : [ "RumSequence" ],
        "summary" : "\t  Calculates and returns the next value of the mandate number.\t  \t  ",
        "description" : "\t  Calculates and returns the next value of the mandate number.\t  \t  ",
        "operationId" : "POST_RumSequencenextMandateNumber",
        "responses" : {
          "default" : {
            "description" : " next mandate value\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericSequenceValueResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/payment/rumSequences/version" : {
      "get" : {
        "tags" : [ "Application", "RumSequence" ],
        "summary" : "Get version of application",
        "operationId" : "index_110",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/payment/rumSequences" : {
      "put" : {
        "tags" : [ "RumSequence" ],
        "summary" : "\t  Update the Provider's RUM sequence configuration.\t  \t  ",
        "description" : "\t  Update the Provider's RUM sequence configuration.\t  \t  ",
        "operationId" : "PUT_RumSequence_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericSequenceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericSequenceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the operation\t  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxCategory" : {
      "get" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Search for a Tax category with a given code  ",
        "description" : " Search for a Tax category with a given code  ",
        "operationId" : "    GET_TaxCategory_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A Tax category's data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Update an existing Tax category  ",
        "description" : " Update an existing Tax category  ",
        "operationId" : "    PUT_TaxCategory_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Create a new Tax category  ",
        "description" : " Create a new Tax category  ",
        "operationId" : "    POST_TaxCategory_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxCategory/createOrUpdate" : {
      "post" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Create new or update an existing Tax category  ",
        "description" : " Create new or update an existing Tax category  ",
        "operationId" : "    POST_TaxCategory_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxCategoryDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxCategory/version" : {
      "get" : {
        "tags" : [ "Application", "TaxCategory" ],
        "summary" : "Get version of application",
        "operationId" : "index_111",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxCategory/listGetAll" : {
      "get" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " List taxCategories matching a given criteria ",
        "description" : " List taxCategories matching a given criteria ",
        "operationId" : "    GET_TaxCategory_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of taxCategories ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/taxCategory/{code}" : {
      "delete" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Remove an existing Tax category with a given code  ",
        "description" : " Remove an existing Tax category with a given code  ",
        "operationId" : "    DELETE_TaxCategory_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxCategory/list" : {
      "get" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Search Tax category by matching a given criteria  ",
        "description" : " Search Tax category by matching a given criteria  ",
        "operationId" : "    GET_TaxCategory_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of Tax categorys ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TaxCategory" ],
        "summary" : " Search for Tax category by matching a given criteria  ",
        "description" : " Search for Tax category by matching a given criteria  ",
        "operationId" : "    POST_TaxCategory_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of Tax categorys ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxCategoryListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/taxClass" : {
      "get" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Search for a Tax class with a given code  ",
        "description" : " Search for a Tax class with a given code  ",
        "operationId" : "    GET_TaxClass_search",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A Tax class's data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Update an existing Tax class  ",
        "description" : " Update an existing Tax class  ",
        "operationId" : "    PUT_TaxClass_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxClassDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxClassDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Create a new Tax class  ",
        "description" : " Create a new Tax class  ",
        "operationId" : "    POST_TaxClass_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxClassDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxClassDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxClass/createOrUpdate" : {
      "post" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Create new or update an existing Tax class  ",
        "description" : " Create new or update an existing Tax class  ",
        "operationId" : "    POST_TaxClass_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxClassDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxClassDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxClass/version" : {
      "get" : {
        "tags" : [ "Application", "TaxClass" ],
        "summary" : "Get version of application",
        "operationId" : "index_112",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxClass/listGetAll" : {
      "get" : {
        "tags" : [ "TaxClass" ],
        "summary" : " List taxClasses matching a given criteria ",
        "description" : " List taxClasses matching a given criteria ",
        "operationId" : "    GET_TaxClass_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of taxClasses ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/taxClass/{code}" : {
      "delete" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Remove an existing Tax class with a given code  ",
        "description" : " Remove an existing Tax class with a given code  ",
        "operationId" : "    DELETE_TaxClass_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxClass/list" : {
      "get" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Search Tax class by matching a given criteria  ",
        "description" : " Search Tax class by matching a given criteria  ",
        "operationId" : "    GET_TaxClass_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "code"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of Tax classs ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TaxClass" ],
        "summary" : " Search for Tax class by matching a given criteria  ",
        "description" : " Search for Tax class by matching a given criteria  ",
        "operationId" : "    POST_TaxClass_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of Tax classs ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/taxMapping" : {
      "get" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Search for a Tax mapping with a given id  ",
        "description" : " Search for a Tax mapping with a given id  ",
        "operationId" : "    GET_TaxMapping_search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A Tax mapping's data ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingResponseDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Update an existing Tax mapping  ",
        "description" : " Update an existing Tax mapping  ",
        "operationId" : "    PUT_TaxMapping_update",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxMappingDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxMappingDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Create a new Tax mapping  ",
        "description" : " Create a new Tax mapping  ",
        "operationId" : "    POST_TaxMapping_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxMappingDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxMappingDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxMapping/createOrUpdate" : {
      "post" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Create new or update an existing Tax mapping  ",
        "description" : " Create new or update an existing Tax mapping  ",
        "operationId" : "    POST_TaxMapping_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxMappingDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxMappingDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxMapping/version" : {
      "get" : {
        "tags" : [ "Application", "TaxMapping" ],
        "summary" : "Get version of application",
        "operationId" : "index_113",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxMapping/listGetAll" : {
      "get" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " List taxMappings matching a given criteria ",
        "description" : " List taxMappings matching a given criteria ",
        "operationId" : "    GET_TaxMapping_listGetAll",
        "responses" : {
          "default" : {
            "description" : " List of taxMappings ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/taxMapping/{id}" : {
      "delete" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Remove an existing Tax mapping with a given id  ",
        "description" : " Remove an existing Tax mapping with a given id  ",
        "operationId" : "    DELETE_TaxMapping_{id}",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/taxMapping/list" : {
      "get" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Search Tax mapping by matching a given criteria  ",
        "description" : " Search Tax mapping by matching a given criteria  ",
        "operationId" : "    GET_TaxMapping_list",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "id"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "ASCENDING",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " List of Tax mappings ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingListResponseDto"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TaxMapping" ],
        "summary" : " Search for Tax mapping by matching a given criteria  ",
        "description" : " Search for Tax mapping by matching a given criteria  ",
        "operationId" : "    POST_TaxMapping_list",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " List of Tax mappings ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingListResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxMappingListResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/createOfferFromBOM" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create offer from BOM definition  ",
        "description" : " Create offer from BOM definition  ",
        "operationId" : "    POST_Catalog_createOfferFromBOM",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BomOfferDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BomOfferDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create offer BOM ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create or update product charge template  ",
        "description" : " Create or update product charge template  ",
        "operationId" : "    POST_Catalog_productChargeTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create or update Product Charge Template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate/createOrUpdate" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create or update product template  ",
        "description" : " Create or update product template  ",
        "operationId" : "    POST_Catalog_productTemplate_createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create Product Template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate" : {
      "put" : {
        "tags" : [ "Catalog" ],
        "summary" : " Update product charge template  ",
        "description" : " Update product charge template  ",
        "operationId" : "    PUT_Catalog_productChargeTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the update Product Charge Template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create product charge template  ",
        "description" : " Create product charge template  ",
        "operationId" : "    POST_Catalog_productChargeTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductChargeTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductChargeTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create Product Charge Template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/createProductFromBPM" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create product from BPM definition  ",
        "description" : " Create product from BPM definition  ",
        "operationId" : "    POST_Catalog_createProductFromBPM",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BpmProductDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BpmProductDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create Service BPM ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate" : {
      "put" : {
        "tags" : [ "Catalog" ],
        "summary" : " Update product template  ",
        "description" : " Update product template  ",
        "operationId" : "    PUT_Catalog_productTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the update Product Template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create product template  ",
        "description" : " Create product template  ",
        "operationId" : "    POST_Catalog_productTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductTemplateDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create Product Template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/createServiceFromBSM" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Create service from BSM definition  ",
        "description" : " Create service from BSM definition  ",
        "operationId" : "    POST_Catalog_createServiceFromBSM",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BsmServiceDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BsmServiceDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the create Service BSM ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Disable a Product charge template with a given code  ",
        "description" : " Disable a Product charge template with a given code  ",
        "operationId" : "    POST_Catalog_productChargeTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate/{code}/disable" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Disable a Product template with a given code  ",
        "description" : " Disable a Product template with a given code  ",
        "operationId" : "    POST_Catalog_productTemplate_{code}_disable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Enable a Product charge template with a given code  ",
        "description" : " Enable a Product charge template with a given code  ",
        "operationId" : "    POST_Catalog_productChargeTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate/{code}/enable" : {
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : " Enable a Product template with a given code  ",
        "description" : " Enable a Product template with a given code  ",
        "operationId" : "    POST_Catalog_productTemplate_{code}_enable",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Request processing status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/category" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get a list of categories  ",
        "description" : " Get a list of categories  ",
        "operationId" : "    GET_Catalog_category",
        "responses" : {
          "default" : {
            "description" : " A list of categories ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productOffering" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get a list of product offerings optionally filtering by some criteria  ",
        "description" : " Get a list of product offerings optionally filtering by some criteria  ",
        "operationId" : "    GET_Catalog_productOffering",
        "parameters" : [ {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of product offerings matching search criteria ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productSpecification" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get a list of product specifications optionally filtering by some criteria  ",
        "description" : " Get a list of product specifications optionally filtering by some criteria  ",
        "operationId" : "    GET_Catalog_productSpecification",
        "responses" : {
          "default" : {
            "description" : " A list of product specifications matching search criteria ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/category/{code}" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get a single category by its code  ",
        "description" : " Get a single category by its code  ",
        "operationId" : "    GET_Catalog_category_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Single category information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate/{code}" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get a single productChargeTemplate by its code  ",
        "description" : " Get a single productChargeTemplate by its code  ",
        "operationId" : "    GET_Catalog_productChargeTemplate_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Single productChargeTemplate information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog" ],
        "summary" : " Delete a single productChargeTemplate by its code  ",
        "description" : " Delete a single productChargeTemplate by its code  ",
        "operationId" : "    DELETE_Catalog_productChargeTemplate_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Response of the delete action ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productOffering/{id}" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get details of a single Product template and validity dates",
        "description" : " Get details of a single Product template and validity dates. If no validity dates are provided, an Product template valid on a current date will be returned.  ",
        "operationId" : "    GET_Catalog_productOffering_{id}",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Single product offering ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productSpecification/{id}" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get details of a single product  ",
        "description" : " Get details of a single product  ",
        "operationId" : "    GET_Catalog_productSpecification_{id}",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A single product specification ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate/{code}" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Get a single productTemplate by its code and validity dates",
        "description" : " Get a single productTemplate by its code and validity dates. If no validity dates are provided, a product template valid on a current date will be deleted.  ",
        "operationId" : "    GET_Catalog_productTemplate_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Single productTemplate information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog" ],
        "summary" : " Delete a single productTemplate by its code and validity dates",
        "description" : " Delete a single productTemplate by its code and validity dates. If no validity dates are provided, a product template valid on a current date will be deleted.  ",
        "operationId" : "    DELETE_Catalog_productTemplate_{code}",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Response of the remove action ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/version" : {
      "get" : {
        "tags" : [ "Application", "Catalog" ],
        "summary" : "Get version of application",
        "operationId" : "index_114",
        "responses" : {
          "200" : {
            "description" : "Return action status with version number as a message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Gets a productChargeTemplate list. ",
        "description" : " Gets a productChargeTemplate list. ",
        "operationId" : "    GET_Catalog_productChargeTemplate_listGetAll",
        "responses" : {
          "default" : {
            "description" : " Return productChargeTemplate list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductChargeTemplatesResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductChargeTemplatesResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate/listGetAll" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " Gets a productTemplates list. ",
        "description" : " Gets a productTemplates list. ",
        "operationId" : "    GET_Catalog_productTemplate_listGetAll",
        "responses" : {
          "default" : {
            "description" : " Return productTemplates list ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListProductTemplateResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListProductTemplateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productChargeTemplate/list" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " List all productChargeTemplates  ",
        "description" : " List all productChargeTemplates  ",
        "operationId" : "    GET_Catalog_productChargeTemplate_list",
        "responses" : {
          "default" : {
            "description" : " List of charge template ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogManagement/productTemplate/list" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : " List all product templates optionally filtering by code and validity dates",
        "description" : " List all product templates optionally filtering by code and validity dates. If neither date is provided, validity dates will not be considered. If only validFrom is provided, a search will return products valid on a given date. If only validTo date is provided, a search will return products valid from today to a given date.  ",
        "operationId" : "    GET_Catalog_productTemplate_list",
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "validFrom",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "validTo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " A list of product templates ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/productOrder/{orderId}/applicableDueDateDelay" : {
      "get" : {
        "tags" : [ "Order" ],
        "summary" : " Evaluate and return the dueDateDelayEL. It checks the EL in this order: Order, CustomerAccount, BillingCycle.  ",
        "description" : " Evaluate and return the dueDateDelayEL. It checks the EL in this order: Order, CustomerAccount, BillingCycle.  ",
        "operationId" : "    GET_Order_{orderId}_applicableDueDateDelay",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Response of the due date delay  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/productOrder" : {
      "get" : {
        "tags" : [ "Order" ],
        "summary" : " Get a list of product orders optionaly filtered by some criteria  ",
        "description" : " Get a list of product orders optionaly filtered by some criteria  ",
        "operationId" : "    GET_Order_search",
        "responses" : {
          "default" : {
            "description" : " A list of product orders matching search criteria ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order" ],
        "summary" : " Place a new product order  ",
        "description" : " Place a new product order  ",
        "operationId" : "    POST_Order_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOrder"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOrder"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Product order information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/productOrder/{orderId}" : {
      "get" : {
        "tags" : [ "Order" ],
        "summary" : " Get details of a single product order  ",
        "description" : " Get details of a single product order  ",
        "operationId" : "    GET_Order_{orderId}",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Response of the request ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order" ],
        "summary" : " Delete a product order  ",
        "description" : " Delete a product order  ",
        "operationId" : "    DELETE_Order_{orderId}",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " Response of the delete request ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/productOrder/{orderId}/simpleDueDateDelay" : {
      "put" : {
        "tags" : [ "Order" ],
        "summary" : " Updates the dueDateDelayEL of an Order.   ",
        "description" : " Updates the dueDateDelayEL of an Order.   ",
        "operationId" : "    PUT_Order_{orderId}_simpleDueDateDelay",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicableDueDateDelayDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicableDueDateDelayDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Response of the update request ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/productOrder/{id}" : {
      "patch" : {
        "tags" : [ "Order" ],
        "summary" : " Modify partially a product order  ",
        "description" : " Modify partially a product order  ",
        "operationId" : "    PATCH_Order_{id}",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOrder"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOrder"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " An updated product order information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/productOrder/validate" : {
      "get" : {
        "tags" : [ "Order" ],
        "summary" : " validate a product order ",
        "description" : " validate a product order ",
        "operationId" : "    GET_Order_validate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOrder"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductOrder"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " Product order information ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/quoteManagement/productQuote" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get a list of product quotes optionally filtered by some criteria",
        "operationId" : "findProductQuotes",
        "responses" : {
          "200" : {
            "description" : "quotes are succeffully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductQuote"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductQuote"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Create a product quote",
        "operationId" : "createProductQuote",
        "requestBody" : {
          "description" : "Product quote information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuote"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuote"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The quote is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/quoteManagement/productQuote/quoteItem" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Create a quote item",
        "operationId" : "createQuoteItem_1",
        "requestBody" : {
          "description" : "Product quote item information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuoteItem"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuoteItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "quote item is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/quoteManagement/productQuote/quoteVersion" : {
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "Update a quote version",
        "operationId" : "updateQuoteVersion",
        "requestBody" : {
          "description" : "Product quote version information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "New quote version is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Create a quote version",
        "operationId" : "createQuoteVersion_1",
        "requestBody" : {
          "description" : "Product quote version information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteVersionDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteVersionDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "New quote version is succeffully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
                }
              }
            }
          },
          "412" : {
            "description" : "the quote version with code or short description  is missing"
          }
        }
      }
    },
    "/quoteManagement/productQuote/{quoteCode}" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get a product quote by its code",
        "operationId" : "getProductQuote",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The quote is succeffully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductQuote"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductQuote"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "Modify a product quote",
        "operationId" : "updateProductQuote",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Product quote information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuote"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuote"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The quote is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Quote management" ],
        "summary" : "Delete a product quote.",
        "operationId" : "deleteProductQuote",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The quote is succeffully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/quoteManagement/productQuote/quoteItem/{quoteItemCode}" : {
      "put" : {
        "tags" : [ "Quote management" ],
        "summary" : "Modify a quote item",
        "operationId" : "updateQuoteItem_1",
        "parameters" : [ {
          "name" : "quoteItemCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Product quote information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuoteItem"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductQuoteItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The quote item is succeffully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Quote management" ],
        "summary" : "Delete a quote item",
        "operationId" : "deleteQuoteItem_1",
        "parameters" : [ {
          "name" : "quoteItemCode",
          "in" : "path",
          "description" : "Product quote item code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "quote item is succeffully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/quoteManagement/productQuote/quoteVersion/{quoteCode}/{quoteVersion}" : {
      "delete" : {
        "tags" : [ "Quote management" ],
        "summary" : "Delete a quote version",
        "operationId" : "deleteQuoteVersion_1",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "quote code attached to quote version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "quote version number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing quote version is succeffully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "No quote version was found with quoteCode and quoteVersion in parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/quoteManagement/productQuote/placeOrder/{quoteCode}" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "Place an order based on a product quote",
        "operationId" : "placeOrder_1",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "Product quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "order succeffully created from current quote",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accountingPeriodManagement/accountingPeriods" : {
      "post" : {
        "tags" : [ "AccountingPeriods" ],
        "summary" : "Create a new AccountingPeriod",
        "description" : "Create a new AccountingPeriod",
        "operationId" : "create_19",
        "requestBody" : {
          "description" : "the AccountingPeriod input object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingPeriod"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the AccountingPeriod is successfully created"
          },
          "400" : {
            "description" : "bad request when AccountingPeriod information contains an error"
          }
        }
      }
    },
    "/v2/accountingPeriodManagement/accountingPeriods/generateNextAP" : {
      "post" : {
        "tags" : [ "AccountingPeriods" ],
        "summary" : "Generate next AccountingPeriod",
        "description" : "Generate next AccountingPeriod",
        "operationId" : "generateNextAP",
        "responses" : {
          "200" : {
            "description" : "the next AccountingPeriod is successfully generated"
          },
          "400" : {
            "description" : "bad request: AccountingPeriod information contains an error"
          }
        }
      }
    },
    "/v2/accountingPeriodManagement/accountingPeriods/{fiscalYear}" : {
      "put" : {
        "tags" : [ "AccountingPeriods" ],
        "summary" : "update an new AccountingPeriod",
        "description" : "Update an AccountingPeriod",
        "operationId" : "update_20",
        "parameters" : [ {
          "name" : "fiscalYear",
          "in" : "path",
          "description" : "fiscalYear of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the AccountingPeriod input object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingPeriod"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the AccountingPeriod is successfully updated"
          },
          "404" : {
            "description" : "the AccountingPeriod does not exist"
          },
          "400" : {
            "description" : "bad request, AccountingPeriod informations contains an error"
          }
        }
      }
    },
    "/v2/accountingPeriodManagement/accountingPeriods/{fiscalYear}/subAccountingPeriods/{number}/allUsersStatus/{status}" : {
      "put" : {
        "tags" : [ "AccountingPeriods" ],
        "summary" : "update allUsers status",
        "description" : "Update a SubaccountingPeriod",
        "operationId" : "updateAllUserStatus",
        "parameters" : [ {
          "name" : "fiscalYear",
          "in" : "path",
          "description" : "fiscalYear of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "path",
          "description" : "subaccounting period number",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "status",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "reason of reopening sub-accounting period",
          "allowEmptyValue" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "allUsers status is successfully updated"
          },
          "404" : {
            "description" : "target entity does not exist"
          }
        }
      }
    },
    "/v2/accountingPeriodManagement/accountingPeriods/{fiscalYear}/subAccountingPeriods/{number}/regularUsersStatus/{status}" : {
      "put" : {
        "tags" : [ "AccountingPeriods" ],
        "summary" : "update regularUsers status",
        "description" : "Update a SubaccountingPeriod",
        "operationId" : "updateRegularUserStatus",
        "parameters" : [ {
          "name" : "fiscalYear",
          "in" : "path",
          "description" : "fiscalYear of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "path",
          "description" : "subaccounting period number",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "status",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "reason of reopening sub-accounting period",
          "allowEmptyValue" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "regularUsers status is successfully updated"
          },
          "404" : {
            "description" : "target entity does not exist"
          }
        }
      }
    },
    "/v2/accountingPeriodManagement/accountingPeriods/{fiscalYear}/{status}" : {
      "put" : {
        "tags" : [ "AccountingPeriods" ],
        "summary" : "update regularUsers status",
        "description" : "Update a SubaccountingPeriod",
        "operationId" : "updateStatus_3",
        "parameters" : [ {
          "name" : "fiscalYear",
          "in" : "path",
          "description" : "fiscalYear of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "status",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "regularUsers status is successfully updated"
          },
          "404" : {
            "description" : "target entity does not exist"
          }
        }
      }
    },
    "/v2/accounting/auxiliaryAccounts/{customerAccountCode}" : {
      "get" : {
        "tags" : [ "AuxiliaryCode" ],
        "summary" : "Get the auxiliary account information corresponding to the giver customer account",
        "description" : "Returns auxiliary account information corresponding to the giver customer account",
        "operationId" : "getAuxiliaryAccount",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Auxiliary account information are successfully evaluated"
          },
          "404" : {
            "description" : "Customer account not fount"
          },
          "500" : {
            "description" : "Auxiliary account information not correctly evaluated"
          }
        }
      }
    },
    "/v2/accounting/vat/{vat_number}/{country_code}/validate" : {
      "get" : {
        "tags" : [ "vat_number", "country_code" ],
        "summary" : "Check the validate VAT in EUROPE",
        "description" : "Check the validate VAT in EUROPE by vatNumber et countryCode",
        "operationId" : "getValByValNbContryCode",
        "parameters" : [ {
          "name" : "vat_number",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "country_code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "valid VAT in EUROPE"
          },
          "500" : {
            "description" : "inValid VAT in EUROPE"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/assignOperation/{id}" : {
      "post" : {
        "tags" : [ "AccountOperation" ],
        "summary" : "Assign an account operation to a customer",
        "description" : "Assign an account operation to a customer",
        "operationId" : "assignAccountOperation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Account operation id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Customer account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Account operation is successfully assigned"
          },
          "400" : {
            "description" : "Action is failed"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/closeOperations" : {
      "put" : {
        "summary" : "Close account operations",
        "description" : "Close account operations that have INT_ADV and its matching status are OPEN or PARTIAL",
        "operationId" : "closeOperations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountOperationClose"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account operations successfully closed"
          },
          "404" : {
            "description" : "Account operations don't exist"
          },
          "409" : {
            "description" : "Account operations are already closed"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/forcePosting" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Refund By SCT",
        "description" : "set the accountingDate field by the value of transactionDate, and set account operations status to POSTED",
        "operationId" : "forcePosting",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account operations are successfully posted"
          },
          "404" : {
            "description" : "Following account operations does not exist : {accountOperation ids}"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/changeStatus" : {
      "put" : {
        "summary" : "mark account operation as exported",
        "description" : "mark account operation as exported",
        "operationId" : "markExported",
        "requestBody" : {
          "description" : "id of the Invoice",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangeStatusDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Account operations status are successfully updated"
          },
          "404" : {
            "description" : "Account operations don't exist"
          },
          "409" : {
            "description" : "Status of account operations can not be updated"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/matchOperations" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "API to match Account operations",
        "description" : "Process matching for AccountOperations",
        "operationId" : "matchOperations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatchingAccountOperation"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully matched"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Matching action is failed"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/post" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Refund By SCT",
        "description" : "set the accountingDate field by the value of transactionDate, and set account operations status to POSTED",
        "operationId" : "post",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account operations are successfully posted"
          },
          "404" : {
            "description" : "Following account operations does not exist : {accountOperation ids}"
          },
          "409" : {
            "description" : "the sub-accounting period of following account operations are already closed : {accountOperation ids}"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/{id}/litigation/remove" : {
      "post" : {
        "summary" : "Remove litigation status on an account operation",
        "description" : "Remove litigation status on an account operation",
        "operationId" : "removeLitigation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Litigation dto",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LitigationInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "litigation successfully removed"
          },
          "400" : {
            "description" : "Account operation is not in litigation"
          },
          "404" : {
            "description" : "Account operations don't exist"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/{id}/litigation" : {
      "put" : {
        "summary" : "Set litigation matching status on an account operation",
        "description" : "Set litigation matching status on an account operation",
        "operationId" : "setLitigation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Litigation dto",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LitigationInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "litigation successfully set"
          },
          "404" : {
            "description" : "Account operations don't exist"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/{accountOperationId}/transferAmounts" : {
      "post" : {
        "summary" : "Transfer amount from one account to another",
        "description" : "Transfer amount from one account to another",
        "operationId" : "transferAmounts",
        "parameters" : [ {
          "name" : "accountOperationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Amounts to transfer",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AmountsTransferDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Amounts successfully transferred"
          },
          "404" : {
            "description" : "Customer account code/id doesn’t exist."
          },
          "400" : {
            "description" : "Sum of dispatched amounts must be lower or equal to source account operation’s unmatched amount"
          }
        }
      }
    },
    "/v2/accountReceivable/accountOperation/unMatchOperations" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "API to match Account operations",
        "description" : "Process unMatching for AccountOperations",
        "operationId" : "unMatchOperations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnMatchingAccountOperation"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully matched"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "400" : {
            "description" : "Matching action is failed"
          }
        }
      }
    },
    "/v2/accountReceivable/deferralPayments" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Create a defferal Payment",
        "description" : "Create a defferal Payment",
        "operationId" : "create_20",
        "requestBody" : {
          "description" : "Deferral Payments information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeferralPayments"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "defferal Payment is successfully created"
          },
          "403" : {
            "description" : "user has not habilitation to create a paymentDeferral."
          },
          "422" : {
            "description" : "maximum deferral count per invoice is exceeded."
          },
          "409" : {
            "description" : "payment deferral already exists "
          }
        }
      }
    },
    "/v2/account/accountHierarchy/customerHierarchyUpdate" : {
      "post" : {
        "tags" : [ "AccountHierarchy" ],
        "summary" : "Update account hierarchy",
        "description" : "This service allows to create / update (if exist already) and close / terminate (if termination date is set) a list of customer, customer accounts, billing accounts, user accounts, subscriptions, services, and access in one transaction. It can activate and terminate subscription and service instance. Close customer account. Terminate billing and user account",
        "operationId" : "customerHierarchyUpdate_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerHierarchyDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerHierarchyDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accountsManagement/subscriptions/applyOneShotChargeList" : {
      "post" : {
        "tags" : [ "Subscriptions", "OneShot" ],
        "summary" : "Apply one shot charges of type “Other” to subscriptions",
        "operationId" : "applyOneShotChargeList",
        "requestBody" : {
          "description" : "the ApplyOneShotChargeListInput object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyOneShotChargeListInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A list of rated wallet operations, preserving the order of incomming CDRs"
          },
          "400" : {
            "description" : "bad request on register CDR list"
          }
        }
      }
    },
    "/v2/accountsManagement/billingAccounts/{billingAccountCode}/moving" : {
      "post" : {
        "tags" : [ "Generic", "Move", "Customer Account" ],
        "summary" : "The Billing Account will be moved immediately under the provided Customer Account.\\n\" +\n                    \"All open wallet operation will be rerated.",
        "description" : "The Billing Account will be moved immediately under the provided Customer Account.\nAll open wallet operation will be rerated.\n\nNo consistency check is performed, no other data is modified.\nEspecially:\n\ncounters (accumulators) set on the origin or target Customer will not be updated to reflect the move\n\ncustom fields referencing entities in the origin hierarchy will not be updated\n\nUnless specifically developed to use field history, reports will use the customer at the time of execution",
        "operationId" : "changeBillingAccountParentAccount",
        "parameters" : [ {
          "name" : "billingAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Parent id or code",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ParentInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "entity not found"
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/accountsManagement/customerAccounts/{customerAccountCode}/moving" : {
      "post" : {
        "tags" : [ "Generic", "Move", "Customer Account" ],
        "summary" : "The Customer Account will be moved immediately under the provided Customer.\\n\" +\n                    \"All open wallet operation will be rerated.",
        "description" : "The Customer Account will be moved immediately under the provided Customer.\nAll open wallet operation will be rerated.\n\nNo consistency check is performed, no other data is modified.\nEspecially:\n\ncounters (accumulators) set on the origin or target Customer will not be updated to reflect the move\n\ncustom fields referencing entities in the origin hierarchy will not be updated\n\nUnless specifically developed to use field history, reports will use the customer at the time of execution",
        "operationId" : "changeCustomerAccountParentAccount",
        "parameters" : [ {
          "name" : "customerAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Parent id or code",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ParentInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "entity not found"
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/accountsManagement/counterInstance" : {
      "post" : {
        "tags" : [ "CounterInstance" ],
        "summary" : "This API allows to create a new counter instance with its proper counter periods.",
        "description" : "Create a new counter instance with its proper counter periods.",
        "operationId" : "createCounterInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success, no return data"
          },
          "404" : {
            "description" : "Nested entites not found"
          }
        }
      }
    },
    "/v2/accountsManagement/customer/{customerCode}/getAllParentCustomers" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "This API return a list of IDs of all customer parents",
        "operationId" : "getAllParentCustomers",
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "Customer code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of IDs of all customer parents"
          },
          "404" : {
            "description" : "Customer not found"
          }
        }
      }
    },
    "/v2/accountsManagement/subscriptions/{subscriptionCode}/transfer" : {
      "post" : {
        "tags" : [ "Generic", "Subscription", "Transfer" ],
        "summary" : "This endpoint allows to transfer a subscription to another account",
        "description" : "API to transfer the subscription from a consumer to an other consumer (UA)",
        "operationId" : "transferSubscription",
        "parameters" : [ {
          "name" : "subscriptionCode",
          "in" : "path",
          "description" : "The subscription code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "openTransactionsAction",
          "in" : "query",
          "description" : "Open transactions action ",
          "schema" : {
            "type" : "string",
            "default" : "NONE",
            "enum" : [ "NONE", "FAIL", "MOVE", "MOVE_AND_RERATE", "FAIL_DRAFT", "FAIL_OPEN_AND_DRAFT" ]
          }
        } ],
        "requestBody" : {
          "description" : "Consumer id or code",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConsumerInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Success, no return data"
          },
          "200" : {
            "description" : "Success (in case of moved WO/RT) Returns the ids of moved WO/RT"
          },
          "404" : {
            "description" : "Either Customer Account or Customer not found"
          },
          "409" : {
            "description" : "Cannot move subscription"
          }
        }
      }
    },
    "/v2/accountsManagement/counterInstance/{id}" : {
      "put" : {
        "tags" : [ "CounterInstance" ],
        "summary" : "This API allows to update an existing counter instance with its proper counter periods.",
        "description" : "Update an existing counter instance with its proper counter periods.",
        "operationId" : "updateCounterInstance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "CounterInstance id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CounterInstanceDto"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success, no return data"
          },
          "404" : {
            "description" : "Nested entites not found"
          }
        }
      }
    },
    "/v2/account/billingAccount" : {
      "put" : {
        "tags" : [ "Billing account management" ],
        "summary" : "Update existing billing account",
        "operationId" : "update_21",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Billing account management" ],
        "summary" : "Create a new billing account",
        "operationId" : "create_21",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account/billingAccount/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create or update Billing Account based on cod",
        "operationId" : "createOrUpdate_10",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v2/account/customerAccount" : {
      "put" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Update a customer account",
        "operationId" : "update_22",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer account management" ],
        "summary" : "Create a customer account",
        "operationId" : "create_22",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account/customerAccount/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create or update a customer account",
        "operationId" : "createOrUpdate_11",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v2/account/customer" : {
      "put" : {
        "tags" : [ "Customer management" ],
        "summary" : "Update an existing customer",
        "operationId" : "update_23",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer management" ],
        "summary" : "Create a new customer",
        "operationId" : "create_23",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account/customer/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : " Create new or update existing customer",
        "operationId" : "createOrUpdate_12",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v2/account/userAccount" : {
      "put" : {
        "tags" : [ "User account management" ],
        "summary" : "Update an existing user account",
        "operationId" : "update_24",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User account management" ],
        "summary" : "Create a new user account",
        "operationId" : "create_24",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account/userAccount/createOrUpdate" : {
      "post" : {
        "tags" : [ "Deprecated" ],
        "summary" : "Create new or update an existing user account",
        "operationId" : "createOrUpdate_13",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserAccountDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v2/accounts/userAccounts/{userAccountCode}/allowedParents" : {
      "get" : {
        "tags" : [ "AllowedParents" ],
        "summary" : "List user accounts allowed to be parent of the giving user account",
        "description" : "fine allowed parents for a giving user account",
        "operationId" : "allowedUserAccountParents",
        "parameters" : [ {
          "name" : "userAccountCode",
          "in" : "path",
          "description" : "user Account code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the UserAccounts allowed to be parent for userAccountCode successfully retrieved"
          },
          "404" : {
            "description" : "the full list of entities not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/files/search" : {
      "post" : {
        "summary" : "Endpoint to retrieve paginated list files",
        "description" : "Search for files by name, date, size while setting the offset and limit also with the ability to sort by a file characteristic and set the sort type ",
        "operationId" : "search",
        "requestBody" : {
          "description" : "Pagination and filtering criteria used for searching files",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved"
          },
          "400" : {
            "description" : "bad request when directory is not found"
          }
        }
      }
    },
    "/v2/seller" : {
      "put" : {
        "summary" : " Update seller v2.  ",
        "description" : " new version for updating a seller.  ",
        "operationId" : "    PUT_Seller_update_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Seller"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : " Create seller for v2.  ",
        "description" : " new version for seller.  ",
        "operationId" : "    POST_Seller_create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Seller"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/v2/seller/createOrUpdate" : {
      "post" : {
        "summary" : " Create or update a seller. ",
        "description" : " Create or update a seller. ",
        "operationId" : "    POST_Seller_createOrUpdate_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Seller"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " created or updated seller. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/v2/articles" : {
      "get" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to find list of accounting article resource",
        "description" : "find list of an existing accounting article",
        "operationId" : "list_8",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The offset of the list",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The limit element per page",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The sort by field",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "The ordering by field",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Map of filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return list of accounting article"
          },
          "400" : {
            "description" : "bad request when article information contains an error"
          }
        }
      },
      "post" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to create an accounting article resource",
        "description" : "create new accounting article",
        "operationId" : "createAccountingArticle",
        "requestBody" : {
          "description" : "the accounting article object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingArticle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the article successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when article information contains an error"
          }
        }
      }
    },
    "/v2/articles/accountingCodeMapping" : {
      "post" : {
        "tags" : [ "AccountingCodeMapping" ],
        "summary" : "This endpoint create accounting code mapping",
        "description" : "Create accounting code mapping",
        "operationId" : "createAccountingCodeMapping",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeMappingInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Accounting code mapping successfully created, and the id is returned in the response"
          },
          "404" : {
            "description" : "Entity not found"
          }
        }
      }
    },
    "/v2/articles/{accountingArticleCode}" : {
      "get" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to find an existing accounting article resource",
        "description" : "fine an existing accounting article",
        "operationId" : "find_12",
        "parameters" : [ {
          "name" : "accountingArticleCode",
          "in" : "path",
          "description" : "accounting article code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the article successfully retrieved"
          },
          "400" : {
            "description" : "bad request when article information contains an error"
          }
        }
      },
      "delete" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to delete an existing accounting article resource",
        "description" : "delete an existing accounting article",
        "operationId" : "delete_5",
        "parameters" : [ {
          "name" : "accountingArticleCode",
          "in" : "path",
          "description" : "accounting article code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the article successfully deleted"
          },
          "400" : {
            "description" : "bad request when article is not found"
          }
        }
      }
    },
    "/v2/articles/products/{productCode}" : {
      "get" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to find accounting article resource with product and list of attributes",
        "description" : "find  an existing accounting article",
        "operationId" : "getAccountingArticles",
        "parameters" : [ {
          "name" : "productCode",
          "in" : "path",
          "description" : "product code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Map of attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return accounting article"
          },
          "400" : {
            "description" : "bad request when article information contains an error"
          }
        }
      }
    },
    "/v2/articles/{id}" : {
      "put" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to update an existing accounting article resource",
        "description" : "update an existing accounting article",
        "operationId" : "updateAccountingArticle",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of Accounting article",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the accounting article object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingArticle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the article successfully updated, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when article information contains an error"
          }
        }
      }
    },
    "/v2/articles/{accountingArticleCode}/accountingCodeMapping" : {
      "put" : {
        "tags" : [ "AccountingCodeMapping" ],
        "summary" : "This endpoint update accounting code mapping",
        "description" : "Update accounting code mapping",
        "operationId" : "updateAccountingCodeMapping",
        "parameters" : [ {
          "name" : "accountingArticleCode",
          "in" : "path",
          "description" : "accounting article code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountingCodeMappingInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Accounting code mapping successfully updated, and the id is returned in the response"
          },
          "404" : {
            "description" : "Entity not found"
          }
        }
      }
    },
    "/v2/articleMappingLines" : {
      "post" : {
        "tags" : [ "articleMappingLine" ],
        "summary" : "This endpoint allows to create an article mapping line resource",
        "description" : "create new article mapping line resource",
        "operationId" : "createArticleMappingLine",
        "requestBody" : {
          "description" : "the article mapping line object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArticleMappingLine"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the article mapping line resource successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping line information contains an error"
          }
        }
      }
    },
    "/v2/articleMappingLines/{id}" : {
      "get" : {
        "tags" : [ "articleMappingLine" ],
        "summary" : "This endpoint allows to find an existing article mapping line resource",
        "description" : "find an existing article mapping line resource",
        "operationId" : "findById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the article mapping line",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the article mapping line resource retrieved, and the object is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping line information doesn't exist"
          }
        }
      },
      "put" : {
        "tags" : [ "articleMappingLine" ],
        "summary" : "This endpoint allows to updating an existing article mapping line resource",
        "description" : "update an existing article mapping line resource",
        "operationId" : "updateArticleMappingLine",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the article mapping line",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the article mapping line object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArticleMappingLine"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the article mapping line resource successfully updated, and the object is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping line information contains an error"
          }
        }
      },
      "delete" : {
        "tags" : [ "articleMappingLine" ],
        "summary" : "This endpoint allows to delete an existing article mapping line resource",
        "description" : "delete an existing article mapping line resource",
        "operationId" : "deleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the article mapping line",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the article mapping line resource deleted, and the object is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping line information doesn't exist"
          }
        }
      }
    },
    "/v2/articleMappingLines/find/{code}" : {
      "get" : {
        "tags" : [ "articleMappingLine" ],
        "summary" : "This endpoint allows to find an existing article mapping line resource",
        "description" : "find an existing article mapping line resource",
        "operationId" : "find_13",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the article mapping line",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the article mapping line resource retrieved, and the object is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping line information doesn't exist"
          }
        }
      }
    },
    "/v2/articleMapping" : {
      "post" : {
        "tags" : [ "AccountingArticle" ],
        "summary" : "This endpoint allows to create an article mapping resource",
        "description" : "create new article mapping resource",
        "operationId" : "createArticleMappingLine_1",
        "requestBody" : {
          "description" : "the article mapping object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArticleMapping"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the article mapping resource successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping information contains an error"
          }
        },
        "deprecated" : true
      }
    },
    "/v2/articleMapping/{code}" : {
      "get" : {
        "tags" : [ "articleMapping" ],
        "summary" : "This endpoint allows to find an existing article mapping resource",
        "description" : "find an existing article mapping resource",
        "operationId" : "find_14",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the article mapping",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the article mapping resource retrieved, and the object is returned in the response"
          },
          "400" : {
            "description" : "bad request when article mapping information doesn't exist"
          }
        }
      }
    },
    "/v2/auditDataConfiguration" : {
      "get" : {
        "tags" : [ "AuditDataConfiguration" ],
        "summary" : "This endpoint allows to find list of data auditing configuration resource",
        "description" : "find a list of an existing data auditing configuration",
        "operationId" : "list_9",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The offset of the list",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The limit element per page",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The sort by field",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "The ordering by field",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Map of filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return list of data auditing configuration"
          },
          "400" : {
            "description" : "bad request when data auditing configuration information contains an error"
          }
        }
      },
      "post" : {
        "tags" : [ "AuditDataConfiguration" ],
        "summary" : "This endpoint allows to create data auditing configuration resource",
        "description" : "create new data audit configuration",
        "operationId" : "createAuditDataConfiguration",
        "requestBody" : {
          "description" : "the data audit configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditDataConfigurationDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the data audit configuration successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when data audit configuration information contains an error"
          }
        }
      }
    },
    "/v2/auditDataConfiguration/{entityClass}" : {
      "get" : {
        "tags" : [ "AuditDataConfiguration" ],
        "summary" : "This endpoint allows to find an existing data auditing configuration resource",
        "description" : "find an existing data auditing configuration",
        "operationId" : "find_15",
        "parameters" : [ {
          "name" : "entityClass",
          "in" : "path",
          "description" : "entity class",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the data auditing configuration successfully retrieved"
          },
          "400" : {
            "description" : "bad request when data auditing configuration information contains an error"
          }
        }
      },
      "delete" : {
        "tags" : [ "AuditDataConfiguration" ],
        "summary" : "This endpoint allows to delete an existing data auditing configuration resource",
        "description" : "delete an existing data auditing configuration",
        "operationId" : "delete_6",
        "parameters" : [ {
          "name" : "entityClass",
          "in" : "path",
          "description" : "entity class",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the data auditing configuration successfully deleted"
          },
          "400" : {
            "description" : "bad request when data auditing configuration is not found"
          }
        }
      }
    },
    "/v2/auditDataConfiguration/{id}" : {
      "put" : {
        "tags" : [ "AuditDataConfiguration" ],
        "summary" : "This endpoint allows to update an existing data auditing configuration resource",
        "description" : "update an existing data auditing configuration",
        "operationId" : "updateAuditDataConfiguration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of data auditing configuration",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the data auditing configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditDataConfigurationDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the data auditing configuration successfully updated, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when data auditing configuration information contains an error"
          }
        }
      }
    },
    "/v2/auditDataLog" : {
      "get" : {
        "tags" : [ "AuditDataLog" ],
        "summary" : "This endpoint allows to find a list of audit data logs",
        "description" : "find audit data logs",
        "operationId" : "list_10",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The offset of the list",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The limit element per page",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The sort by field",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "The ordering by field",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Map of filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the data auditing logs successfully retrieved"
          },
          "400" : {
            "description" : "bad request when data auditing log information contains an error"
          }
        }
      }
    },
    "/v2/auditDataLog/{entityClass}/{entityId}" : {
      "get" : {
        "tags" : [ "AuditDataLog" ],
        "summary" : "This endpoint allows to find audit data logs for a given entity",
        "description" : "find audit data logs for a given entity",
        "operationId" : "listByEntity",
        "parameters" : [ {
          "name" : "entityClass",
          "in" : "path",
          "description" : "entity class",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityId",
          "in" : "path",
          "description" : "entity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "limit to field change",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the data auditing logs successfully retrieved"
          },
          "400" : {
            "description" : "bad request when data auditing log information contains an error"
          }
        }
      }
    },
    "/v2/jobs/BatchEntity/{id}/cancel" : {
      "put" : {
        "tags" : [ "BatchEntity" ],
        "summary" : "This endpoint allows to cancel an existing batch entity resource",
        "description" : "cancel an existing batch entity",
        "operationId" : "cancel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : " batch entity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the batch entity successfully canceled"
          },
          "403" : {
            "description" : "bad request, batch entity is not eligible for update"
          },
          "404" : {
            "description" : "bad request, batch entity is not found"
          }
        }
      }
    },
    "/v2/jobs/BatchEntity" : {
      "post" : {
        "tags" : [ "BatchEntity" ],
        "summary" : "This endpoint allows to create an batch entity resource",
        "description" : "create new batch entity",
        "operationId" : "create_25",
        "requestBody" : {
          "description" : "the batch entity object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchEntity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the batch entity successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when batch entity information contains an error"
          }
        }
      }
    },
    "/v2/jobs/BatchEntity/{id}" : {
      "put" : {
        "tags" : [ "BatchEntity" ],
        "summary" : "This endpoint allows to update an existing batch entity resource",
        "description" : "update an existing batch entity",
        "operationId" : "update_25",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of batch entity",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the batch entity object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchEntity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the batch entity successfully updated, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when batch entity information contains an error"
          }
        }
      },
      "delete" : {
        "tags" : [ "BatchEntity" ],
        "summary" : "This endpoint allows to delete an existing batch entity resource",
        "description" : "delete an existing batch entity",
        "operationId" : "delete_7",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "batch entity code",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the batch entity successfully deleted"
          },
          "400" : {
            "description" : "bad request when batch entity is not found"
          }
        }
      }
    },
    "/v2/billing/billingAccounts/{billingAccountId}/discountPlanInstances" : {
      "get" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Return an discount plan instance",
        "description" : "Returns the discount plan instance data",
        "operationId" : "getDiscountPlanInstances",
        "parameters" : [ {
          "name" : "billingAccountId",
          "in" : "path",
          "description" : "id of the billing Account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the searched discount Plan",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "404" : {
            "description" : "Discount plan instance not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "This endpoint allows to instantiate a discount plan instance resource",
        "description" : "Instantiate new discount plan Instance",
        "operationId" : "create_26",
        "parameters" : [ {
          "name" : "billingAccountId",
          "in" : "path",
          "description" : "id of the billing Account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the entity successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when entity information contains an error"
          }
        }
      }
    },
    "/v2/billing/subscriptions/{subscriptionId}/discountPlanInstances" : {
      "get" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Return discount plan instances by subscription",
        "description" : "Returns the discount plan instances data by subscription",
        "operationId" : "getDiscountPlanInstancesBySubscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "id of the subscription",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the searched discount Plan",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "404" : {
            "description" : "Discount plan instance not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "This endpoint allows to instantiate a discount plan instance resource for a subscription",
        "description" : "Instantiate new discount plan Instance for a subscription",
        "operationId" : "createBySubscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "id of the subscription",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the entity successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when entity information contains an error"
          }
        }
      }
    },
    "/v2/billing/billingAccounts/{billingAccountId}/discountPlanInstances/{id}" : {
      "get" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Return an discount plan instance",
        "description" : "Returns the discount plan instance data",
        "operationId" : "getDiscountPlanInstance",
        "parameters" : [ {
          "name" : "billingAccountId",
          "in" : "path",
          "description" : "id of the billing Account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "id of the discount plan instance",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched discount Plan",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "404" : {
            "description" : "Discount plan instance not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Update a resource by giving it's Id",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "update_26",
        "parameters" : [ {
          "name" : "billingAccountId",
          "in" : "path",
          "description" : "The billing account id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      },
      "delete" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Delete a resource by giving it's Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to delete",
        "operationId" : "delete_8",
        "parameters" : [ {
          "name" : "billingAccountId",
          "in" : "path",
          "description" : "The billing account id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/billing/subscriptions/{subscriptionId}/discountPlanInstances/{id}" : {
      "get" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Return an discount plan instance by subscription",
        "description" : "Returns the discount plan instance data by subscription",
        "operationId" : "getDiscountPlanInstanceBySubscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "id of the subscription",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "id of the discount plan instance",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched discount Plan",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "404" : {
            "description" : "Discount plan instance not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Update a resource by giving it's Id",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "updateBySubscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The subscription id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      },
      "delete" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Delete a resource by giving it's Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to delete",
        "operationId" : "deleteBySubscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The subscription id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/billing/billingAccounts/{billingAccountId}/discountPlanInstances/{id}/expiration" : {
      "put" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Expire a discount plan Instance",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "expire",
        "parameters" : [ {
          "name" : "billingAccountId",
          "in" : "path",
          "description" : "The billing account id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully expired"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/billing/subscriptions/{subscriptionId}/discountPlanInstances/{id}/expiration" : {
      "put" : {
        "tags" : [ "Discount Plan instances" ],
        "summary" : "Expire a discount plan Instance",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "expireBySubscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The subscription id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully expired"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/generalSettings" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "update e-invoicing settings",
        "description" : "only one setting is set per instance e-invoicing setting",
        "operationId" : "updateEinvoiceSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EinvoiceSetting"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "the e-invoice is updated"
          },
          "200" : {
            "description" : "create a new e-invoicing setting if not exist"
          },
          "400" : {
            "description" : "The job doesn't exist for InvoicingJob/XMLGenerationJob/PDFGenerationJob/UBLGenerationJob",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoiceLines/{id}/taxes" : {
      "get" : {
        "tags" : [ "InvoiceLines" ],
        "summary" : "Return invoice line tax details",
        "description" : "Return invoice line tax details",
        "operationId" : "getTaxDetails",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice line id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tax details successfully returned"
          },
          "404" : {
            "description" : "Invoice line not found"
          }
        }
      }
    },
    "/v2/billing/invoiceLines/markForAdjustment" : {
      "post" : {
        "summary" : "This API will allow mark adjustment for invoice lines",
        "description" : "This API will allow mark adjustment for invoice lines.<br>",
        "operationId" : "markForAdjustment",
        "requestBody" : {
          "description" : "InvoiceLines to mark for adjustment",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesToMarkAdjustment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Adjustment successfully created"
          },
          "403" : {
            "description" : "Only NOT_ADJUSTED invoice lines can be marked TO_ADJUST"
          },
          "500" : {
            "description" : "Error marking for adjustment"
          }
        }
      }
    },
    "/v2/billing/invoiceLines/unmarkForAdjustment" : {
      "post" : {
        "summary" : "This API will allow creating adjustment based on an existing validated invoice.",
        "description" : "This API will allow creating adjustment based on an existing validated invoice.<br>",
        "operationId" : "unmarkForAdjustment",
        "requestBody" : {
          "description" : "InvoiceLines to unmark for adjustment",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesToMarkAdjustment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Adjustment successfully created"
          },
          "403" : {
            "description" : "Only invoice lines marked TO_ADJUST can be unmarked as NOT_ADJUSTED"
          },
          "500" : {
            "description" : "Error marking for adjustment"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/invoiceLines" : {
      "post" : {
        "summary" : "Create invoice lines",
        "description" : "Create invoice lines",
        "operationId" : "addInvoiceLines",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice lines to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice lines successfully created"
          },
          "403" : {
            "description" : "error when creating invoice lines"
          }
        }
      },
      "delete" : {
        "summary" : "Remove invoice lines",
        "description" : "Remove invoice line",
        "operationId" : "removeInvoiceLines",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice lines to remove",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesToRemove"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "invoice lines successfully removed"
          },
          "403" : {
            "description" : "error when removing invoice lines"
          }
        }
      }
    },
    "/v2/billing/invoices/addSubTotals" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Add Sub Totals",
        "description" : "Create a new sub totals",
        "operationId" : "addSubTotals",
        "requestBody" : {
          "description" : "the add SubTotals",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubTotalsDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the sub totals successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when sub totals information contains an error"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/calculation" : {
      "put" : {
        "summary" : "calculate invoice",
        "description" : "calculate invoice",
        "operationId" : "calculateInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice successfully calculated"
          },
          "403" : {
            "description" : "error when calculating invoice"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/calculateSubTotals" : {
      "post" : {
        "summary" : "Calucate subtotals",
        "description" : "calculate sub total of invoice linked to invoice type",
        "operationId" : "calculateSubTotals",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "display calculate subtotals"
          },
          "404" : {
            "description" : "The invoice entity doesn't exist"
          },
          "400" : {
            "description" : "Action is failed"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/cancellation" : {
      "put" : {
        "summary" : "Cancel invoice",
        "description" : "Cancel invoice",
        "operationId" : "cancelInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "ratedTransactionAction",
          "in" : "query",
          "description" : "This field allow to choose how to process rated transactions after invoice concellation",
          "schema" : {
            "type" : "string",
            "enum" : [ "REOPEN", "CANCEL" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice successfully canceled"
          },
          "403" : {
            "description" : "error when canceling invoice"
          }
        }
      }
    },
    "/v2/billing/invoices" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Return a list of invoices",
        "description" : "Returns a list of invoices with pagination feature or non integers will simulate API error conditions",
        "operationId" : "getInvoices",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The offset of the list",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The limit per page",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The sort by field",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "The order by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "list of invoices",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back.",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoices"
                }
              }
            }
          },
          "304" : {
            "description" : "Lists invoices with filtering, sorting, paging."
          },
          "400" : {
            "description" : "Invalid parameters supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Create a new invoice",
        "description" : "Create a new invoice",
        "operationId" : "create_27",
        "requestBody" : {
          "description" : "the Invoice input object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Invoice is successfully created"
          },
          "400" : {
            "description" : "bad request when Invoice information contains an error"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/createAdjustment" : {
      "post" : {
        "summary" : "This API will allow creating adjustment based on an existing validated invoice.",
        "description" : "This API will allow creating adjustment based on an existing validated invoice.<br>Either can we choose specific invoice lines from a specific invoice or the whole invoice to be used on the newly created adjustment.",
        "operationId" : "createAdjustment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "InvoiceLines to replicate",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesToReplicate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Adjustment successfully created"
          },
          "403" : {
            "description" : "IThe following parameters are required or contain invalid values: globalAdjustment"
          },
          "500" : {
            "description" : "Error when creating adjustment"
          }
        }
      }
    },
    "/v2/billing/invoices/basicInvoices" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Create a new basic invoice",
        "description" : "Create a new advanced payment invoice",
        "operationId" : "createBasicInvoices",
        "requestBody" : {
          "description" : "the advanced Payment Invoice object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BasicInvoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the basicInvoice successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when basicInvoice information contains an error"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/deletePdfFile" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Delete existing invoice PDF file",
        "description" : "Delete existing invoice  PDF from the invoice ",
        "operationId" : "deleteInvoicePdf",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the PDF file successfully deleted"
          },
          "404" : {
            "description" : "The PDF file does not exist on the invoice"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/deleteXmlFile" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Delete existing invoice XML file",
        "description" : "Delete existing invoice  XML from the invoice ",
        "operationId" : "deleteInvoiceXml",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the XML file successfully deleted"
          },
          "404" : {
            "description" : "The PDF file does not exist on the invoice"
          }
        }
      }
    },
    "/v2/billing/invoices/deleteSubTotals" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Add Sub Totals",
        "description" : "delete a sub totals",
        "operationId" : "deleteSubTotals",
        "requestBody" : {
          "description" : "the add SubTotals",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceSubTotalsDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the sub totals successfully deleted"
          },
          "400" : {
            "description" : "bad request when sub totals is not found"
          }
        }
      }
    },
    "/v2/billing/invoices/{invoicId}/duplication" : {
      "post" : {
        "summary" : "this endpoint allow to duplicate invoice",
        "description" : "duplicate invoice with the new status",
        "operationId" : "duplicate_1",
        "parameters" : [ {
          "name" : "invoicId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "will return new invoice duplicated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoicesDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/invoiceLines/duplicate" : {
      "post" : {
        "summary" : "Duplicate invoice lines",
        "description" : "Duplicate invoice lines",
        "operationId" : "duplicateInvoiceLines",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice lines to remove",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesToDuplicate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "invoice lines successfully duplicated"
          },
          "403" : {
            "description" : "error when duplicating invoice lines"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/pdf" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Returns the invoice PDF",
        "description" : "Returns the invoice pdf if exists. feberation may be forced using 'generateIfMissing' parameter",
        "operationId" : "fetchPdfInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "generateIfMissing",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the invoice pdf",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/find/{invoiceNumber}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Return an invoice",
        "description" : "Returns the invoice data",
        "operationId" : "find_16",
        "parameters" : [ {
          "name" : "invoiceNumber",
          "in" : "path",
          "description" : "invoice Number of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched invoice",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/generate" : {
      "post" : {
        "summary" : " Launch all the invoicing process for a given billingAccount",
        "description" : " Launch all the invoicing process for a given billingAccount, that's mean.  <ul> <li>Create rated transactions <li>Create an exceptional billingRun with given dates <li>Validate the pre-invoicing report <li>Validate the post-invoicing report <li>Validate the BillingRun  </ul>",
        "operationId" : "generate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateInvoiceInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "invoice response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{id}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Return an invoice",
        "description" : "Returns the invoice data",
        "operationId" : "getInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched invoice",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "Update an invoice",
        "description" : "Update an invoice",
        "operationId" : "update_27",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the Invoice object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Invoice is successfully created"
          },
          "400" : {
            "description" : "bad request when Invoice information contains an error"
          }
        }
      }
    },
    "/v2/billing/invoices/{invoiceType}/{invoiceNumber}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Return an invoice",
        "description" : "Returns the invoice data",
        "operationId" : "getInvoice_1",
        "parameters" : [ {
          "name" : "invoiceType",
          "in" : "path",
          "description" : "type of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "path",
          "description" : "invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched invoice",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{invoiceType}/{invoiceNumber}/matchedOperations" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Get all operations matched to the given invoice",
        "description" : "Get all operations matched to the given invoice",
        "operationId" : "getInvoiceMatchedOperations",
        "parameters" : [ {
          "name" : "invoiceType",
          "in" : "path",
          "description" : "type of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "path",
          "description" : "invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched invoice",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/quarantine" : {
      "put" : {
        "summary" : "Quarantine invoice",
        "description" : "Quarantine invoice",
        "operationId" : "quarantineInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Quarantine billing run",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuarantineBillingRunDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "invoice successfully quarantined"
          },
          "403" : {
            "description" : "Only possible for invoices in DRAFT/REJECTED/SUSPECT statuses"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/rebuild" : {
      "put" : {
        "summary" : "Rebuild invoice",
        "description" : "Rebuild invoice",
        "operationId" : "rebuildInvoiceLine",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice successfully rebuilded"
          },
          "403" : {
            "description" : "error when rebuilding invoice"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/refreshRate" : {
      "put" : {
        "summary" : "Refresh rate",
        "description" : "Refresh invoice exchange rate",
        "operationId" : "refreshRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Exchange rate successfully refreshed"
          },
          "403" : {
            "description" : "Refresh rate only allowed on invoices with status : NEW or DRAFT"
          },
          "404" : {
            "description" : "Invoice not found"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/rejection" : {
      "put" : {
        "summary" : "Reject invoice",
        "description" : "Reject invoice",
        "operationId" : "rejectInvoiceLine",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice reject reason",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectReasonInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "invoice successfully rejected"
          },
          "403" : {
            "description" : "error when rejecting invoice"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/invoiceLines/{lineId}" : {
      "put" : {
        "summary" : "Update invoice line",
        "description" : "Update invoice line",
        "operationId" : "updateInvoiceLine",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "id of the InvoiceLine",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice lines to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLineInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice lines successfully updated"
          },
          "403" : {
            "description" : "error when updating invoice line"
          }
        }
      },
      "delete" : {
        "summary" : "Remove invoice line",
        "description" : "Remove invoice line",
        "operationId" : "removeInvoiceLine",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "id of the InvoiceLine",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice lines to remove",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceLinesToRemove"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "invoice line successfully removed"
          },
          "403" : {
            "description" : "error when removing invoice line"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/setCustomRate" : {
      "put" : {
        "summary" : "Set custom rate",
        "description" : "Set custom rate",
        "operationId" : "setCustomRate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "invoice exchange rate",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceExchangeRateInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the rate is successfully updated"
          },
          "404" : {
            "description" : "The invoice entity doesn't exist"
          },
          "400" : {
            "description" : "Action is failed"
          }
        }
      }
    },
    "/v2/billing/invoices/validated/{id}" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "Update a validated invoice",
        "description" : "Update a validated invoice with a set of changes to apply and return the updated invoice",
        "operationId" : "updateValidateInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the Invoice object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicePatchInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the Invoice is successfully updated"
          },
          "400" : {
            "description" : "bad request when Invoice information contains an error"
          },
          "404" : {
            "description" : "product not found"
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/validation" : {
      "put" : {
        "summary" : "Validate invoice",
        "description" : "Validate invoice",
        "operationId" : "validateInvoiceLine",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the Invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice successfully validated"
          },
          "403" : {
            "description" : "error when validating invoice"
          }
        }
      }
    },
    "/v2/billing/invoices/validation" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "validate a selection of invoices in a billing run",
        "operationId" : "validateInvoices",
        "requestBody" : {
          "description" : "dto contains list for invoices",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateInvoiceDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The selection of invoices is successfully validated"
          },
          "404" : {
            "description" : "The selection of invoices is empty"
          },
          "400" : {
            "description" : "Action is failed"
          }
        }
      }
    },
    "/v2/billing/invoicevalidationrules" : {
      "post" : {
        "tags" : [ "InvoiceValidationRules" ],
        "summary" : "Create invoice validation rule",
        "description" : "Create invoice validation rule",
        "operationId" : "create_28",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationRuleDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "invoice validation rule successfully created"
          },
          "304" : {
            "description" : "error when creating invoice validation rule "
          }
        }
      }
    },
    "/v2/billing/invoicevalidationrules/{id}" : {
      "put" : {
        "tags" : [ "InvoiceValidationRules" ],
        "summary" : "Update invoice validation rule",
        "description" : "Create invoice validation rule",
        "operationId" : "update_28",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the InvoiceValidation Rule",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Validation Rule Dto",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceValidationRuleDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "invoice validation rule successfully updated"
          },
          "304" : {
            "description" : "error when updating invoice validation rule "
          }
        }
      },
      "delete" : {
        "tags" : [ "InvoiceValidationRules" ],
        "summary" : "Delete invoice validation rule",
        "description" : "Delete invoice validation rule",
        "operationId" : "delete_9",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the InvoiceValidation Rule to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "invoice validation rule successfully deleted"
          },
          "304" : {
            "description" : "error when deleting invoice validation rule "
          }
        }
      }
    },
    "/v2/invoices/cancellation" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "summary" : "Cancel list of invoices by filter",
        "operationId" : "cancellation",
        "requestBody" : {
          "description" : "Object contains cancellation information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCancellationInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Cancel list successfully processed"
          }
        }
      }
    },
    "/v2/billing/invoicing/{billingRunId}/advanceStatus" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : "Advance the billing run status",
        "description" : "Advance the billing run status",
        "operationId" : "advanceStatus",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "executeInvoicingJob",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status changed successfully"
          },
          "409" : {
            "description" : "The status should be either NEW, INVOICE_LINES_CREATED , DRAFT_INVOICES , or REJECTED"
          }
        }
      }
    },
    "/v2/billing/invoicing/{billingRunId}/cancelBillingRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : "cancel the billing run",
        "description" : "Cancel the billing run",
        "operationId" : "cancelBillingRun",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelBillingRunInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The billing canceled successfully"
          },
          "404" : {
            "description" : "The billing run does not exists"
          },
          "409" : {
            "description" : "The billing run cannot be cancelled"
          }
        }
      }
    },
    "/v2/billing/invoicing/{billingRunId}/closeInvoiceLines" : {
      "put" : {
        "tags" : [ "Invoicing" ],
        "summary" : "Set status of billing run to INVOICE_LINES_CREATED while in appending mode",
        "description" : "Set status of billing run to INVOICE_LINES_CREATED, the invoice lines cannot receive new incoming RTs",
        "operationId" : "closeInvoiceLines",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "description" : "The id of billing run to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "executeInvoicingJob",
          "in" : "query",
          "description" : "True to generate invoice immediately, false otherwise",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of billing run is successfully set to INVOICE_LINES_CREATED"
          },
          "403" : {
            "description" : "The billing run must be in status OPEN to be updated"
          },
          "404" : {
            "description" : "The billing run does not exists"
          },
          "409" : {
            "description" : "The status of billing run cannot be updated to INVOICE_LINES_CREATED"
          }
        }
      }
    },
    "/v2/billing/invoicing/exceptionalBillingRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : "Create exceptional billing run",
        "description" : "Create exceptional billing run",
        "operationId" : "createExceptionalBillingRuns",
        "requestBody" : {
          "description" : "Billing run to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExceptionalBillingRun"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "exceptional billing run successfully created"
          },
          "304" : {
            "description" : "error when creating exceptional billing run"
          }
        }
      }
    },
    "/v2/billing/invoicing/{billingRunId}/disableBillingRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : "disable the billing run",
        "description" : "Disable the billing run",
        "operationId" : "disableBillingRun",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The billing disabled successfully"
          },
          "404" : {
            "description" : "The billing run does not exists"
          },
          "409" : {
            "description" : "The billing run cannot be disabled"
          }
        }
      }
    },
    "/v2/billing/invoicing/{billingRunId}/enableBillingRun" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "summary" : "enable the billing run",
        "description" : "enable the billing run",
        "operationId" : "enableBillingRun",
        "parameters" : [ {
          "name" : "billingRunId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The billing enabled successfully"
          },
          "404" : {
            "description" : "The billing run does not exists"
          },
          "409" : {
            "description" : "The billing run cannot be enabled"
          }
        }
      }
    },
    "/v2/mediation/cdrs/chargeCdrList" : {
      "post" : {
        "tags" : [ "CDR" ],
        "summary" : "Accepts a list of CDR lines, parses them, creates EDRs and rates them. . CDR is same format use in mediation job",
        "operationId" : "chargeCdrList",
        "requestBody" : {
          "description" : "the ChargeCdrListInput object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChargeCdrListInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A list of rated wallet operations, preserving the order of incomming CDRs"
          },
          "400" : {
            "description" : "bad request on register CDR list"
          }
        }
      }
    },
    "/v2/mediation/cdrs" : {
      "put" : {
        "summary" : "update multiple for an existing CDRs",
        "description" : "update multiple for an existing CDRs",
        "operationId" : "POST_Mediation_processCdrList_4",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDtoInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the operation ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CdrDtoResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "create manuel CDR",
        "description" : "allow to create a manuel cdr from api",
        "operationId" : "POST_Mediation_processCdrList",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDtoInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " return new created CDR id ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CdrDtoResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "delete  list of  an existing  CDR",
        "description" : "delete multiple for an existing CDRs having a status : OPEN, TO_REPROCESS, ERROR, DISCARDED ",
        "operationId" : "POST_Mediation_processCdrList_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListDtoDeletedInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the operation ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CdrDtoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/mediation/cdrs/{id}" : {
      "put" : {
        "summary" : "update an existing  CDR",
        "description" : "allow to update a existing cdr from api allowed for CDR that hava status : ",
        "operationId" : "POST_Mediation_processCdrList_3",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrDtoInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the operation ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "delete an existing  CDR",
        "description" : "Only CDRs is statuses OPEN, TO_REPROCESS, ERROR, discarded can be deleted.",
        "operationId" : "POST_Mediation_processCdrList_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " status of the operation ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/mediation/cdrs/registerCdrList" : {
      "post" : {
        "tags" : [ "CDR" ],
        "summary" : "Accepts a list of CDR lines, parses them and creates EDRs. CDR accepts the same format as in mediation job",
        "operationId" : "registerCdrList",
        "requestBody" : {
          "description" : "the CdrListInput object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A list of EDRs, preserving the order of incomming CDRs"
          },
          "400" : {
            "description" : "bad request on register CDR list"
          }
        }
      }
    },
    "/v2/mediation/cdrs/reserveCdrList" : {
      "post" : {
        "tags" : [ "CDR" ],
        "summary" : "Accepts a list of CDR lines, parses them, creates EDRs and reserves. CDR accepts the same format as in mediation job",
        "operationId" : "reserveCdrList",
        "requestBody" : {
          "description" : "the CdrListInput object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrListInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A list of EDRs and reservations, preserving the order of incomming CDRs"
          },
          "400" : {
            "description" : "bad request on reserve CDR list"
          }
        }
      }
    },
    "/v2/mediation/cdrs/status" : {
      "put" : {
        "summary" : "update multiple status for an existing CDRs",
        "description" : "update multiple status for an existing CDRs",
        "operationId" : "PUT_Mediation_processCdrList",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CdrStatusListDtoInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " status of the operation ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CdrDtoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/ratedTransaction/{id}/cancellation" : {
      "put" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : "This endpoint allows to cancel an existing ratedTransaction resource",
        "description" : "cancel an existing ratedTransaction",
        "operationId" : "cancel_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : " ratedTransaction id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the ratedTransaction successfully canceled"
          },
          "400" : {
            "description" : "bad request, ratedTransaction is not eligible for update"
          },
          "404" : {
            "description" : "bad request, ratedTransaction is not found"
          }
        }
      }
    },
    "/v2/billing/ratedTransaction/cancellation" : {
      "post" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : "This endpoint allows to cancel list of ratedTransactions using a filter",
        "description" : "cancel an existing ratedTransaction",
        "operationId" : "cancellation_1",
        "requestBody" : {
          "description" : "Cancellation object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancellationInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RatedTransactions successfully canceled"
          }
        }
      }
    },
    "/v2/billing/ratedTransaction" : {
      "post" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : "This endpoint allows to create a ratedTransaction resource",
        "description" : "create new ratedTransaction",
        "operationId" : "createRatedTransaction",
        "requestBody" : {
          "description" : "the ratedTransaction object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RatedTransactionInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the ratedTransaction successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request on ratedTransaction creation"
          }
        }
      }
    },
    "/v2/billing/ratedTransaction/duplication" : {
      "post" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : "duplicate list of rated transaction fron their ids",
        "operationId" : "duplication",
        "requestBody" : {
          "description" : "dto contains list of id for rated transaction",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DuplicateRTDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/billing/ratedTransaction/{code}" : {
      "get" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : "Return a rated transaction",
        "description" : "Returns rated transaction data",
        "operationId" : "find_17",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the Rated transaction",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched RatedTransaction",
            "headers" : {
              "ETag" : {
                "description" : "code that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "RatedTransaction not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/ratedTransaction/{id}" : {
      "put" : {
        "tags" : [ "RatedTransaction" ],
        "summary" : "This endpoint allows to update an existing ratedTransaction resource",
        "description" : "update an existing ratedTransaction",
        "operationId" : "updateRatedTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of ratedTransaction",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "the ratedTransaction object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RatedTransactionInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the ratedTransaction successfully updated, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request, ratedTransaction is not eligible for update"
          },
          "404" : {
            "description" : "bad request, ratedTransaction is not found"
          }
        }
      }
    },
    "/v2/catalog/discountPlans" : {
      "post" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "This endpoint allows to create a discount plan resource",
        "description" : "create new discount plan",
        "operationId" : "create_29",
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the entity successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when entity information contains an error"
          }
        }
      }
    },
    "/v2/catalog/discountPlans/{id}/discountPlanItems" : {
      "get" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Return an discount plan items",
        "description" : "Returns the discount plan items data",
        "operationId" : "getDiscountPlanItems",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the discount plan ",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      },
      "post" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "This endpoint allows to create a discount plan item resource",
        "description" : "create new discount plan",
        "operationId" : "createItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the discount plan ",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the entity successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when entity information contains an error"
          }
        }
      }
    },
    "/v2/catalog/discountPlans/{id}" : {
      "get" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Return an discount plan",
        "description" : "Returns the discount plan data",
        "operationId" : "get",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the discount plan",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched discount Plan",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "404" : {
            "description" : "Discount plan not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Update a resource by giving it's Id",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "update_29",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      },
      "delete" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Delete a resource by giving it's Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to delete",
        "operationId" : "delete_10",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/catalog/discountPlans/{id}/discountPlanItems/{idItem}" : {
      "get" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Return an discount plan",
        "description" : "Returns the discount plan data",
        "operationId" : "getDiscountPlanItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the discount plan ",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "idItem",
          "in" : "path",
          "description" : "id of the discount plan item",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched discount plan item",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "404" : {
            "description" : "Discount plan item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Update a discount plan item resource by giving it's Id",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "updateItem",
        "parameters" : [ {
          "name" : "idItem",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      },
      "delete" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Delete a resource by giving it's Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to delete",
        "operationId" : "deleteItem",
        "parameters" : [ {
          "name" : "idItem",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/catalog/discountPlans/{id}/expiration" : {
      "put" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "Force Expiration the discount plan by giving it's Id",
        "description" : "specify record id, and as body, the list of the fields to update",
        "operationId" : "expire_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/catalog/discountPlans/instanciate" : {
      "post" : {
        "tags" : [ "Discount Plans" ],
        "summary" : "add discount instance to subscription or serviceInstance or billingAccount",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to delete",
        "operationId" : "instanciateDP",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountPlanInstanciateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/catalog/priceManagement/pricePlanMatrixVersions/export" : {
      "post" : {
        "tags" : [ "Price Plan Matrix" ],
        "summary" : "Export price plan matrix versions",
        "description" : "Export price plan matrix versions",
        "operationId" : "exportPricePlanMatrixVersions",
        "requestBody" : {
          "description" : "input data",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The price plan matrix versions successfully loaded"
          },
          "400" : {
            "description" : "Internal error"
          },
          "404" : {
            "description" : "PricePlanMatrixVersion with provided ids does not exists."
          },
          "409" : {
            "description" : "A line having similar values already exists!"
          }
        }
      }
    },
    "/v2/catalog/priceManagement/pricePlanMatrixLines/import" : {
      "post" : {
        "tags" : [ "Import", "Price Plan" ],
        "summary" : "Import grid data in price versions",
        "description" : "Import grid data in price versions",
        "operationId" : "importPricePlanMatrixLines",
        "requestBody" : {
          "description" : "input data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricePlanMLinesDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The price plan line successfully loaded"
          },
          "400" : {
            "description" : "Internal error"
          },
          "404" : {
            "description" : "PricePlanMatrixColumn with code={columnCode} user1 does not exists."
          },
          "409" : {
            "description" : "A line having similar values already exists!"
          }
        }
      }
    },
    "/v2/catalog/priceManagement/pricePlanMatrixVersions/import" : {
      "post" : {
        "tags" : [ "Import", "Price Plan" ],
        "summary" : "Import price plan versions",
        "description" : "This API will import the zip file containing the list of price plan versions",
        "operationId" : "importPricePlanMatrixVersions",
        "requestBody" : {
          "description" : "input data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportPricePlanVersionsDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The price plan versions successfully loaded"
          },
          "400" : {
            "description" : "The following parameters are required or contain invalid values: fileToImport"
          },
          "500" : {
            "description" : "Error occured while importing price plan versions"
          }
        }
      }
    },
    "/v2/catalog/priceManagement/search" : {
      "post" : {
        "summary" : "search price plan using attributes information",
        "description" : "search price plan using attributes information",
        "operationId" : "search_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "list of price plan and meta data information"
          }
        }
      }
    },
    "/v2/pricePlans/{pricePlanMatrixCode}/pricePlanVersions/{pricePlanMatrixVersion}/checkIfUsed" : {
      "get" : {
        "tags" : [ "Price Plan" ],
        "summary" : "Check if the current price plan version is used",
        "description" : "Check if the current price plan version is used in a draft quote, not completed/validated order, or in a subscription",
        "operationId" : "getDiscountPlanItem_1",
        "parameters" : [ {
          "name" : "pricePlanMatrixCode",
          "in" : "path",
          "description" : "code of the price plan ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pricePlanMatrixVersion",
          "in" : "path",
          "description" : "version of the pricePlanVersion",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The price plan version use successfully loaded"
          },
          "400" : {
            "description" : "Internal error"
          },
          "404" : {
            "description" : "Price plan version not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/catalog/productManagement/createProductSimpleOneshot" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to create a new product linked to a one-shot charge",
        "description" : "creation of the product",
        "operationId" : "createProductSimpleOneshot",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimpleOneshotProductDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimpleOneshotProductDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the product successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "the product already existe with the given code"
          }
        }
      }
    },
    "/v2/catalog/productManagement/createProductSimpleRecurrent" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to create a new product linked to a recurrent charge",
        "description" : "creation of the product",
        "operationId" : "createProductSimpleRecurrent",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimpleRecurrentProductDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimpleRecurrentProductDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the product successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "the product already existe with the given code"
          }
        }
      }
    },
    "/v2/catalog/productManagement/createProductSimpleUsage" : {
      "post" : {
        "tags" : [ "Product" ],
        "summary" : "This endpoint allows to create a new product linked to a usage charge",
        "description" : "creation of the product",
        "operationId" : "createProductSimpleUsage",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimpleUsageProductDto"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimpleUsageProductDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the product successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProductDtoResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "the product already existe with the given code"
          }
        }
      }
    },
    "/v2/catalog/{billingAccountCode}/priceList" : {
      "get" : {
        "operationId" : "getPriceLists",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "billingAccountCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/catalog/priceListLine" : {
      "post" : {
        "tags" : [ "Catalog", "Price List" ],
        "summary" : "Create a PriceList Line",
        "description" : "Create a new PriceList Line and link it to a Price List",
        "operationId" : "create_30",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriceListLineDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The price list line has been successfully created"
          },
          "404" : {
            "description" : "Some Linked resources are not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Required parameters to create a PriceList line are missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/catalog/priceListLine/{priceListLineId}" : {
      "put" : {
        "tags" : [ "Catalog", "Price List" ],
        "summary" : "Update a PriceList Line",
        "description" : "Update a new PriceList Line based on its entityID",
        "operationId" : "update_30",
        "parameters" : [ {
          "name" : "priceListLineId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriceListLineDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The price list line has been successfully updated"
          },
          "404" : {
            "description" : "Some Linked resources are not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Required parameters to create a PriceList line are missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Price List" ],
        "summary" : "Delete a PriceList Line",
        "description" : "Delete a PriceList Line based on its EntityID",
        "operationId" : "delete_11",
        "parameters" : [ {
          "name" : "priceListLineId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The price list line has been successfully deleted"
          },
          "404" : {
            "description" : "The PriceList line identified with entityID is not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/catalog/priceList" : {
      "post" : {
        "tags" : [ "PriceList" ],
        "summary" : "Create new PriceList",
        "description" : "Create new Price List",
        "operationId" : "create_31",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriceList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Price List successfully created"
          },
          "400" : {
            "description" : "Price List creation is failed"
          }
        }
      }
    },
    "/v2/catalog/priceList/{priceListCode}" : {
      "put" : {
        "tags" : [ "PriceList" ],
        "summary" : "Update an existing Price List",
        "description" : "Update a Price List",
        "operationId" : "update_31",
        "parameters" : [ {
          "name" : "priceListCode",
          "in" : "path",
          "description" : "Price List code to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriceList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Price List successfully updated"
          },
          "404" : {
            "description" : "Price List successfully updated"
          },
          "400" : {
            "description" : "Price List with given code does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "PriceList" ],
        "summary" : "Delete existing Price List",
        "description" : "Delete Existing Price List",
        "operationId" : "delete_12",
        "parameters" : [ {
          "name" : "priceListCode",
          "in" : "path",
          "description" : "Price List code to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Price List successfully deleted"
          },
          "404" : {
            "description" : "Price List with id in the path doesn't exist"
          }
        }
      }
    },
    "/v2/catalog/priceList/{priceListCode}/duplicate" : {
      "post" : {
        "tags" : [ "PriceList" ],
        "summary" : "Duplicate a PriceList",
        "description" : "Duplicate a Price List",
        "operationId" : "duplicate_2",
        "parameters" : [ {
          "name" : "priceListCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The price List successfully duplicated"
          },
          "404" : {
            "description" : "The price list with 'priceListCode' has not been found"
          },
          "400" : {
            "description" : "Duplicate price list failed"
          }
        }
      }
    },
    "/v2/catalog/priceList/{priceListCode}/status/{newStatus}" : {
      "put" : {
        "tags" : [ "Catalog", "Price List" ],
        "summary" : "Update PriceList status",
        "description" : "Update the price list status identified by the 'priceListCode' parameter",
        "operationId" : "updateStatus_4",
        "parameters" : [ {
          "name" : "priceListCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "newStatus",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "CLOSED", "ARCHIVED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The price list status has been successfully udated"
          },
          "404" : {
            "description" : "The price list with 'priceListCode' has not been found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "400" : {
            "description" : "Cannot activate PriceList without application rules",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/hugeEntity/update" : {
      "put" : {
        "summary" : "Update huge entity",
        "description" : "Update huge entity",
        "operationId" : "POST_HugeEntity_updateHugeEntity",
        "requestBody" : {
          "description" : "Advanced filter of huge entity for updating",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HugeEntity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The is successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
                }
              }
            }
          },
          "202" : {
            "description" : "The modification is received and a batch entity is created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
                }
              }
            }
          },
          "400" : {
            "description" : "Entity class name is missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessException"
                }
              }
            }
          },
          "404" : {
            "description" : "The job instance doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityDoesNotExistsException"
                }
              }
            }
          },
          "412" : {
            "description" : "Fields to update are missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MissingParameterException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/setting/internationalSettings/EmailTemplate/{EmailTemplateCode}" : {
      "get" : {
        "tags" : [ "email", "email_template", "communication" ],
        "summary" : "Get An EmailTemplate",
        "operationId" : "getEmailTemplate",
        "parameters" : [ {
          "name" : "EmailTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the email template successfully returned"
          },
          "404" : {
            "description" : "The EmailTemplateCode does not exist"
          },
          "400" : {
            "description" : "An error happened while getting EmailTemplate"
          }
        }
      },
      "put" : {
        "tags" : [ "email", "email_template", "communication" ],
        "summary" : "Update an EmailTemplate",
        "operationId" : "update_32",
        "parameters" : [ {
          "name" : "EmailTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the email template successfully updated"
          },
          "404" : {
            "description" : "The EmailTemplateCode does not exists"
          },
          "400" : {
            "description" : "An error happened while updating EmailTemplate"
          }
        }
      },
      "post" : {
        "tags" : [ "email", "email_template", "communication" ],
        "summary" : "Create an EmailTemplate",
        "operationId" : "create_32",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the email template successfully created"
          },
          "404" : {
            "description" : "The EmailTemplateCode already exists"
          },
          "400" : {
            "description" : "An error happened while creating EmailTemplate"
          }
        }
      },
      "delete" : {
        "tags" : [ "email", "email_template", "communication" ],
        "summary" : "Delete an EmailTemplate",
        "operationId" : "deleteEmailTemplate",
        "parameters" : [ {
          "name" : "EmailTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the EmailTemplate successfully deleted"
          },
          "404" : {
            "description" : "The EmailTemplate does not exists"
          },
          "400" : {
            "description" : "An error happened while deleting EmailTemplate"
          }
        }
      },
      "patch" : {
        "tags" : [ "email", "email_template", "communication" ],
        "summary" : "Update an EmailTemplate",
        "operationId" : "partialUpdate",
        "parameters" : [ {
          "name" : "EmailTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplatePatchDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the email template successfully updated"
          },
          "404" : {
            "description" : "The EmailTemplateCode does not exists"
          },
          "400" : {
            "description" : "An error happened while updating EmailTemplate"
          }
        }
      }
    },
    "/v2/setting/internationalSettings/SMSTemplate" : {
      "post" : {
        "tags" : [ "sms", "sms_template", "communication" ],
        "summary" : "Create an SMS Template",
        "operationId" : "create_33",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the sms template successfully updated"
          },
          "400" : {
            "description" : "An error happened while creating SMS Template"
          }
        }
      }
    },
    "/v2/setting/internationalSettings/SMSTemplate/{SMSTemplateCode}" : {
      "get" : {
        "tags" : [ "sms", "sms_template", "communication" ],
        "summary" : "Get an SMSTemplate",
        "operationId" : "get_1",
        "parameters" : [ {
          "name" : "SMSTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the sms template successfully returned"
          },
          "404" : {
            "description" : "The SMS Template does not exists"
          },
          "400" : {
            "description" : "An error happened while getting SMSTemplate"
          }
        }
      },
      "put" : {
        "tags" : [ "email", "sms_template", "communication" ],
        "summary" : "Update an SMSTemplate",
        "operationId" : "update_33",
        "parameters" : [ {
          "name" : "SMSTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSTemplateDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the sms template successfully updated"
          },
          "404" : {
            "description" : "The SMS Template does not exists"
          },
          "400" : {
            "description" : "An error happened while updating SMSTemplate"
          }
        }
      },
      "delete" : {
        "tags" : [ "sms", "sms_template", "communication" ],
        "summary" : "Delete an SMSTemplate",
        "operationId" : "delete_13",
        "parameters" : [ {
          "name" : "SMSTemplateCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the sms template successfully deleted"
          },
          "404" : {
            "description" : "The SMS Template does not exists"
          },
          "400" : {
            "description" : "An error happened while deleting SMSTemplate"
          }
        }
      }
    },
    "/v2/commercialOrders/{code}/availableOpenOrders" : {
      "get" : {
        "summary" : "Get available open orders for a commercial order",
        "operationId" : "findAvailableOpenOrders",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Open Orders avaiblable for commercial order"
          }
        }
      }
    },
    "/v2/cpq/contracts/{contractCode}/billingRule" : {
      "post" : {
        "tags" : [ "BillingRule" ],
        "summary" : "Create a billingRule linked to an existing contract",
        "operationId" : "createBillingRule",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingRuleDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the billing rule is successfully added"
          },
          "412" : {
            "description" : "missing required paramter for billingRule.The required params are : contractCode, criteriaEl, InvoicedBACodeEL"
          },
          "404" : {
            "description" : "the contract code does not exist"
          }
        }
      }
    },
    "/v2/cpq/contracts/{contractCode}/billingRule/{id}" : {
      "put" : {
        "tags" : [ "BillingRule" ],
        "summary" : "Update a billingRule linked to an existing contract",
        "operationId" : "updateBillingRule",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BillingRuleDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the billing rule is successfully added"
          },
          "412" : {
            "description" : "missing required paramter for billingRule.The required params are : contractCode, criteriaEl, InvoicedBACodeEL"
          },
          "404" : {
            "description" : "the contract code does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "BillingRule" ],
        "summary" : "Delete a billingRule",
        "operationId" : "deleteBillingRule",
        "parameters" : [ {
          "name" : "contractCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the billing rule is successfully added"
          },
          "412" : {
            "description" : "missing required paramter for billingRule.The required params are : contractCode, criteriaEl, InvoicedBACodeEL"
          },
          "404" : {
            "description" : "the contract code does not exist"
          }
        }
      }
    },
    "/v2/cpq/quotes/{quoteCode}/availableOpenOrders" : {
      "get" : {
        "tags" : [ "Quote management" ],
        "summary" : "Get available open orders for a quote",
        "operationId" : "findAvailableOpenOrders_1",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Open Orders avaiblable for quote"
          }
        }
      }
    },
    "/v2/cpq/quotes/sendByEmail" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "send approved quote by email",
        "operationId" : "sendByEmail",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuoteEmailInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The email has been sent"
          }
        }
      }
    },
    "/v2/account/contactCategory" : {
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : "Create a ContactCategory",
        "operationId" : "create_34",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the contactCategory successfully created"
          },
          "400" : {
            "description" : "An error happened when trying to create a contactCategory"
          }
        }
      }
    },
    "/v2/account/contactCategory/{contactCategoryCode}" : {
      "put" : {
        "tags" : [ "Contact" ],
        "summary" : "Update a ContactCategory",
        "operationId" : "update_34",
        "parameters" : [ {
          "name" : "contactCategoryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the contactCategory successfully created"
          },
          "404" : {
            "description" : "The contactCategoryCode does not exists"
          },
          "400" : {
            "description" : "An error happened when trying to create a contactCategory"
          }
        }
      },
      "delete" : {
        "tags" : [ "Contact" ],
        "summary" : "Delete a ContactCategory",
        "operationId" : "delete_14",
        "parameters" : [ {
          "name" : "contactCategoryCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the contactCategory successfully created"
          },
          "404" : {
            "description" : "The contactCategoryCode does not exists"
          },
          "400" : {
            "description" : "An error happened when trying to create a contactCategory"
          }
        }
      }
    },
    "/v2/customAction/{entityType}/{actionCode}/execution" : {
      "post" : {
        "tags" : [ "custom action" ],
        "summary" : "Execute a custom action",
        "operationId" : "execute_1",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "actionCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Resource"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/customTable/export/{customTableCode}/{fileFormat}" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Create an export Custom Table",
        "description" : "Create an export Custom Table",
        "operationId" : "export",
        "parameters" : [ {
          "name" : "customTableCode",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileFormat",
          "in" : "path",
          "description" : "file format",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "export Custom Table is successfully created"
          },
          "400" : {
            "description" : "fileFormat is incorrect"
          },
          "403" : {
            "description" : "user has not habilitation to create an export Custom Table"
          },
          "404" : {
            "description" : "The custom table code does not exist"
          }
        }
      }
    },
    "/v2/document" : {
      "post" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to create a document and store the associated physical file in disk",
        "description" : "create a new document",
        "operationId" : "createDocument",
        "requestBody" : {
          "description" : "the document object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Document"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the document successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when document information contains an error"
          }
        }
      }
    },
    "/v2/document/{code}/{version}" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to retrieve a document information by code and version document",
        "description" : "retrieve and return an existing document",
        "operationId" : "getDocument_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Get object using code for the last version of the Document",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "The version of the document to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the document successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Document"
                }
              }
            }
          },
          "404" : {
            "description" : "the document with code and version in param does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Document" ],
        "summary" : "Delete a document by providing it's code and version as param",
        "description" : "provide a document code and version for this endpoint, and it will delete the document along with it's related physical file",
        "operationId" : "deleteDocument",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the document to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "The version of the document to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "document successfully deleted"
          },
          "404" : {
            "description" : "the document with code and version in param does not exist"
          }
        }
      }
    },
    "/v2/document/{code}/{version}/file" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to retrieve a document's file using the document code and version",
        "description" : "retrieve and return an existing document file in base64 format",
        "operationId" : "getDocumentFile_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the document's last version file to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "The version of the document to fetch",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the document file successfully retrieved",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "the document file with document code in param does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to update the document file content",
        "description" : "update an existing document file content",
        "operationId" : "updateDocumentFile_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the document's file to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "The version of the document to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "the document object",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the document file content successfully updated"
          },
          "404" : {
            "description" : "the document file with document id in param does not exist"
          },
          "400" : {
            "description" : "bad request when provided file content contains an error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to delete a document's file using the document id",
        "description" : "delete an existing document file from disk",
        "operationId" : "deleteDocumentFile",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the document's file to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "The version of the document to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includingDocument",
          "in" : "query",
          "description" : "a flag to include the document instance in the delete operation",
          "required" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the document file successfully deleted"
          },
          "404" : {
            "description" : "the document file with document id in param does not exist"
          }
        }
      }
    },
    "/v2/document/{code}" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to retrieve a document information by code document",
        "description" : "retrieve and return an existing document",
        "operationId" : "getDocument",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Get object using code for the last version of the Document",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the document successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Document"
                }
              }
            }
          },
          "404" : {
            "description" : "the document with code in param does not exist"
          }
        }
      }
    },
    "/v2/document/{code}/file" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to retrieve a document's file using the document code",
        "description" : "retrieve and return an existing document file in base64 format",
        "operationId" : "getDocumentFile",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the document's last version file to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the document file successfully retrieved",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "the document file with document code in param does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Document" ],
        "summary" : "This endpoint allows to update the document file content",
        "description" : "update an existing document file content",
        "operationId" : "updateDocumentFile",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "The code of the document's file to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the document object",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the document file content successfully updated"
          },
          "404" : {
            "description" : "the document file with document id in param does not exist"
          },
          "400" : {
            "description" : "bad request when provided file content contains an error"
          }
        }
      }
    },
    "/v2/documentCategory" : {
      "post" : {
        "tags" : [ "documentCategory", "file_type" ],
        "summary" : "Create a document category",
        "operationId" : "create_35",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the document category successfully created"
          },
          "400" : {
            "description" : "An error happened when trying to create a document category"
          }
        }
      }
    },
    "/v2/documentCategory/{id}" : {
      "put" : {
        "tags" : [ "documentCategory", "file_type" ],
        "summary" : "Update a document category",
        "operationId" : "update_35",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentCategoryDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the document category successfully created"
          },
          "404" : {
            "description" : "The file  type does not exists"
          },
          "400" : {
            "description" : "An error happened when trying to create a document category"
          }
        }
      },
      "delete" : {
        "tags" : [ "documentCategory", "file_type" ],
        "summary" : "Delete a document category",
        "operationId" : "delete_15",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the document category successfully created"
          },
          "404" : {
            "description" : "The document category does not exists"
          },
          "400" : {
            "description" : "An error happened when trying to create a document category"
          }
        }
      }
    },
    "/v2/dunning/collectionPlanStatus" : {
      "post" : {
        "tags" : [ "Collection Plan Status" ],
        "summary" : "Create new Collection plan status",
        "description" : "Create new collection plan status",
        "operationId" : "create_36",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningCollectionPlanStatus"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "collection plan status successfully created"
          },
          "404" : {
            "description" : "Dunning with the same code exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlanStatus/{id}" : {
      "put" : {
        "tags" : [ "Collection Plan Status" ],
        "summary" : "Update an existing Collection plan status",
        "description" : "Update new collection plan status without its dunning settings",
        "operationId" : "update_36",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningCollectionPlanStatus"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "collection plan status successfully updated"
          },
          "404" : {
            "description" : "Collection with dunning code parameter and status doesn't exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Collection Plan Status" ],
        "summary" : "Delete an existing Collection plan status",
        "description" : "Delete new collection plan status without its dunning settings",
        "operationId" : "delete_16",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "collection plan status successfully deleted"
          },
          "404" : {
            "description" : "Collection with dunning code parameter and status doesn't exist"
          }
        }
      }
    },
    "/v2/dunning/dunningaction" : {
      "post" : {
        "tags" : [ "DunningAction" ],
        "summary" : "Create a new Dunning Action",
        "description" : "Create a new Dunning Action",
        "operationId" : "createDunningAction",
        "requestBody" : {
          "description" : "dunning Action",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Action successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "DunningAction creation is failed"
          }
        }
      }
    },
    "/v2/dunning/dunningaction/{dunningActionId}" : {
      "put" : {
        "tags" : [ "DunningAction" ],
        "summary" : "Update a Dunning Action",
        "description" : "Update a Dunning Action",
        "operationId" : "updateDunningAction",
        "parameters" : [ {
          "name" : "dunningActionId",
          "in" : "path",
          "description" : "dunning Action id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dunning Action",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Action successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "DunningAction creation is failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "DunningAction" ],
        "summary" : "Delete a Dunning Action",
        "description" : "Delete a Dunning Action",
        "operationId" : "deleteDunningAction",
        "parameters" : [ {
          "name" : "dunningActionId",
          "in" : "path",
          "description" : "dunning Action id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Action successfully deleted"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "DunningAction creation is failed"
          }
        }
      }
    },
    "/v2/dunning/dunningaction/{code}" : {
      "get" : {
        "tags" : [ "DunningAction" ],
        "summary" : "Retrieve a Dunning Action by code",
        "description" : "Retrieve a Dunning Action by code",
        "operationId" : "getDunningAction",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "dunning Action code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "success retrieve of dunning action"
          },
          "404" : {
            "description" : "Dunning Action with code in the path doesn't exist"
          },
          "412" : {
            "description" : "Missing parameters"
          }
        }
      }
    },
    "/v2/dunning/dunningAgent" : {
      "post" : {
        "tags" : [ "Dunning Agent" ],
        "summary" : "Create new Dunning Agent",
        "description" : "Create new Dunning Agent",
        "operationId" : "create_37",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningAgentInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Agent successfully created"
          }
        }
      }
    },
    "/v2/dunning/dunningAgent/{dunningSettingsCode}/{agentEmailItem}" : {
      "put" : {
        "tags" : [ "Dunning Agent" ],
        "summary" : "update an existing Dunning Agent",
        "description" : "Update an existing Dunning Agent",
        "operationId" : "update_37",
        "parameters" : [ {
          "name" : "dunningSettingsCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentEmailItem",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningAgentInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Agent successfully updated"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning Agent" ],
        "summary" : "delete an existing Dunning Agent",
        "description" : "Update an existing Dunning Agent",
        "operationId" : "delete_17",
        "parameters" : [ {
          "name" : "dunningSettingsCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentEmailItem",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Agent successfully updated"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/addDunningActionInstance" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Add DunningActionInstance",
        "description" : "Add DunningActionInstance",
        "operationId" : "addDunningActionInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningActionInstanceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Add action success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/addDunningLevelInstance" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Add DunningLevelInstance",
        "description" : "Add DunningLevelInstance",
        "operationId" : "addDunningLevelInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningLevelInstanceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Add action success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/availableDunningPolicies" : {
      "post" : {
        "tags" : [ "CollectionPlan" ],
        "summary" : "List of available dunning policies",
        "description" : "List of available dunning policies",
        "operationId" : "availableDunningPolicies",
        "requestBody" : {
          "description" : "available dunning policies input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AvailablePoliciesInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "List successfully returned"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/checkMassSwitch" : {
      "post" : {
        "tags" : [ "CollectionPlan" ],
        "summary" : "Check eligible collection for switch",
        "description" : "Check eligible collection for switch",
        "operationId" : "checkMassSwitch",
        "requestBody" : {
          "description" : "Collection plans to check",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningMassSwitchInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Check successfully passed"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/executeDunningActionInstance/{actionInstanceId}" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Execute DunningActionInstance",
        "description" : "Execute DunningActionInstance",
        "operationId" : "executeDunningActionInstance",
        "parameters" : [ {
          "name" : "actionInstanceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Execute action success"
          },
          "404" : {
            "description" : "Action instance does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/massPause" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Mass Pause list of Collection plan",
        "description" : "Mass Pause list of collection plan",
        "operationId" : "massPauseCollectionPlan",
        "requestBody" : {
          "description" : "MassPauseDunningCollectionPlan input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MassPauseDunningCollectionPlan"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "list of collection plan successfully paused"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/massStop" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Mass Stop list of Collection plan",
        "description" : "Mass Stop collection plan",
        "operationId" : "massStopCollectionPlan",
        "requestBody" : {
          "description" : "MassStopDunningCollectionPlan input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MassStopDunningCollectionPlan"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "list of collection plan successfully stoped"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/massSwitch" : {
      "post" : {
        "tags" : [ "CollectionPlan" ],
        "summary" : "Mass switch collection plan",
        "description" : "Mass switch collection plan",
        "operationId" : "massSwitchCollectionPlan",
        "requestBody" : {
          "description" : "MassSwitchDunningCollectionPlan input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MassSwitchDunningCollectionPlan"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Mass switch success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/pause/{id}" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Pause Collection plan",
        "description" : "Pause collection plan",
        "operationId" : "pauseCollectionPlan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningCollectionPlanPause"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "collection plan successfully paused"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/removeDunningActionInstance" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Remove DunningActionInstance",
        "description" : "Remove DunningActionInstance",
        "operationId" : "removeDunningActionInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveActionInstanceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Remove action success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/removeDunningLevelInstance" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Remove DunningLevelInstance",
        "description" : "Remove DunningLevelInstance",
        "operationId" : "removeDunningLevelInstance",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveLevelInstanceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Remove action success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/resume/{id}" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Resume Collection plan",
        "description" : "Resume collection plan",
        "operationId" : "resumeCollectionPlan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "collection plan successfully paused"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/stop/{id}" : {
      "post" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Stop Collection plan",
        "description" : "Stop collection plan",
        "operationId" : "stopCollectionPlan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningCollectionPlanStop"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "collection plan successfully stoped"
          },
          "404" : {
            "description" : "Entity does not exits"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/switch/{collectionPlanId}" : {
      "post" : {
        "tags" : [ "CollectionPlan" ],
        "summary" : "Switch collection plan",
        "description" : "Switch collection plan",
        "operationId" : "switchCollectionPlan",
        "parameters" : [ {
          "name" : "collectionPlanId",
          "in" : "path",
          "description" : "Collection plan id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "SwitchDunningCollectionPlan input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SwitchDunningCollectionPlan"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Collection plan successfully switched"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/updateDunningActionInstance/{actionInstanceId}" : {
      "put" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Update DunningActionInstance",
        "description" : "Update DunningActionInstance",
        "operationId" : "updateDunningActionInstance",
        "parameters" : [ {
          "name" : "actionInstanceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningActionInstanceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update action success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/collectionPlan/updateDunningLevelInstance/{levelInstanceId}" : {
      "put" : {
        "tags" : [ "Collection Plan" ],
        "summary" : "Update DunningLevelInstance",
        "description" : "Update DunningLevelInstance",
        "operationId" : "updateDunningLevelInstance",
        "parameters" : [ {
          "name" : "levelInstanceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateLevelInstanceInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Update action success"
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v2/dunning/dunningLevel" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Create new Dunning Level",
        "description" : "Create new dunning level",
        "operationId" : "create_38",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningLevel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning level successfully created"
          },
          "400" : {
            "description" : "dunning level creation is failed"
          }
        }
      }
    },
    "/v2/dunning/dunningLevel/{dunningLevelId}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "Update an existing Dunning Level",
        "description" : "Update a dunning level",
        "operationId" : "update_38",
        "parameters" : [ {
          "name" : "dunningLevelId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningLevel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning level successfully updated"
          },
          "404" : {
            "description" : "dunning level successfully updated"
          },
          "400" : {
            "description" : "dunning level with given code does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning" ],
        "summary" : "Delete existing Dunning level",
        "description" : "Delete Existing dunning level",
        "operationId" : "delete_18",
        "parameters" : [ {
          "name" : "dunningLevelId",
          "in" : "path",
          "description" : "Dunning level id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning level successfully deleted"
          },
          "404" : {
            "description" : "Dunning level with id in the path doesn't exist"
          }
        }
      }
    },
    "/v2/dunning/dunningLevel/{dunningLevelCode}" : {
      "get" : {
        "tags" : [ "Dunning" ],
        "summary" : "Get existing Dunning Level",
        "description" : "Get Existing dunning Level",
        "operationId" : "findByCode_6",
        "parameters" : [ {
          "name" : "dunningLevelCode",
          "in" : "path",
          "description" : "code dunning level",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning level successfully retrivied"
          },
          "404" : {
            "description" : "Dunning level with given code does not exist"
          }
        }
      }
    },
    "/v2/dunning/pauseReason" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Create new Dunning Pause Reason",
        "description" : "Create new Dunning Pause Reason",
        "operationId" : "create_39",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPauseReason"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Pause Reason successfully created"
          },
          "404" : {
            "description" : "Dunning Pause Reason with the same code exist"
          }
        }
      }
    },
    "/v2/dunning/pauseReason/{id}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "Update an existing Dunning Pause Reason",
        "description" : "Update an existing Dunning Pause Reasons",
        "operationId" : "update_39",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Entity's id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPauseReason"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Pause Reasons successfully updated"
          },
          "404" : {
            "description" : "new code for dunning Pause Reasons already exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning" ],
        "summary" : "Delete existing Dunning Pause Reason",
        "description" : "Delete Existing dunning Pause Reasons",
        "operationId" : "delete_19",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of removed dunning Pause Reasons",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Pause Reasons successfully deleted"
          },
          "404" : {
            "description" : "Dunning Pause Reason with id in the path doesn't exist"
          }
        }
      }
    },
    "/v2/dunning/paymentRetry" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Create new Dunning Payment Retry",
        "description" : "Create new Dunning Payment Retry",
        "operationId" : "create_40",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPaymentRetry"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Payment Retry successfully created"
          },
          "404" : {
            "description" : "Dunning Payment Retry with the same code exist"
          }
        }
      }
    },
    "/v2/dunning/paymentRetry/{id}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "Update an existing Dunning Payment Retry",
        "description" : "Update an existing Dunning Payment Retry",
        "operationId" : "update_40",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Entity's id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPaymentRetry"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Payment Retry successfully updated"
          },
          "404" : {
            "description" : "new code for dunning Payment Retry already exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning" ],
        "summary" : "Delete existing Dunning Payment Retry",
        "description" : "Delete Existing dunning Payment Retry",
        "operationId" : "delete_20",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of removed dunning Payment Retry",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Payment Retry successfully deleted"
          },
          "404" : {
            "description" : "Dunning Payment Retry with id in the path doesn't exist"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy/addRules/{dunningPolicyId}" : {
      "post" : {
        "tags" : [ "PolicyRule" ],
        "summary" : "Add policy rule",
        "description" : "Add policy rule",
        "operationId" : "addPolicyRule",
        "parameters" : [ {
          "name" : "dunningPolicyId",
          "in" : "path",
          "description" : "Dunning policy id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Policy rules",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPolicyRules"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Policy rule successfully added"
          },
          "400" : {
            "description" : "Either first policy rule ruleJoint is not null or first policy rule line ruleJoint is not null"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy/archive/{dunningPolicyId}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "Archive dunning policy",
        "description" : "Archive dunning policy",
        "operationId" : "archive",
        "parameters" : [ {
          "name" : "dunningPolicyId",
          "in" : "path",
          "description" : "Dunning policy id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning policy successfully archived"
          },
          "404" : {
            "description" : "Dunning policy does not exist"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Create new Dunning policy",
        "description" : "Create new Dunning policy",
        "operationId" : "create_41",
        "requestBody" : {
          "description" : "Dunning policy to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPolicy"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning policy successfully created"
          },
          "404" : {
            "description" : "Dunning policy does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Dunning level creation is failed"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy/deactivate" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "deactivate dunning policy",
        "description" : "deactivate dunning policy",
        "operationId" : "deactivate",
        "requestBody" : {
          "description" : "Dunning policy ids list",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning policy successfully deactivated"
          },
          "404" : {
            "description" : "Dunning policy does not exist"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy/{dunningPolicyId}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "update Dunning policy",
        "description" : "update Dunning policy",
        "operationId" : "update_41",
        "parameters" : [ {
          "name" : "dunningPolicyId",
          "in" : "path",
          "description" : "Dunning policy id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dunning policy to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningPolicyInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Dunning policy successfully updated"
          },
          "404" : {
            "description" : "Dunning policy does not exits"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning" ],
        "summary" : "delete a dunning policy",
        "description" : "delete dunning policy",
        "operationId" : "delete_21",
        "parameters" : [ {
          "name" : "dunningPolicyId",
          "in" : "path",
          "description" : "Dunning policy id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dunning policy successfully deleted"
          },
          "404" : {
            "description" : "Dunning policy does not exits"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy/{dunningPolicyName}" : {
      "get" : {
        "tags" : [ "Dunning" ],
        "summary" : "Find dunning policy",
        "description" : "Find dunning policy",
        "operationId" : "findByName",
        "parameters" : [ {
          "name" : "dunningPolicyName",
          "in" : "path",
          "description" : "Dunning policy name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dunning policy successfully retrieved"
          },
          "404" : {
            "description" : "Dunning policy does not exits"
          }
        }
      }
    },
    "/v2/dunning/dunningPolicy/policyRule/{policyRuleID}" : {
      "delete" : {
        "tags" : [ "PolicyRule" ],
        "summary" : "Remove policy rule",
        "description" : "Remove policy rule",
        "operationId" : "removePolicyRule",
        "parameters" : [ {
          "name" : "policyRuleID",
          "in" : "path",
          "description" : "Policy rule id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Policy rule successfully removed"
          },
          "404" : {
            "description" : "Policy rule does not exits"
          }
        }
      }
    },
    "/v2/payment/dunning" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Create new Dunning Setting",
        "description" : "Create exceptional billing run",
        "operationId" : "create_42",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning settings successfully created"
          },
          "404" : {
            "description" : "Dunning with the same code exist"
          }
        }
      }
    },
    "/v2/payment/dunning/{dunningId}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "Update an existing Dunning Setting",
        "description" : "Update an existing Dunning settings",
        "operationId" : "update_42",
        "parameters" : [ {
          "name" : "dunningId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning settings successfully updated"
          },
          "404" : {
            "description" : "new code for dunning settings already exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning" ],
        "summary" : "Delete existing Dunning Setting",
        "description" : "Delete Existing dunning settings",
        "operationId" : "delete_22",
        "parameters" : [ {
          "name" : "dunningId",
          "in" : "path",
          "description" : "id of removed dunning settings",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning settings successfully deleted"
          },
          "404" : {
            "description" : "Dunning setting with id in the path doesn't exist"
          }
        }
      }
    },
    "/v2/payment/dunning/{dunningCode}/duplication" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Duplicate an existing Dunning Setting",
        "description" : "Duplicate Existing dunning settings",
        "operationId" : "duplicate_3",
        "parameters" : [ {
          "name" : "dunningCode",
          "in" : "path",
          "description" : "code dunning settings",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning settings successfully retrivied"
          },
          "404" : {
            "description" : "Dunning setting with code in the path doesn't exist"
          }
        }
      }
    },
    "/v2/payment/dunning/{dunningCode}" : {
      "get" : {
        "tags" : [ "Dunning" ],
        "summary" : "Get existing Dunning Setting",
        "description" : "Get Existing dunning settings",
        "operationId" : "findByCode_7",
        "parameters" : [ {
          "name" : "dunningCode",
          "in" : "path",
          "description" : "code dunning settings",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning settings successfully retrivied"
          },
          "404" : {
            "description" : "Dunning setting with code in the path doesn't exist"
          }
        }
      }
    },
    "/v2/dunning/stopReason" : {
      "post" : {
        "tags" : [ "Dunning" ],
        "summary" : "Create new Dunning Stop Reason",
        "description" : "Create new Dunning Stop Reason",
        "operationId" : "create_43",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningStopReason"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Stop Reason successfully created"
          },
          "404" : {
            "description" : "Dunning Stop Reason with the same code exist"
          }
        }
      }
    },
    "/v2/dunning/stopReason/{id}" : {
      "put" : {
        "tags" : [ "Dunning" ],
        "summary" : "Update an existing Dunning Stop Reason",
        "description" : "Update an existing Dunning Stop Reasons",
        "operationId" : "update_43",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Entity's id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningStopReason"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Stop Reasons successfully updated"
          },
          "404" : {
            "description" : "new code for dunning Stop Reasons already exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dunning" ],
        "summary" : "Delete existing Dunning Stop Reason",
        "description" : "Delete Existing dunning Stop Reasons",
        "operationId" : "delete_23",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of removed dunning Stop Reasons",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Stop Reasons successfully deleted"
          },
          "404" : {
            "description" : "Dunning Stop Reason with id in the path doesn't exist"
          }
        }
      }
    },
    "/v2/dunning/dunningtemplate" : {
      "post" : {
        "tags" : [ "DunningTemplate" ],
        "summary" : "Create a new Dunning Template",
        "description" : "Create a new Dunning Template",
        "operationId" : "createDunningTemplate",
        "requestBody" : {
          "description" : "dunning Template",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningTemplate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Template successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Dunning Template creation failed"
          }
        }
      }
    },
    "/v2/dunning/dunningtemplate/{dunningTemplateId}" : {
      "put" : {
        "tags" : [ "DunningTemplate" ],
        "summary" : "update a Dunning Template",
        "description" : "update a Dunning Template",
        "operationId" : "updateDunningTemplate",
        "parameters" : [ {
          "name" : "dunningTemplateId",
          "in" : "path",
          "description" : "dunning Template id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dunning Template",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DunningTemplate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "dunning Template successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Dunning Template update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "DunningTemplate" ],
        "summary" : "Delete a Dunning Template",
        "description" : "Delete a Dunning Template",
        "operationId" : "deleteDunningTemplate",
        "parameters" : [ {
          "name" : "dunningTemplateId",
          "in" : "path",
          "description" : "dunning Template id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Template successfully deleted"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Dunning Template deletion failed"
          }
        }
      }
    },
    "/v2/dunning/dunningtemplate/{dunningTemplateId}/duplication" : {
      "post" : {
        "tags" : [ "DunningTemplate" ],
        "summary" : "duplicate a Dunning Template",
        "description" : "duplicate a Dunning Template",
        "operationId" : "duplicateDunningTemplate",
        "parameters" : [ {
          "name" : "dunningTemplateId",
          "in" : "path",
          "description" : "dunning Template id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dunning Template successfully duplicated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Dunning Template duplication failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/isoIcd" : {
      "post" : {
        "summary" : "Create new or update an existing isoIcd  ",
        "description" : " Create new or update an existing isoIcd  ",
        "operationId" : "createIsoIcd",
        "requestBody" : {
          "description" : "isoIcd",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IsoIcd"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "IsoIcd successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "IsoIcd create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidAllowanceCode" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidAllowanceCode",
        "description" : " Create new or update an existing UntdidAllowanceCode",
        "operationId" : "createUntdidAllowanceCode",
        "requestBody" : {
          "description" : "untdidAllowanceCode",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidAllowanceCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidAllowanceCode successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidAllowanceCode create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidInvoiceCodeType" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidInvoiceCodeType",
        "description" : " Create new or update an existing UntdidInvoiceCodeType",
        "operationId" : "createUntdidInvoiceCodeType",
        "requestBody" : {
          "description" : "untdidInvoiceCodeType",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidInvoiceCodeType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidInvoiceCodeType successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidInvoiceCodeType create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidInvoiceSubjectCode" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidInvoiceSubjectCode",
        "description" : " Create new or update an existing UntdidInvoiceSubjectCode",
        "operationId" : "createUntdidInvoiceSubjectCode",
        "requestBody" : {
          "description" : "untdidInvoiceSubjectCode",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidInvoiceSubjectCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidInvoiceSubjectCode successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidInvoiceSubjectCode create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidPaymentMeans" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidPaymentMeans",
        "description" : " Create new or update an existing UntdidPaymentMeans",
        "operationId" : "createUntdidPaymentMeans",
        "requestBody" : {
          "description" : "untdidPaymentMeans",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidPaymentMeans"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidPaymentMeans successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidPaymentMeans create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidTaxationCategory" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidTaxationCategory",
        "description" : " Create new or update an existing UntdidTaxationCategory",
        "operationId" : "createUntdidTaxationCategory",
        "requestBody" : {
          "description" : "untdidTaxationCategory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidTaxationCategory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidTaxationCategory successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidTaxationCategory create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidVatPaymentOption" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidVatPaymentOption",
        "description" : " Create new or update an existing UntdidVatPaymentOption",
        "operationId" : "createUntdidVatPaymentOption",
        "requestBody" : {
          "description" : "untdidVatPaymentOption",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidVatPaymentOption"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidVatPaymentOption successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidVatPaymentOption create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidVatex" : {
      "post" : {
        "summary" : "Create new or update an existing UntdidVatex",
        "description" : " Create new or update an existing UntdidVatex",
        "operationId" : "createUntdidVatex",
        "requestBody" : {
          "description" : "untdidVatex",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidVatex"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidVatex successfully created"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidVatex create failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/isoIcd/{isoIcdId}" : {
      "put" : {
        "tags" : [ "IsoIcd" ],
        "summary" : "Update an IsoIcd",
        "description" : "Update an IsoIcd",
        "operationId" : "updateIsoIcd",
        "parameters" : [ {
          "name" : "isoIcdId",
          "in" : "path",
          "description" : "IsoIcd id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "IsoIcd",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IsoIcd"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "IsoIcd successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "IsoIcd update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "IsoIcd" ],
        "summary" : "Delete an IsoIcd",
        "description" : "Delete an IsoIcd",
        "operationId" : "deleteIsoIcd",
        "parameters" : [ {
          "name" : "isoIcdId",
          "in" : "path",
          "description" : "IsoIcd id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "IsoIcd successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "IsoIcd update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidAllowanceCode/{untdidAllowanceCodeId}" : {
      "put" : {
        "tags" : [ "UntdidAllowanceCode" ],
        "summary" : "Update an UntdidAllowanceCode",
        "description" : "Update an UntdidAllowanceCode",
        "operationId" : "updateUntdidAllowanceCode",
        "parameters" : [ {
          "name" : "untdidAllowanceCodeId",
          "in" : "path",
          "description" : "UntdidAllowanceCode id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidAllowanceCode",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidAllowanceCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidAllowanceCode successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidAllowanceCode update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidAllowanceCode" ],
        "summary" : "Delete an UntdidAllowanceCode",
        "description" : "Delete an UntdidAllowanceCode",
        "operationId" : "deleteUntdidAllowanceCode",
        "parameters" : [ {
          "name" : "untdidAllowanceCodeId",
          "in" : "path",
          "description" : "UntdidAllowanceCode id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidAllowanceCode successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidAllowanceCode update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidInvoiceCodeType/{untdidInvoiceCodeTypeId}" : {
      "put" : {
        "tags" : [ "UntdidInvoiceCodeType" ],
        "summary" : "Update an UntdidInvoiceCodeType",
        "description" : "Update an UntdidInvoiceCodeType",
        "operationId" : "updateUntdidInvoiceCodeType",
        "parameters" : [ {
          "name" : "untdidInvoiceCodeTypeId",
          "in" : "path",
          "description" : "UntdidInvoiceCodeType id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidInvoiceCodeType",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidInvoiceCodeType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidInvoiceCodeType successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidInvoiceCodeType update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidInvoiceCodeType" ],
        "summary" : "Delete an UntdidInvoiceCodeType",
        "description" : "Delete an UntdidInvoiceCodeType",
        "operationId" : "deleteUntdidInvoiceCodeType",
        "parameters" : [ {
          "name" : "untdidInvoiceCodeTypeId",
          "in" : "path",
          "description" : "UntdidInvoiceCodeType id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidInvoiceCodeType successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidInvoiceCodeType update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidInvoiceSubjectCode/{untdidInvoiceSubjectCodeId}" : {
      "put" : {
        "tags" : [ "UntdidInvoiceSubjectCode" ],
        "summary" : "Update an UntdidInvoiceSubjectCode",
        "description" : "Update an UntdidInvoiceSubjectCode",
        "operationId" : "updateUntdidInvoiceSubjectCode",
        "parameters" : [ {
          "name" : "untdidInvoiceSubjectCodeId",
          "in" : "path",
          "description" : "UntdidInvoiceSubjectCode id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidInvoiceSubjectCode",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidInvoiceSubjectCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidInvoiceSubjectCode successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidInvoiceSubjectCode update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidInvoiceSubjectCode" ],
        "summary" : "Delete an UntdidInvoiceSubjectCode",
        "description" : "Delete an UntdidInvoiceSubjectCode",
        "operationId" : "deleteUntdidInvoiceSubjectCode",
        "parameters" : [ {
          "name" : "untdidInvoiceSubjectCodeId",
          "in" : "path",
          "description" : "UntdidInvoiceSubjectCode id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidInvoiceSubjectCode successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidInvoiceSubjectCode update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidPaymentMeans/{untdidPaymentMeansId}" : {
      "put" : {
        "tags" : [ "UntdidPaymentMeans" ],
        "summary" : "Update an UntdidPaymentMeans",
        "description" : "Update an UntdidPaymentMeans",
        "operationId" : "updateUntdidPaymentMeans",
        "parameters" : [ {
          "name" : "untdidPaymentMeansId",
          "in" : "path",
          "description" : "UntdidPaymentMeans id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidPaymentMeans",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidPaymentMeans"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidPaymentMeans successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidPaymentMeans update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidPaymentMeans" ],
        "summary" : "Delete an UntdidPaymentMeans",
        "description" : "Delete an UntdidPaymentMeans",
        "operationId" : "deleteUntdidPaymentMeans",
        "parameters" : [ {
          "name" : "untdidPaymentMeansId",
          "in" : "path",
          "description" : "UntdidPaymentMeans id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidPaymentMeans successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidPaymentMeans update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidTaxationCategory/{untdidTaxationCategoryId}" : {
      "put" : {
        "tags" : [ "UntdidTaxationCategory" ],
        "summary" : "Update an UntdidTaxationCategory",
        "description" : "Update an UntdidTaxationCategory",
        "operationId" : "updateUntdidTaxationCategory",
        "parameters" : [ {
          "name" : "untdidTaxationCategoryId",
          "in" : "path",
          "description" : "UntdidTaxationCategory id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidTaxationCategory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidTaxationCategory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidTaxationCategory successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidTaxationCategory update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidTaxationCategory" ],
        "summary" : "Delete an UntdidTaxationCategory",
        "description" : "Delete an UntdidTaxationCategory",
        "operationId" : "deleteUntdidTaxationCategory",
        "parameters" : [ {
          "name" : "untdidTaxationCategoryId",
          "in" : "path",
          "description" : "UntdidTaxationCategory id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidTaxationCategory successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidTaxationCategory update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidVatPaymentOption/{untdidVatPaymentOptionId}" : {
      "put" : {
        "tags" : [ "UntdidVatPaymentOption" ],
        "summary" : "Update an UntdidVatPaymentOption",
        "description" : "Update an UntdidVatPaymentOption",
        "operationId" : "updateUntdidVatPaymentOption",
        "parameters" : [ {
          "name" : "untdidVatPaymentOptionId",
          "in" : "path",
          "description" : "UntdidVatPaymentOption id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidVatPaymentOption",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidVatPaymentOption"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidVatPaymentOption successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidVatPaymentOption update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidVatPaymentOption" ],
        "summary" : "Delete an UntdidVatPaymentOption",
        "description" : "Delete an UntdidVatPaymentOption",
        "operationId" : "deleteUntdidVatPaymentOption",
        "parameters" : [ {
          "name" : "untdidVatPaymentOptionId",
          "in" : "path",
          "description" : "UntdidVatPaymentOption id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidVatPaymentOption successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidVatPaymentOption update failed"
          }
        }
      }
    },
    "/v2/electronicInvoicing/untdidVatex/{untdidVatexId}" : {
      "put" : {
        "tags" : [ "UntdidVatex" ],
        "summary" : "Update an UntdidVatex",
        "description" : "Update an UntdidVatex",
        "operationId" : "updateUntdidVatex",
        "parameters" : [ {
          "name" : "untdidVatexId",
          "in" : "path",
          "description" : "UntdidVatex id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "UntdidVatex",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UntdidVatex"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "UntdidVatex successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidVatex update failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "UntdidVatex" ],
        "summary" : "Delete an UntdidVatex",
        "description" : "Delete an UntdidVatex",
        "operationId" : "deleteUntdidVatex",
        "parameters" : [ {
          "name" : "untdidVatexId",
          "in" : "path",
          "description" : "UntdidVatex id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UntdidVatex successfully updated"
          },
          "404" : {
            "description" : "a related entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "UntdidVatex update failed"
          }
        }
      }
    },
    "/v2/documents/{operator}/signatureRequest/{signatureRequestId}/documents/download" : {
      "get" : {
        "operationId" : "download",
        "parameters" : [ {
          "name" : "operator",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "YOUSIGN" ]
          }
        }, {
          "name" : "signatureRequestId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/documents/{operator}/signatureRequest/{signatureRequestId}" : {
      "get" : {
        "summary" : "fetch a signature request ",
        "description" : " get data from signature request id ",
        "operationId" : "    POST_SIGNATURE_REQUEST_fetch",
        "parameters" : [ {
          "name" : "operator",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "YOUSIGN" ]
          }
        }, {
          "name" : "signatureRequestId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " response from operator used  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/v2/documents/signatureRequest" : {
      "post" : {
        "summary" : "initiate and upload document depending on mode operator",
        "description" : " new version for seller.  ",
        "operationId" : "    POST_SIGNATURE_REQUEST_steps",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SigantureRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " response from yousign activation endpoint if operator yousign is used ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/v2/documents/{operator}/signatureRequest/done" : {
      "post" : {
        "operationId" : "signatureRequestDone",
        "parameters" : [ {
          "name" : "operator",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "YOUSIGN" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SignatureRequestWebHookPayload"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/importExport/exportData" : {
      "post" : {
        "tags" : [ "export data" ],
        "summary" : "export data",
        "description" : "export data",
        "operationId" : "exportData",
        "requestBody" : {
          "description" : "Export configuration",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportConfig"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportConfig"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the entity successfully created, and the id is returned in the response"
          },
          "400" : {
            "description" : "bad request when entity information contains an error"
          }
        }
      }
    },
    "/v2/importExport/importData" : {
      "post" : {
        "summary" : " Send a file to be imported. ImportExportResponseDto.executionId contains  ",
        "description" : " Send a file to be imported. ImportExportResponseDto.executionId contains  ",
        "operationId" : "    POST_ImportExport_importData_1",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultipartFormDataInput"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : " As import is async process, ImportExportResponseDto.executionId contains and ID to be used to query for execution results via a call to/importExport/checkImportDataResult?id=.. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportExportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/fileType" : {
      "post" : {
        "tags" : [ "fileType", "file_type" ],
        "summary" : "Create a file type",
        "operationId" : "create_44",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileTypeDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the file type successfully created"
          },
          "400" : {
            "description" : "An error happened when trying to create a file type"
          }
        }
      }
    },
    "/v2/fileType/{id}" : {
      "put" : {
        "tags" : [ "fileType", "file_type" ],
        "summary" : "Update a file type",
        "operationId" : "update_44",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileTypeDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "the file type successfully created"
          },
          "404" : {
            "description" : "The file  type does not exists"
          },
          "400" : {
            "description" : "An error happened when trying to create a file type"
          }
        }
      },
      "delete" : {
        "tags" : [ "fileType", "file_type" ],
        "summary" : "Delete a file type",
        "operationId" : "delete_24",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the file type successfully created"
          },
          "404" : {
            "description" : "The file type does not exists"
          },
          "400" : {
            "description" : "An error happened when trying to create a file type"
          }
        }
      }
    },
    "/v2/standardReports/trialBalances" : {
      "get" : {
        "tags" : [ "TrialBalance" ],
        "summary" : "This endpoint allows to get trial balance according to the given filters",
        "description" : "Get trial balance report",
        "operationId" : "getTrialBalances",
        "parameters" : [ {
          "name" : "period",
          "in" : "query",
          "description" : "The trial balance report period",
          "schema" : {
            "type" : "string",
            "default" : "CURRENT_QUARTER",
            "enum" : [ "CURRENT_MONTH", "LAST_MONTH", "CURRENT_QUARTER", "LAST_QUARTER", "CURRENT_YEAR" ]
          }
        }, {
          "name" : "codeOrLabel",
          "in" : "query",
          "description" : "code or label",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The trial balance report start date",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The trial balance report end date",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "The sorting by field",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "The sort order",
          "schema" : {
            "type" : "string",
            "enum" : [ "DESCENDING", "ASCENDING" ]
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The list offset",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The record list size",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "return trial balance report"
          },
          "204" : {
            "description" : "Empty trial balance report"
          }
        }
      }
    },
    "/v2/generic/count/{entityName}" : {
      "post" : {
        "tags" : [ "Generic" ],
        "summary" : "Generic single endpoint to count records of an entity",
        "description" : "specify the entity name, and as body, the configuration of the research.",
        "operationId" : "count",
        "parameters" : [ {
          "name" : "extractList",
          "in" : "query",
          "description" : "extractList flag to return or not nested List",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Counting results successfully retrieved"
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      }
    },
    "/v2/generic/{entityName}" : {
      "get" : {
        "tags" : [ "Generic" ],
        "summary" : "Generic single endpoint to retrieve paginated records of an entity",
        "description" : "Use this method to get the list of entities. You need to specify the entity name, and as body, the configuration of the research.\"\n                    + \" also you can define the offset and the limit, you can order by a field and define the sort type\"\n                    + \" see PagingAndFiltering doc for more details.",
        "operationId" : "getAllEntities",
        "parameters" : [ {
          "name" : "extractList",
          "in" : "query",
          "description" : "extractList flag to return or not nested List",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entityName",
          "in" : "path",
          "description" : "The entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      },
      "post" : {
        "tags" : [ "Generic" ],
        "summary" : "Create a resource by giving it's name and Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to create",
        "operationId" : "create_45",
        "parameters" : [ {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/generic/{entityName}/{id}" : {
      "get" : {
        "tags" : [ "Generic" ],
        "summary" : "Generic single endpoint to retrieve resources by ID",
        "description" : "Use this method to get an entity. You need to specify the entity name, the record id, and as body, the list of the wanted fields",
        "operationId" : "getEntity",
        "parameters" : [ {
          "name" : "extractList",
          "in" : "query",
          "description" : "extractList flag to return or not nested List",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the wanted record",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {fields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      },
      "put" : {
        "tags" : [ "Generic" ],
        "summary" : "Update a resource by giving it's name and Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to update",
        "operationId" : "update_45",
        "parameters" : [ {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "dto the json representation of the object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      },
      "post" : {
        "tags" : [ "Generic" ],
        "summary" : "Generic single endpoint to retrieve resources by ID",
        "description" : "specify the entity name, the record id, and as body, the list of the wanted fields",
        "operationId" : "get_2",
        "parameters" : [ {
          "name" : "extractList",
          "in" : "query",
          "description" : "extractList flag to return or not nested List",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the wanted record",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {fields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      },
      "delete" : {
        "tags" : [ "Generic" ],
        "summary" : "Delete a resource by giving it's name and Id",
        "description" : "specify the entity name, the record id, and as body, the list of the fields to delete",
        "operationId" : "delete_25",
        "parameters" : [ {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id here is the database primary key of the record to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          },
          "404" : {
            "description" : "baseEntityObject not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request when input not well formed"
          }
        }
      }
    },
    "/v2/generic/export/{entityName}/{fileFormat}" : {
      "post" : {
        "tags" : [ "Generic" ],
        "summary" : "Generic single endpoint to export paginated records of an entity",
        "description" : "specify the entity name, and as body, the configuration of the research. also you can define the offset and the limit, you can order by a field and define the sort type see PagingAndFiltering doc for more details. ",
        "operationId" : "export_1",
        "parameters" : [ {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileFormat",
          "in" : "path",
          "description" : "file format",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldsSeparator",
          "in" : "query",
          "description" : "fields Separator",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "decimalSeparator",
          "in" : "query",
          "description" : "decimal Separator",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileNameExtension",
          "in" : "query",
          "description" : "file Name Extension",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully exported"
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      }
    },
    "/v2/generic/all/{entityName}" : {
      "post" : {
        "tags" : [ "Generic" ],
        "summary" : "Generic single endpoint to retrieve paginated records of an entity",
        "description" : "specify the entity name, and as body, the configuration of the research. also you can define the offset and the limit, you can order by a field and define the sort type see PagingAndFiltering doc for more details. ",
        "operationId" : "getAll",
        "parameters" : [ {
          "name" : "extractList",
          "in" : "query",
          "description" : "extractList flag to return or not nested List",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entityName",
          "in" : "path",
          "description" : "the entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestDto carries the wanted fields ex: {genericFields = [code, description]}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "400" : {
            "description" : "bad request when entityName not well formed or entity unrecognized"
          }
        }
      }
    },
    "/v2/generic/entities" : {
      "get" : {
        "tags" : [ "Generic" ],
        "summary" : "This endpoint is used to retrieve the full list of queryable entities",
        "description" : "This endpoint retrieves all possible queryable entities in the database.",
        "operationId" : "getFullListEntities",
        "parameters" : [ {
          "name" : "onlyBusinessEntities",
          "in" : "query",
          "description" : "onlyBusinessEntities to be able to get only entities extending BusinessEntity.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "withFullName",
          "in" : "query",
          "description" : "withFullName to be able to get the canonical names",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "onlyHugeEntities",
          "in" : "query",
          "description" : "onlyHugeEntities to fetch only huge entities",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "404" : {
            "description" : "the full list of entities not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/generic/entities/{entityName}" : {
      "get" : {
        "tags" : [ "Generic" ],
        "summary" : "This endpoint is used to retrieve the fields and corresponding types of an entity",
        "description" : "You need to specify an entity name. \n\nGiven the entity name, this endpoint returns the list of its fields and corresponding types. The entity name should not be written in the plural form. For example, *customer*.",
        "operationId" : "getRelatedFieldsAndTypesOfEntity",
        "parameters" : [ {
          "name" : "entityName",
          "in" : "path",
          "description" : "The entity name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter keyword",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Depth of nested entities",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "paginated results successfully retrieved with hypermedia links"
          },
          "404" : {
            "description" : "the full list of entities not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/generic/version" : {
      "get" : {
        "tags" : [ "Generic" ],
        "summary" : "Get versions information about OpenCell components",
        "description" : "return a list of OpenCell's components version information",
        "operationId" : "getVersions",
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          }
        }
      }
    },
    "/v2/notImplemented" : {
      "get" : {
        "tags" : [ "NotImplementedResource" ],
        "summary" : "This service represent a non implemented resource",
        "operationId" : "getResource",
        "responses" : {
          "default" : {
            "description" : "a generic resource",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      }
    },
    "/v2/version" : {
      "get" : {
        "tags" : [ "Generic" ],
        "summary" : "Get versions information about OpenCell components",
        "description" : "return a list of OpenCell's components version information",
        "operationId" : "getVersions_1",
        "responses" : {
          "200" : {
            "description" : "resource successfully updated but not content exposed except the hypermedia"
          }
        }
      }
    },
    "/v2/language/isoLanguage" : {
      "post" : {
        "tags" : [ "language" ],
        "summary" : "Create a new language",
        "operationId" : "createLanguage",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The language was successfully created"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Language creation failed"
          }
        }
      }
    },
    "/v2/language/isoLanguage/{id}" : {
      "put" : {
        "tags" : [ "language" ],
        "summary" : "Update an existing ISO language",
        "operationId" : "updateLanguage",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LanguageDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The language was successfully updated"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Language update failed"
          }
        }
      }
    },
    "/v2/media/files/upload" : {
      "post" : {
        "tags" : [ "Media" ],
        "summary" : "Upload a media file",
        "description" : "Upload a media file",
        "operationId" : "uploadFile",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediaFile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "media file upload failed"
          }
        }
      }
    },
    "/v2/mediationSetting" : {
      "post" : {
        "tags" : [ "Mediation Settings" ],
        "summary" : "Create new Mediation Setting",
        "description" : "create new mediation setting to enabling or disabling edr versioning",
        "operationId" : "create_46",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediationSetting"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "new mediation setting is created"
          },
          "404" : {
            "description" : "missing paramters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "400" : {
            "description" : "the setting of mediation already exist"
          }
        }
      }
    },
    "/v2/mediationSetting/edrVersioningRule" : {
      "post" : {
        "tags" : [ "Mediation Settings" ],
        "summary" : "Create new Edr Version rule",
        "description" : "create new Edr Version rule",
        "operationId" : "createEdrVersionRule",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EdrVersioningRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "new Edr Version rule is created"
          },
          "404" : {
            "description" : "missing paramters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/mediationSetting/edrVersioningRule/{edrVersionRuleId}" : {
      "put" : {
        "tags" : [ "Mediation Settings" ],
        "summary" : "Update new Edr Version rule",
        "description" : "upate an existing Edr Version rule",
        "operationId" : "updateEdrVersionRule",
        "parameters" : [ {
          "name" : "edrVersionRuleId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EdrVersioningRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Edr Version rule is updated"
          },
          "404" : {
            "description" : "missing paramters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Mediation Settings" ],
        "summary" : "Remove new Edr Version rule",
        "description" : "remove an existing Edr Version rule",
        "operationId" : "deleteEdrVersioningRule",
        "parameters" : [ {
          "name" : "edrVersionRuleId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Edr Version rule is removed"
          },
          "400" : {
            "description" : "Edr Version doesn't exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/mediationSetting/edrVersioningRule/swapPriority" : {
      "post" : {
        "tags" : [ "Mediation Settings" ],
        "summary" : "Update new Edr Version rule",
        "description" : "upate an existing Edr Version rule",
        "operationId" : "swapPriority",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EdrVersioningRuleSwapping"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Edr Version rule is updated"
          },
          "404" : {
            "description" : "missing paramters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/mediationSetting/{mediationRuleId}" : {
      "put" : {
        "tags" : [ "Mediation Settings" ],
        "summary" : "Update new Mediation Setting",
        "description" : "update an existing mediation setting to enabling or disabling edr versioning",
        "operationId" : "update_46",
        "parameters" : [ {
          "name" : "mediationRuleId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediationSetting"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An existing mediation setting is updated"
          },
          "404" : {
            "description" : "missing paramters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/open-order-quote/{code}/status/{status}" : {
      "put" : {
        "tags" : [ "Open Orders Quote" ],
        "summary" : "update  open order quote status",
        "operationId" : "changeStatus",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the open order template ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "open order template object to be updated",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "WAITING_VALIDATION", "REJECTED", "VALIDATED", "SENT", "ACCEPTED", "CANCELED" ]
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/ordering/open-order-quote" : {
      "post" : {
        "summary" : "Create Open Order Quote",
        "description" : "Create Open Order Quote",
        "operationId" : "POST_Open-Order-Quote",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderQuoteDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Id of created Open Order Quote"
          }
        }
      }
    },
    "/v2/ordering/open-order-quote/{id}/duplicate" : {
      "post" : {
        "summary" : "Duplicate Open Order Quote from existing one",
        "description" : "Duplicate Open Order Quote",
        "operationId" : "POST_DUPLICATE-Open-Order-Quote",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Source Open Order Quote id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Id of created Open Order Quote"
          }
        }
      }
    },
    "/v2/ordering/open-order-quote/{id}" : {
      "put" : {
        "summary" : "Update Open Order Quote",
        "description" : "Update Open Order Quote",
        "operationId" : "PUT_Open-Order-Quote",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Open Order Quote id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderQuoteDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Id of updated Open Order Quote"
          }
        }
      }
    },
    "/v2/ordering/openOrderTemplates/{code}/status/{status}" : {
      "put" : {
        "tags" : [ "Open Orders Templates" ],
        "summary" : "change status open order template",
        "description" : "change status the specified open order template",
        "operationId" : "changeStatusOpenOrderTemplate",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the open order template ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "status of the open order template ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/openOrderTemplates" : {
      "post" : {
        "tags" : [ "Open Orders Templates" ],
        "summary" : "create open order template",
        "description" : "create open order template",
        "operationId" : "createOpenOrderTemplate",
        "requestBody" : {
          "description" : "open order template object to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderTemplateInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the created open order template"
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/openOrderTemplates/{code}/disable" : {
      "put" : {
        "tags" : [ "Open Orders Templates" ],
        "summary" : "disable open order template",
        "description" : "disable the specified open order template",
        "operationId" : "disableOpenOrderTemplate",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the open order template ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/openOrderTemplates/{code}" : {
      "put" : {
        "tags" : [ "Open Orders Templates" ],
        "summary" : "update  open order template",
        "description" : "Returns the updated open order template",
        "operationId" : "updateOpenOrderTemplate",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the open order template ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "open order template object to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderTemplateInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the updated open order template"
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/openOrder/{code}/cancel" : {
      "post" : {
        "tags" : [ "Open Orders" ],
        "summary" : "cancel open order",
        "description" : "cancel the specified open order",
        "operationId" : "cancelOpenOrder",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the open order ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "open order object to be canceled",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/openOrder/{code}" : {
      "put" : {
        "tags" : [ "Open Orders" ],
        "summary" : "update  open order",
        "description" : "Returns the updated open order",
        "operationId" : "updateOpenOrder",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the open order ",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "open order object to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the updated open order"
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/orders" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Return a list of orders",
        "description" : "Returns a list of orders with pagination feature or non integers will simulate API error conditions",
        "operationId" : "getOrders",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "list of orders",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back.",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular file is up to date with the server"
          },
          "400" : {
            "description" : "Invalid parameters supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Returns the created order",
        "description" : "Returns the created order",
        "operationId" : "createOrder",
        "requestBody" : {
          "description" : "order object to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "the created order",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "delete more than one order",
        "description" : "delete more than one order",
        "operationId" : "deleteOrder_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "ids of orders to delete",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the order deletion went ok ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "order not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/orders/{id}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Return an order",
        "description" : "Returns a single order",
        "operationId" : "getOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched order",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular resource is up to date with the server"
          },
          "404" : {
            "description" : "order not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Orders" ],
        "summary" : "update an existing order",
        "description" : "update an existing order, and returns the updated order",
        "operationId" : "updateOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "order object to be update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the updated order",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "404" : {
            "description" : "order not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "delete an existing order",
        "description" : "delete an existing order, and returns the deleted order",
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the deleted order",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "404" : {
            "description" : "order not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Orders" ],
        "summary" : "partially update an existing order",
        "description" : "update an existing order with a set of changes to apply to the order, and returns the updated order",
        "operationId" : "patchOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "order object to be update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the updated order",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "404" : {
            "description" : "order not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/orders/find/{id}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Return an order",
        "description" : "Returns a single order",
        "operationId" : "getOrder_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched order",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular resource is up to date with the server"
          },
          "404" : {
            "description" : "order not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/order-items" : {
      "get" : {
        "tags" : [ "Order-items" ],
        "summary" : "Return a list of order-items",
        "description" : "Returns a list of order-items with pagination feature or non integers will simulate API error conditions",
        "operationId" : "getOrderItems",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "list of order-items",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back.",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItems"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular file is up to date with the server"
          },
          "400" : {
            "description" : "Invalid parameters supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order-items" ],
        "summary" : "Returns the created order-item",
        "description" : "Returns the created order-item",
        "operationId" : "createOrderItem",
        "requestBody" : {
          "description" : "order-item object to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "the created order-item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order-items" ],
        "summary" : "delete more than one order-item",
        "description" : "delete more than one order-item",
        "operationId" : "deleteOrderItem_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "ids of order-items to delete",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the order-items deletion went ok ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "order-item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/order-items/{id}" : {
      "get" : {
        "tags" : [ "Order-items" ],
        "summary" : "Return an order-Item",
        "description" : "Returns a single order-Item",
        "operationId" : "getOrderItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order-Item",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched order-Item",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular resource is up to date with the server"
          },
          "404" : {
            "description" : "order-Item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Order-items" ],
        "summary" : "update an existing order-item",
        "description" : "update an existing order-item, and returns the updated order-item",
        "operationId" : "updateOrderItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order-item to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "order-item object to be update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the updated order-item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "404" : {
            "description" : "order-item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order-items" ],
        "summary" : "delete an existing order-item",
        "description" : "delete an existing order-item, and returns the deleted order-item",
        "operationId" : "deleteOrderItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order-item to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the deleted order-item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "404" : {
            "description" : "order-item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Order-items" ],
        "summary" : "partially update an existing order-item",
        "description" : "update an existing order-item with a set of changes to apply to the order-item, and returns the updated order-item",
        "operationId" : "patchOrderItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the order-item to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "order-item object to be update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the updated order-item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "404" : {
            "description" : "order-item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/order-items/find/{code}" : {
      "get" : {
        "tags" : [ "Order-items" ],
        "summary" : "Return an order-Item",
        "description" : "Returns a single order-Item",
        "operationId" : "getOrderItem_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the order-Item",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched order-Item",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular resource is up to date with the server"
          },
          "404" : {
            "description" : "order-Item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/products" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Return a list of products",
        "description" : "Returns a list of products with pagination feature or non integers will simulate API error conditions",
        "operationId" : "getProducts",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "list of products",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back.",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Products"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular product is up to date with the server"
          },
          "400" : {
            "description" : "Invalid parameters supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Returns the created product",
        "description" : "Returns the created product",
        "operationId" : "createProduct_1",
        "requestBody" : {
          "description" : "product object to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "the created product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "delete more than one product",
        "description" : "delete more than one product, and returns the deleted products",
        "operationId" : "deleteProducts",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "ids of products to delete",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the products deletion went ok ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "product not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/products/{id}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Return a product",
        "description" : "Returns a single product",
        "operationId" : "getProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the product",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched product",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular product is up to date with the server"
          },
          "404" : {
            "description" : "product not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Products" ],
        "summary" : "update an existing product",
        "description" : "update an existing product, and returns the updated product",
        "operationId" : "updateProduct_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the product to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "product object to be update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the updated product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "404" : {
            "description" : "product not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "delete an existing product",
        "description" : "delete an existing product, and returns the deleted product",
        "operationId" : "deleteProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the product to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the deleted product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "404" : {
            "description" : "product not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Products" ],
        "summary" : "partially update an existing product",
        "description" : "update an existing product with a set of changes to apply to the product, and returns the updated product",
        "operationId" : "patchProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the product to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "product object to be update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "the updated product",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid inputs supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          },
          "404" : {
            "description" : "product not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ordering/products/find/{code}" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Return a product",
        "description" : "Returns a single product",
        "operationId" : "getProduct_1",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "code of the product",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "the searched product",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified, Returned to the client when the cached copy of a particular product is up to date with the server"
          },
          "404" : {
            "description" : "product not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customerBalance" : {
      "post" : {
        "tags" : [ "Customer balance" ],
        "summary" : "Create new customer balance",
        "description" : "Create new customer balance",
        "operationId" : "create_47",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBalance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Customer balance successfully created"
          },
          "403" : {
            "description" : "Debit or Credit line should not be empty"
          }
        }
      }
    },
    "/v2/customerBalance/{id}" : {
      "put" : {
        "tags" : [ "Customer balance" ],
        "summary" : "Update an existing customer balance",
        "description" : "Update an existing customer balance",
        "operationId" : "update_47",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerBalance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Customer balance successfully updated"
          },
          "403" : {
            "description" : "Debit or credit line should not be empty"
          },
          "404" : {
            "description" : "Customer balance doesn't exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer balance" ],
        "summary" : "Delete an existing customer balance",
        "description" : "Delete an existing customer balance",
        "operationId" : "delete_26",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer balance successfully deleted"
          },
          "403" : {
            "description" : "Default customer balance can not be deleted"
          },
          "404" : {
            "description" : "Customer balance doesn't exist"
          }
        }
      }
    },
    "/v2/customerBalance/accountOperationsDetails" : {
      "post" : {
        "tags" : [ "Customer balance" ],
        "summary" : "Get account operation details for a customer balance",
        "operationId" : "getAccountOperations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountOperationsDetails"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/payment-plan/{id}/activate" : {
      "put" : {
        "tags" : [ "PaymentPlan" ],
        "summary" : "Activate Payment plan by Id",
        "description" : "Activate Payment plan by Id",
        "operationId" : "PUT_Activate-Payment-Plan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment plan id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : " payment action status ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentActionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v2/payment-plan" : {
      "post" : {
        "tags" : [ "PaymentPlan" ],
        "summary" : "Create Payment plan",
        "description" : "Create Payment plan",
        "operationId" : "POST_Payment-Plan",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Id of created Payment plan"
          }
        }
      }
    },
    "/v2/payment-plan/{id}" : {
      "put" : {
        "tags" : [ "PaymentPlan" ],
        "summary" : "Update Payment plan",
        "description" : "Update Payment plan",
        "operationId" : "PUT_Payment-Plan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment plan id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentPlanDto"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Id of updated Payment plan"
          }
        }
      },
      "delete" : {
        "tags" : [ "PaymentPlan" ],
        "summary" : "Delete Payment plan by id",
        "description" : "Delete Payment plan by id",
        "operationId" : "DELETE_Payment-Plan",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment plan id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/clearAll" : {
      "delete" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "Clear rejectionCodes by gateway",
        "description" : "Clear rejectionCodes by gateway",
        "operationId" : "clearAll",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionCodeClearInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCode successfully cleared"
          },
          "404" : {
            "description" : "Payment gateway does not exist"
          },
          "400" : {
            "description" : "RejectionCode clearing failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/rejectionActions" : {
      "post" : {
        "tags" : [ "RejectionActions" ],
        "summary" : "Create new payment rejection action",
        "description" : "Create new payment rejection action",
        "operationId" : "createRejectionAction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionActions successfully created"
          },
          "404" : {
            "description" : "Action does not exist"
          },
          "400" : {
            "description" : "PaymentRejectionAction creation failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes" : {
      "post" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "Create a new RejectionCode",
        "description" : "Create a new rejection code",
        "operationId" : "createRejectionCode",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCodes successfully created"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "RejectionCode creation failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "remove payment rejection code based on filters",
        "description" : "remove payment rejection code based on filters",
        "operationId" : "removeRejectionCode",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionCodeDeleteInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCodes successfully deleted"
          },
          "404" : {
            "description" : "No entity found to remove"
          },
          "400" : {
            "description" : "RejectionCode deletion failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/group" : {
      "post" : {
        "tags" : [ "RejectionCodesGroup" ],
        "summary" : "Create Payment Rejection Codes Group",
        "description" : "Create anew Payment Rejection Codes Group",
        "operationId" : "createRejectionGroup",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCodesGroup successfully created"
          },
          "404" : {
            "description" : "Group does not exist"
          },
          "400" : {
            "description" : "RejectionCodesGroup creation failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "RejectionCodesGroup" ],
        "summary" : "Delete Payment Rejection Codes Group based on filter",
        "description" : "Delete Payment Rejection Codes Group based on filter",
        "operationId" : "removeRejectionGroup_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCodesGroup successfully deleted"
          },
          "404" : {
            "description" : "Group does not exist"
          },
          "400" : {
            "description" : "PaymentRejectionCodesGroup deletion failed"
          }
        }
      }
    },
    "/v2/payment/rejection" : {
      "post" : {
        "tags" : [ "RejectionPayment" ],
        "summary" : "Create rejection payment",
        "description" : "Create rejection payment",
        "operationId" : "createRejectionPayment",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionPayment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Rejection payment successfully updated"
          },
          "404" : {
            "description" : "Rejection action does not exist"
          },
          "500" : {
            "description" : "Rejection action sequence update failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/export" : {
      "post" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "Export rejectionsCodes by gateway",
        "description" : "Export rejectionsCodes by gateway",
        "operationId" : "export_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentGatewayInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Gateway does not exist"
          },
          "400" : {
            "description" : "Error occurred during export"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/import" : {
      "post" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "Import rejectionsCodes by gateway",
        "description" : "Import rejectionsCodes by gateway",
        "operationId" : "importRejectionCodes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportRejectionCodeInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Gateway does not exist"
          },
          "400" : {
            "description" : "Error occurred during import"
          }
        }
      }
    },
    "/v2/payment/paymentByCard" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : "Payment By Card",
        "description" : "create and validate a payment by Card order",
        "operationId" : "paymentByCard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardRefund"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Payment by card is failed"
          }
        }
      }
    },
    "/v2/payment/paymentBySepa" : {
      "post" : {
        "tags" : [ "Payment" ],
        "summary" : "Payment By Sepa",
        "description" : "create and validate a payment by Sepa api",
        "operationId" : "paymentBySepa",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardRefund"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Payment by sepa is failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/rejectionActions/{id}" : {
      "put" : {
        "tags" : [ "RejectionActions" ],
        "summary" : "Update payment rejection action",
        "description" : "Update payment rejection action",
        "operationId" : "updateRejectionAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection action id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionActions successfully updated"
          },
          "404" : {
            "description" : "Action does not exist"
          },
          "400" : {
            "description" : "PaymentRejectionAction modification failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "RejectionActions" ],
        "summary" : "Remove payment rejection action",
        "description" : "Remove payment rejection action",
        "operationId" : "removeRejectionAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection action id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "RejectionActions successfully deleted"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "RejectionActions deletion failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/{id}" : {
      "put" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "Update RejectionCode",
        "description" : "Update an existing rejection code",
        "operationId" : "updateRejectionCode",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection code id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCode successfully updated"
          },
          "404" : {
            "description" : "RejectionCode does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "RejectionCode modification failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "PaymentRejectionCode" ],
        "summary" : "remove PaymentRejectionCode",
        "description" : "remove payment rejection code",
        "operationId" : "removeRejectionCode_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection code id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionCodeDeleteInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCodes successfully deleted"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "RejectionCode deletion failed"
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/group/{id}" : {
      "put" : {
        "tags" : [ "RejectionCodesGroup" ],
        "summary" : "update Payment Rejection Codes Group",
        "description" : "update Payment Rejection Codes Group",
        "operationId" : "updateRejectionGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection action id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectionGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RejectionCodesGroup successfully updated"
          },
          "404" : {
            "description" : "Group does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          }
        }
      },
      "delete" : {
        "tags" : [ "RejectionCodesGroup" ],
        "summary" : "Delete Payment Rejection Codes Group",
        "description" : "Delete Payment Rejection Codes Group",
        "operationId" : "removeRejectionGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection group id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "RejectionCodesGroup successfully deleted"
          },
          "404" : {
            "description" : "Group does not exist"
          },
          "400" : {
            "description" : "PaymentRejectionCodesGroup deletion failed"
          }
        }
      }
    },
    "/v2/payment/{id}/retry" : {
      "post" : {
        "operationId" : "retryRejectedPayment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetryPayment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v2/payment/rejectionCodes/rejectionActions/{id}/UpdateSequence" : {
      "put" : {
        "tags" : [ "rejectionAction" ],
        "summary" : "Update action sequence",
        "description" : "Update action sequence",
        "operationId" : "updateActionSequence",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Rejection action id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SequenceAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Rejection action sequence successfully updated"
          },
          "404" : {
            "description" : "Rejection action does not exist"
          },
          "400" : {
            "description" : "Rejection payment creation failed"
          }
        }
      }
    },
    "/v2/quoteItems/{quoteCode}/{quoteVersion}/{quoteItemId}/duplication" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "This endpoint allows duplicate an existing quote item",
        "description" : "API to duplicate an existing quote item",
        "operationId" : "duplicate_4",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "The quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "quote version id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "quoteItemId",
          "in" : "path",
          "description" : "quote item id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success Returns new quote item duplicated from existing one"
          },
          "404" : {
            "description" : "quote item doesn't existe"
          },
          "403" : {
            "description" : "Cannot move subscription"
          }
        }
      }
    },
    "/v2/quoteItems/{quoteCode}/{quoteVersion}/{quoteItemId}/duplicate" : {
      "post" : {
        "tags" : [ "Quote management" ],
        "summary" : "This endpoint allows duplicate an existing quote item",
        "description" : "API to duplicate an existing quote item",
        "operationId" : "duplicateQuote_1",
        "parameters" : [ {
          "name" : "quoteCode",
          "in" : "path",
          "description" : "The quote code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quoteVersion",
          "in" : "path",
          "description" : "quote version id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "quoteItemId",
          "in" : "path",
          "description" : "quote item id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success Returns new quote item duplicated from existing one"
          },
          "404" : {
            "description" : "quote item doesn't existe"
          },
          "403" : {
            "description" : "Cannot move subscription"
          }
        }
      }
    },
    "/v2/refund/refundByCard" : {
      "post" : {
        "tags" : [ "Refund" ],
        "summary" : "Refund By Card",
        "description" : "create and validate a refund by Card order",
        "operationId" : "refundByCard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardRefund"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Refund by card is failed"
          }
        }
      }
    },
    "/v2/refund/refundBySCT" : {
      "post" : {
        "tags" : [ "Refund" ],
        "summary" : "Refund By SCT",
        "description" : "create and validate a refund by SCT order",
        "operationId" : "refundBySCT",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SCTRefund"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "404" : {
            "description" : "Entity does not exist"
          },
          "412" : {
            "description" : "Missing parameters"
          },
          "400" : {
            "description" : "Refund by SCT is failed"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/{reportQueryId}/schedule" : {
      "get" : {
        "tags" : [ "QueryScheduler" ],
        "summary" : "Retrieve the query scheduler",
        "description" : "Retrieve the query scheduler",
        "operationId" : "getQueryScheduler",
        "parameters" : [ {
          "name" : "reportQueryId",
          "in" : "path",
          "description" : "report query id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Query scheduler found"
          },
          "404" : {
            "description" : "Target entity does not exist"
          }
        }
      },
      "post" : {
        "tags" : [ "QueryScheduler" ],
        "summary" : "Create a new query scheduler",
        "description" : "Create a new query scheduler",
        "operationId" : "createQueryScheduler",
        "parameters" : [ {
          "name" : "reportQueryId",
          "in" : "path",
          "description" : "report query id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Query scheduler object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuerySchedulerInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Query scheduler successfully created"
          },
          "404" : {
            "description" : "Target entity does not exist"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries" : {
      "get" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "Return a list of report queries",
        "description" : "Returns a list of report queries",
        "operationId" : "getReportQueries",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "list of report queries",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back.",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportQuery"
                }
              }
            }
          },
          "200" : {
            "description" : "report queries list"
          },
          "404" : {
            "description" : "No data found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "Create a new report query",
        "description" : "Create a new report query",
        "operationId" : "createReportQuery",
        "requestBody" : {
          "description" : "Report query object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportQueryInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Report query successfully created, and the id is returned in the response"
          },
          "204" : {
            "description" : "Report query successfully created"
          },
          "404" : {
            "description" : "Target entity does not exist"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/{queryId}" : {
      "get" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "This endpoint allows to load a report query resource",
        "description" : "Return a report query",
        "operationId" : "find_18",
        "parameters" : [ {
          "name" : "queryId",
          "in" : "path",
          "description" : "Report query id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Query successfully loaded"
          },
          "404" : {
            "description" : "Query does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "This endpoint allows to delete a report query resource",
        "description" : "delete report query",
        "operationId" : "delete_27",
        "parameters" : [ {
          "name" : "queryId",
          "in" : "path",
          "description" : "report query id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Query successfully deleted"
          },
          "404" : {
            "description" : "Query does not exist"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/{queryId}/download" : {
      "get" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "This API will download result query as csv or excel format.",
        "description" : "download result query execution as scv or excel format",
        "operationId" : "downloadQueryExecutionResult",
        "parameters" : [ {
          "name" : "queryId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "format of the file to be downloaded, by default it CSV format",
          "schema" : {
            "type" : "string",
            "default" : "CSV",
            "enum" : [ "CSV", "EXCEL" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "query execution result is downloaded"
          },
          "404" : {
            "description" : "the Report query execution does not exist"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/{queryId}/execute" : {
      "post" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "execute report query",
        "description" : "Execute report query",
        "operationId" : "execute_2",
        "parameters" : [ {
          "name" : "queryId",
          "in" : "path",
          "description" : "Query id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "async",
          "in" : "query",
          "description" : "Execution type Synchronously or asynchronously",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sendNotification",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "requestBody" : {
          "description" : "Report query object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportQueryInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Query successfully executed"
          },
          "404" : {
            "description" : "Query does not exists"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/queryExecutionResult/{queryexecutionResultId}/results" : {
      "get" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "This API will convert the generate report file to json.",
        "description" : "look for the query result by its id get its path location, and transform csv file to json",
        "operationId" : "findQueryResult",
        "parameters" : [ {
          "name" : "queryexecutionResultId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "query execution result successfully generated"
          },
          "404" : {
            "description" : "the Report query execution does not exist / the file path is missing / file path doesn't exist / file extension is not CSV format "
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/{id}" : {
      "put" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "This endpoint allows to update an report query",
        "description" : "update an existing report query",
        "operationId" : "update_48",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Report query id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Report query object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportQueryInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the report query successfully updated, and the id is returned in the response"
          },
          "404" : {
            "description" : "bad request, report query is not found"
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/verify" : {
      "post" : {
        "tags" : [ "ReportQuery" ],
        "summary" : "Verify report query",
        "description" : "Verify the existing of the report query according to its visibility and creator",
        "operationId" : "verifyReportQuery",
        "requestBody" : {
          "description" : "Verify report query request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VerifyQueryInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The query not exists with the visibility"
          },
          "409" : {
            "description" : "The query already exists and belong you"
          },
          "422" : {
            "description" : "The query already exists and belong to another user"
          }
        }
      }
    },
    "/v2/accountReceivable/financeSettings" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Create Security Deposit settings",
        "description" : "Create Security Deposit settings",
        "operationId" : "create_48",
        "requestBody" : {
          "description" : "Security Deposit Settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinanceSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit settings was successfully created"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/accountReceivable/financeSettings/{id}" : {
      "put" : {
        "tags" : [ "Post" ],
        "summary" : "Update Security Deposit settings",
        "description" : "Update Security Deposit settings",
        "operationId" : "update_49",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit settings te be updated by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit Settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinanceSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit settings was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit does not exist : {financeSettings ids}"
          }
        }
      }
    },
    "/v2/securityDeposit/cancel/{id}" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Cancel Security Deposit",
        "description" : "Cancel Security Deposit",
        "operationId" : "cancel_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit te be canceled by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositCancelInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit was successfully Canceled"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit does not exist : {securityDeposit ids}"
          }
        }
      }
    },
    "/v2/securityDeposit" : {
      "post" : {
        "tags" : [ "SecurityDeposit", "Post", "Create" ],
        "summary" : "Create a Security Deposit",
        "description" : "Create a Security Deposit",
        "operationId" : "create_49",
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit was successfully created"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/securityDeposit/credit/{id}" : {
      "post" : {
        "tags" : [ "SecurityDeposit", "Post", "Credit" ],
        "summary" : "Credit Security Deposit",
        "description" : "Credit Security Deposit",
        "operationId" : "credit",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit te be credited by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositCreditInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit was successfully credited"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit does not exist : {securityDeposit ids}"
          }
        }
      }
    },
    "/v2/securityDeposit/instantiateSecurityDeposit" : {
      "post" : {
        "tags" : [ "SecurityDeposit", "Post", "Instantiate" ],
        "summary" : "Instantiate Security Deposit",
        "description" : "Instantiate Security Deposit",
        "operationId" : "instantiate",
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit was successfully instantiated"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/securityDeposit/{id}/payInvoices" : {
      "post" : {
        "tags" : [ "SecurityDeposit", "Post", "Credit" ],
        "summary" : "Pay invoice manually with Security Deposit",
        "description" : "Pay invoice manually with Security Deposit",
        "operationId" : "payInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit te be the invoice with it",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositPaymentInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invoice was successfully paid"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit does not exist : {securityDeposit ids}"
          }
        }
      }
    },
    "/v2/securityDeposit/refund/{id}" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Refund Security Deposit",
        "description" : "Refund Security Deposit",
        "operationId" : "refund",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit te be refunded by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositRefundInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit was successfully Refunded"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit does not exist : {securityDeposit ids}"
          }
        }
      }
    },
    "/v2/securityDeposit/{id}" : {
      "put" : {
        "tags" : [ "Post" ],
        "summary" : "Update Security Deposit",
        "description" : "Update Security Deposit",
        "operationId" : "update_50",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit te be updated by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit does not exist : {securityDeposit ids}"
          }
        }
      }
    },
    "/v2/securityDeposit/securityDepositTemplate" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Create Security Deposit template",
        "description" : "Create Security Deposit template",
        "operationId" : "create_50",
        "requestBody" : {
          "description" : "Security Deposit Template",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositTemplate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit template was successfully created"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/securityDeposit/securityDepositTemplate/{id}" : {
      "put" : {
        "tags" : [ "Post" ],
        "summary" : "Update Security Deposit template",
        "description" : "Update Security Deposit template",
        "operationId" : "update_51",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Security deposit template te be updated by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Security Deposit template",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityDepositTemplate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit template was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit template does not exist : {securityDepositTemplate ids}"
          }
        }
      }
    },
    "/v2/securityDeposit/securityDepositTemplate/changeStatus" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Change status of Security Deposit Template",
        "description" : "Change status of Security Deposit Template",
        "operationId" : "updateStatus_5",
        "requestBody" : {
          "description" : "Security Deposit template List",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SDTemplateListStatus"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Security deposit template  status was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following security deposit template does not exist : {securityDepositTemplate ids}"
          }
        }
      }
    },
    "/v2/setting/advanced" : {
      "put" : {
        "tags" : [ "Patch", "Advanced settings" ],
        "summary" : "Advanced settings",
        "description" : "Update Advanced settings",
        "operationId" : "patch",
        "requestBody" : {
          "description" : "Advanced settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AdvancedSettings"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Advanced settings was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "The AdvancedSettings does not exist"
          }
        }
      },
      "post" : {
        "tags" : [ "Post", "Advanced settings" ],
        "summary" : "Advanced settings",
        "description" : "Create Advanced settings",
        "operationId" : "create_51",
        "requestBody" : {
          "description" : "Advanced settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdvancedSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Advanced settings was successfully created"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/setting/advanced/{id}" : {
      "put" : {
        "tags" : [ "Put", "Advanced settings" ],
        "summary" : "Advanced settings",
        "description" : "Update Advanced settings",
        "operationId" : "update_52",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Advanced settings id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Advanced settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdvancedSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Advanced settings was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "The AdvancedSettings does not exist"
          }
        }
      }
    },
    "/v2/setting/globalSettings" : {
      "post" : {
        "tags" : [ "Post", "Global settings" ],
        "summary" : "Global settings",
        "description" : "Create Global settings",
        "operationId" : "create_52",
        "requestBody" : {
          "description" : "Global settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalSettingsInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Global settings was successfully created"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/setting/globalSettings/{id}" : {
      "put" : {
        "tags" : [ "Post", "Global settings" ],
        "summary" : "Global settings",
        "description" : "Update Global settings",
        "operationId" : "update_53",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Global settings id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Global settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalSettingsInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Global settings was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "The QuotesSettings does not exist"
          }
        }
      }
    },
    "/v2/setting/openOrderSettings" : {
      "post" : {
        "tags" : [ "Post" ],
        "summary" : "Create Open Order settings",
        "description" : "Create Open Order settings",
        "operationId" : "create_53",
        "requestBody" : {
          "description" : "Open Order settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderSettingInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Open Order settings was successfully created"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/v2/setting/openOrderSettings/{id}" : {
      "put" : {
        "tags" : [ "Put" ],
        "summary" : "Update Open Order settings",
        "description" : "Update Open Order settings",
        "operationId" : "update_54",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "contain the code of Open Order settings te be updated by its id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Open Order settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenOrderSettingInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Open Order settings was successfully updated"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Following Open Order settings does not exist : {OpenOrderSetting ids}"
          }
        }
      }
    },
    "/v2/standardReports/AgedReceivables/export/{fileFormat}" : {
      "post" : {
        "tags" : [ "AgedReceivables" ],
        "summary" : "Export aged balance",
        "description" : "Returns aged balance",
        "operationId" : "exportAgedReceivables",
        "parameters" : [ {
          "name" : "fileFormat",
          "in" : "path",
          "description" : "file format",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the AgedReceivables input object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenericPagingAndFiltering"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Exported aged balance ist"
          },
          "400" : {
            "description" : "No Data Found"
          }
        }
      }
    },
    "/v2/standardReports/AgedReceivables" : {
      "get" : {
        "tags" : [ "AgedReceivables" ],
        "summary" : "Return aged balance",
        "description" : "Returns aged balance",
        "operationId" : "getAgedReceivables",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 50
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerAccountCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "startDueDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDueDate",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "customerAccountDescription",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sellerDescription",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sellerCode",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoiceNumber",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stepInDays",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "numberOfPeriods",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tradingCurrency",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "funcCurrency",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "list of orders",
            "headers" : {
              "ETag" : {
                "description" : "a pseudo-unique identifier that represents the version of the data sent back.",
                "style" : "simple",
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders"
                }
              }
            }
          },
          "200" : {
            "description" : "aged balance list"
          },
          "404" : {
            "description" : "No data found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiException"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ActionStatus" : {
        "required" : [ "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Tells whether the instance of this status object is ok or not",
            "example" : "possible value are : SUCCESS, FAIL",
            "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string",
            "description" : "A detailed error message if applicable, can contain the entity id that was created"
          },
          "entityId" : {
            "type" : "integer",
            "description" : "The entity identifier after creation of an entity",
            "format" : "int64"
          },
          "entityCode" : {
            "type" : "string",
            "description" : "The entity code after creation of an entity"
          },
          "nrAffected" : {
            "type" : "integer",
            "description" : "Number of items/records affected by the action",
            "format" : "int32"
          }
        }
      },
      "ApiErrorCodeEnum" : {
        "type" : "object",
        "description" : "error code"
      },
      "BillingCycleDto" : {
        "required" : [ "calendar", "code", "invoiceDateDelayEL" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "billingTemplateName" : {
            "type" : "string"
          },
          "billingTemplateNameEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceDateDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDateDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dueDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceDateProductionDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceDateProductionDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDateDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastTransactionDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "lastTransactionDateEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "calendar" : {
            "type" : "string"
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "splitPerPaymentMethod" : {
            "type" : "boolean"
          },
          "invoiceTypeCode" : {
            "type" : "string"
          },
          "invoiceTypeEl" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "BILLINGACCOUNT", "SUBSCRIPTION", "ORDER" ]
          },
          "referenceDate" : {
            "type" : "string",
            "enum" : [ "TODAY", "NEXT_INVOICE_DATE", "LAST_TRANSACTION_DATE", "END_DATE" ]
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "collectionDateDelayEl" : {
            "type" : "string"
          },
          "computeDatesAtValidation" : {
            "type" : "boolean"
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "billingRunValidationScriptCode" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "disableAggregation" : {
            "type" : "boolean"
          },
          "useAccountingArticleLabel" : {
            "type" : "boolean"
          },
          "dateAggregation" : {
            "type" : "string",
            "enum" : [ "NO_DATE_AGGREGATION", "DAY_OF_USAGE_DATE", "WEEK_OF_USAGE_DATE", "MONTH_OF_USAGE_DATE" ]
          },
          "aggregateUnitAmounts" : {
            "type" : "boolean"
          },
          "ignoreSubscriptions" : {
            "type" : "boolean"
          },
          "ignoreOrders" : {
            "type" : "boolean"
          },
          "ignoreUserAccounts" : {
            "type" : "boolean"
          },
          "discountAggregation" : {
            "type" : "string",
            "description" : "Discount aggregation mode",
            "default" : "FULL_AGGREGATION",
            "enum" : [ "NO_AGGREGATION", "FULL_AGGREGATION", "NO_AGGREGATION", "FULL_AGGREGATION" ]
          },
          "incrementalInvoiceLines" : {
            "type" : "boolean",
            "description" : "Use incremental mode in invoice lines or not",
            "nullable" : true
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "reportConfig" : {
            "$ref" : "#/components/schemas/ReportConfig"
          },
          "additionalAggregationFields" : {
            "type" : "array",
            "description" : "List of additional aggregation criteria",
            "items" : {
              "type" : "string",
              "description" : "List of additional aggregation criteria"
            }
          },
          "ignoreServiceInstances" : {
            "type" : "boolean",
            "description" : "Decide if service instances will be added to invoice lines or ignored",
            "nullable" : true
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "transactionDateDelayEL" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "BillingCycle"
        }
      },
      "CustomFieldDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldType" : {
            "type" : "string",
            "enum" : [ "STRING", "DATE", "LONG", "DOUBLE", "LIST", "CHECKBOX_LIST", "ENTITY", "TEXT_AREA", "CHILD_ENTITY", "MULTI_VALUE", "BOOLEAN", "CUSTOM_TABLE_WRAPPER", "URL" ]
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "valueDate" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "valuePeriodStartDate" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "valuePeriodEndDate" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "valuePeriodPriority" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "stringValue" : {
            "type" : "string"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "longValue" : {
            "type" : "integer",
            "format" : "int64"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "booleanValue" : {
            "type" : "boolean"
          },
          "mapValue" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomFieldValueDto"
            }
          },
          "entityReferenceValue" : {
            "$ref" : "#/components/schemas/EntityReferenceDto"
          },
          "valueConverted" : {
            "type" : "object"
          },
          "indexType" : {
            "type" : "string",
            "enum" : [ "STORE_ONLY", "INDEX", "INDEX_NOT_ANALYZE" ]
          },
          "fileValue" : {
            "type" : "string"
          },
          "formattedValue" : {
            "$ref" : "#/components/schemas/CustomFieldFormattedValueDto"
          },
          "urlReferenceValue" : {
            "$ref" : "#/components/schemas/UrlReferenceDto"
          },
          "guiPosition" : {
            "type" : "string"
          },
          "customTableCode" : {
            "type" : "string"
          },
          "dataFilter" : {
            "type" : "string"
          },
          "fields" : {
            "type" : "string"
          },
          "applicableOnEl" : {
            "type" : "boolean"
          },
          "applicableOnElExpression" : {
            "type" : "string"
          },
          "value" : {
            "type" : "array",
            "xml" : {
              "name" : "listValue",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldValueDto"
            }
          }
        },
        "xml" : {
          "name" : "CustomField"
        }
      },
      "CustomFieldFormattedValueDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "singleValue" : {
            "type" : "string"
          },
          "listValue" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mapValue" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "CustomFieldValueDto" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object"
          },
          "empty" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "CustomFieldValue"
        }
      },
      "CustomFieldsDto" : {
        "type" : "object",
        "properties" : {
          "customField" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldDto"
            }
          },
          "inheritedCustomField" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldDto"
            }
          }
        },
        "description" : "custom field associated to dunning action",
        "xml" : {
          "name" : "CustomFields"
        }
      },
      "EntityReferenceDto" : {
        "type" : "object",
        "properties" : {
          "classname" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "empty" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "EntityReference"
        }
      },
      "LanguageDescriptionDto" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        },
        "description" : "Descriptions of the language in different languages"
      },
      "ReportConfig" : {
        "type" : "object",
        "properties" : {
          "preReportAutoOnCreate" : {
            "type" : "boolean",
            "description" : "Decide if billing run report will be generated during billing run creation",
            "nullable" : true
          },
          "preReportAutoOnInvoiceLinesJob" : {
            "type" : "boolean",
            "description" : "Decide if billing run report will be generated after invoice line job",
            "nullable" : true
          },
          "displayBillingAccounts" : {
            "type" : "boolean",
            "description" : "Pilots computation and display of billing accounts block",
            "nullable" : true
          },
          "displaySubscriptions" : {
            "type" : "boolean",
            "description" : "Pilots computation and display of subscriptions block",
            "nullable" : true
          },
          "displayOffers" : {
            "type" : "boolean",
            "description" : "Pilots computation and display of offers block",
            "nullable" : true
          },
          "displayProducts" : {
            "type" : "boolean",
            "description" : "Pilots computation and display of products block",
            "nullable" : true
          },
          "displayArticles" : {
            "type" : "boolean",
            "description" : "Pilots computation and display of articles block",
            "nullable" : true
          },
          "blockSizeBillingAccounts" : {
            "type" : "integer",
            "description" : "Report billing accounts block size between 1 and 100",
            "format" : "int32",
            "nullable" : true
          },
          "blockSizeSubscriptions" : {
            "type" : "integer",
            "description" : "Report subscriptions block size between 1 and 100",
            "format" : "int32",
            "nullable" : true
          },
          "blockSizeOffers" : {
            "type" : "integer",
            "description" : "Report offers block size between 1 and 100",
            "format" : "int32",
            "nullable" : true
          },
          "blockSizeProducts" : {
            "type" : "integer",
            "description" : "Report products block size between 1 and 100",
            "format" : "int32",
            "nullable" : true
          },
          "blockSizeArticles" : {
            "type" : "integer",
            "description" : "Report articles block size between 1 and 100",
            "format" : "int32",
            "nullable" : true
          }
        },
        "description" : "Billing cycle report config",
        "nullable" : true,
        "xml" : {
          "name" : "ReportConfig"
        }
      },
      "UrlReferenceDto" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "regexp" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "length" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "GetBillingCycleResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/BillingCycleDto"
          }
        },
        "xml" : {
          "name" : "GetBillingCycleResponse"
        }
      },
      "BillingCyclesDto" : {
        "type" : "object",
        "properties" : {
          "billingCycle" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingCycleDto"
            }
          }
        },
        "xml" : {
          "name" : "BillingCycles"
        }
      },
      "BillingCyclesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "billingCycles" : {
            "$ref" : "#/components/schemas/BillingCyclesDto"
          }
        },
        "xml" : {
          "name" : "BillingCyclesResponse"
        }
      },
      "PagingAndFiltering" : {
        "type" : "object",
        "properties" : {
          "fullTextFilter" : {
            "type" : "string",
            "description" : "Full text search filter. Mutually exclusive with filters attribute. fullTextFilter has priority"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Search filters (key = Filter key, value = search pattern or value).",
              "example" : "<ul>\r\n<li>invoice number equals '1578AU': Filter key: invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is not '1578AU': Filter key: ne invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is null: Filter key: invoiceNumber. Filter value: IS_NULL</li>\r\n<li>invoice number is not empty: Filter key: invoiceNumber. Filter value: IS_NOT_NULL</li>\r\n<li>Invoice date is between 2017-05-01 and 2017-06-01: Filter key: fromRange invoiceDate. Filter value: 2017-05-01 Filter key: toRange invoiceDate. Filter value:\r\n2017-06-01</li>\r\n<li>Date is between creation and update dates: Filter key: minmaxRange audit.created audit.updated. Filter value: 2017-05-25</li>\r\n<li>invoice number is any of 158AU, 159KU or 189LL: Filter key: inList invoiceNumber. Filter value: 158AU,159KU,189LL</li>\r\n<li>any of param1, param2 or param3 fields contains 'energy': Filter key: wildcardOr param1 param2 param3. Filter value: energy</li>\r\n<li>any of param1, param2 or param3 fields start with 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: *energy</li>\r\n<li>any of param1, param2 or param3 fields is 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: energy</li>\r\n</ul>"
            },
            "description" : "Search filters (key = Filter key, value = search pattern or value).",
            "example" : "<ul>\r\n<li>invoice number equals '1578AU': Filter key: invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is not '1578AU': Filter key: ne invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is null: Filter key: invoiceNumber. Filter value: IS_NULL</li>\r\n<li>invoice number is not empty: Filter key: invoiceNumber. Filter value: IS_NOT_NULL</li>\r\n<li>Invoice date is between 2017-05-01 and 2017-06-01: Filter key: fromRange invoiceDate. Filter value: 2017-05-01 Filter key: toRange invoiceDate. Filter value:\r\n2017-06-01</li>\r\n<li>Date is between creation and update dates: Filter key: minmaxRange audit.created audit.updated. Filter value: 2017-05-25</li>\r\n<li>invoice number is any of 158AU, 159KU or 189LL: Filter key: inList invoiceNumber. Filter value: 158AU,159KU,189LL</li>\r\n<li>any of param1, param2 or param3 fields contains 'energy': Filter key: wildcardOr param1 param2 param3. Filter value: energy</li>\r\n<li>any of param1, param2 or param3 fields start with 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: *energy</li>\r\n<li>any of param1, param2 or param3 fields is 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: energy</li>\r\n</ul>"
          },
          "fields" : {
            "type" : "string",
            "description" : "Data retrieval options/fieldnames separated by a comma"
          },
          "offset" : {
            "type" : "integer",
            "description" : "Pagination - from record number",
            "format" : "int32"
          },
          "limit" : {
            "type" : "integer",
            "description" : "Pagination - number of items to retrieve",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string",
            "description" : "Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields"
          },
          "sortOrder" : {
            "type" : "string",
            "description" : "Sorting - sort ordee",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          },
          "multiSortOrder" : {
            "type" : "string"
          },
          "totalNumberOfRecords" : {
            "type" : "integer",
            "format" : "int32"
          },
          "loadReferenceDepth" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CalendarDateIntervalDto" : {
        "type" : "object",
        "properties" : {
          "intervalBegin" : {
            "type" : "integer",
            "description" : "The interval begin",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "intervalEnd" : {
            "type" : "integer",
            "description" : "The interval end",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "description" : "List of intervals",
        "xml" : {
          "name" : "CalendarDateInterval"
        }
      },
      "CalendarDto" : {
        "required" : [ "calendarType", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "calendarType" : {
            "type" : "string",
            "description" : "calendar type",
            "example" : "possible value are : YEARLY, DAILY, PERIOD, INTERVAL, INTERSECT, UNION, APPEND, BANKING, FIXED",
            "enum" : [ "YEARLY", "DAILY", "PERIOD", "INTERVAL", "INTERSECT", "UNION", "APPEND", "BANKING", "FIXED" ]
          },
          "fixedDates" : {
            "type" : "array",
            "description" : "list of fixed date",
            "items" : {
              "type" : "string",
              "description" : "list of fixed date"
            }
          },
          "days" : {
            "type" : "array",
            "description" : "list of the day",
            "items" : {
              "$ref" : "#/components/schemas/DayInYearDto"
            }
          },
          "hours" : {
            "type" : "array",
            "description" : "list of the hour",
            "items" : {
              "$ref" : "#/components/schemas/HourInDayDto"
            }
          },
          "periodLength" : {
            "type" : "integer",
            "description" : "Period length",
            "format" : "int32"
          },
          "periodUnit" : {
            "type" : "string",
            "description" : "Period measurement unit",
            "example" : "MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, SECOND",
            "enum" : [ "MONTH", "DAY_OF_MONTH", "HOUR_OF_DAY", "MINUTE", "SECOND" ]
          },
          "nbPeriods" : {
            "type" : "integer",
            "description" : "Number of periods",
            "format" : "int32"
          },
          "joinCalendar1Code" : {
            "type" : "string",
            "description" : "Code of the first calendar to intersect/union"
          },
          "joinCalendar2Code" : {
            "type" : "string",
            "description" : "Code of the second calendar to intersect/union"
          },
          "intervalType" : {
            "type" : "string",
            "description" : "Interval type",
            "example" : "possible value are : DAY, HOUR, WDAY",
            "enum" : [ "DAY", "HOUR", "WDAY" ]
          },
          "intervals" : {
            "type" : "array",
            "description" : "List of intervals",
            "items" : {
              "$ref" : "#/components/schemas/CalendarDateIntervalDto"
            }
          },
          "weekendBegin" : {
            "type" : "integer",
            "description" : "The weekend begin",
            "format" : "int32"
          },
          "weekendEnd" : {
            "type" : "integer",
            "format" : "int32"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end dat",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date",
            "format" : "date-time"
          },
          "initDateEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Calendar initialization date - expression to determine a value for calendar initialization date"
          },
          "holidays" : {
            "type" : "array",
            "description" : "list of the days of holiday",
            "items" : {
              "$ref" : "#/components/schemas/CalendarHolidayDto"
            }
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "lsit of language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "description" : "calendar associated to subscription renewal"
      },
      "CalendarHolidayDto" : {
        "type" : "object",
        "properties" : {
          "holidayBegin" : {
            "type" : "integer",
            "description" : "The holiday begin",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "holidayEnd" : {
            "type" : "integer",
            "description" : "The holiday end",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "description" : "list of the days of holiday",
        "xml" : {
          "name" : "CalendarHoliday"
        }
      },
      "DayInYearDto" : {
        "type" : "object",
        "properties" : {
          "day" : {
            "type" : "integer",
            "description" : "day in the year",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "month" : {
            "type" : "string",
            "description" : "month of the year",
            "example" : "possible value are : JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" ]
          }
        },
        "description" : "list of the day",
        "xml" : {
          "name" : "DayInYear"
        }
      },
      "HourInDayDto" : {
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "description" : "hour",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "min" : {
            "type" : "integer",
            "description" : "minute of the hours",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "description" : "list of the hour",
        "xml" : {
          "name" : "HourInDay"
        }
      },
      "GetCalendarResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "calendar" : {
            "$ref" : "#/components/schemas/CalendarDto"
          }
        },
        "xml" : {
          "name" : "GetCalendarResponse"
        }
      },
      "BankingDateStatusDto" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "isWorkingDate" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "workingDate" : {
            "type" : "boolean"
          }
        }
      },
      "BankingDateStatusResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "bankingDateStatus" : {
            "$ref" : "#/components/schemas/BankingDateStatusDto"
          }
        },
        "xml" : {
          "name" : "BankingDateStatusResponse"
        }
      },
      "CalendarsDto" : {
        "type" : "object",
        "properties" : {
          "calendar" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CalendarDto"
            }
          }
        },
        "xml" : {
          "name" : "Calendars"
        }
      },
      "ListCalendarResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "calendars" : {
            "$ref" : "#/components/schemas/CalendarsDto"
          }
        },
        "xml" : {
          "name" : "ListCalendarResponse"
        }
      },
      "GetConfigurationResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PropertyDto"
            }
          }
        },
        "xml" : {
          "name" : "GetConfigurationResponse"
        }
      },
      "PropertyDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "ConfigurationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "PropertiesDto" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PropertyDto"
            }
          }
        }
      },
      "CountryIsoDto" : {
        "required" : [ "currencyCode", "languageCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "countryCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "currencyCode" : {
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "CountryIso"
        }
      },
      "GetCountryIsoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "country" : {
            "$ref" : "#/components/schemas/CountryIsoDto"
          }
        },
        "xml" : {
          "name" : "GetCountryIsoResponse"
        }
      },
      "GetCountriesIsoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "countries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CountryIsoDto"
            }
          }
        },
        "xml" : {
          "name" : "GetCountriesIsoResponse"
        }
      },
      "CountryDto" : {
        "required" : [ "currencyCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "countryCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "currencyCode" : {
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "entityId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "Country"
        }
      },
      "GetTradingCountryResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "country" : {
            "$ref" : "#/components/schemas/CountryDto"
          }
        },
        "xml" : {
          "name" : "GetTradingCountryResponse"
        }
      },
      "TradingCountriesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "country" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TradingCountryDto"
            }
          }
        }
      },
      "TradingCountriesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "tradingCountries" : {
            "$ref" : "#/components/schemas/TradingCountriesDto"
          }
        },
        "xml" : {
          "name" : "CountriesResponse"
        }
      },
      "TradingCountryDto" : {
        "required" : [ "currencyCode", "languageCode" ],
        "type" : "object",
        "properties" : {
          "countryCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "currencyCode" : {
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          }
        }
      },
      "CurrencyIsoDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "CurrencyIso"
        }
      },
      "GetCurrencyIsoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "currency" : {
            "$ref" : "#/components/schemas/CurrencyIsoDto"
          }
        },
        "xml" : {
          "name" : "GetCurrencyIsoResponse"
        }
      },
      "GetCurrenciesIsoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "currencies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CurrencyIsoDto"
            }
          }
        },
        "xml" : {
          "name" : "GetCurrenciesIsoResponse"
        }
      },
      "ExchangeRateDto" : {
        "type" : "object",
        "properties" : {
          "fromDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "exchangeRate" : {
            "type" : "number"
          }
        }
      },
      "Link" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "title" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string",
            "format" : "uri"
          },
          "uriBuilder" : {
            "$ref" : "#/components/schemas/UriBuilder"
          },
          "rel" : {
            "type" : "string"
          },
          "rels" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Resource" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UriBuilder" : {
        "type" : "object"
      },
      "CurrencyDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "prCurrencyToThis" : {
            "type" : "number"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "symbol" : {
            "type" : "string"
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "Currency"
        }
      },
      "GetTradingCurrencyResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "currency" : {
            "$ref" : "#/components/schemas/CurrencyDto"
          }
        },
        "xml" : {
          "name" : "GetTradingCurrencyResponse"
        }
      },
      "FileUploadForm" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "filename" : {
            "type" : "string"
          },
          "fileFormat" : {
            "type" : "string"
          }
        }
      },
      "CurrenciesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "currency" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CurrencyDto"
            }
          }
        },
        "xml" : {
          "name" : "Currencies"
        }
      },
      "TradingCurrenciesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "tradingCurrencies" : {
            "$ref" : "#/components/schemas/CurrenciesDto"
          }
        },
        "xml" : {
          "name" : "TradingCurrenciesResponse"
        }
      },
      "FilterDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "shared" : {
            "type" : "boolean"
          },
          "inputXml" : {
            "type" : "string"
          },
          "pollingQuery" : {
            "type" : "string"
          },
          "entityClass" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "description" : "Filters on RT",
        "xml" : {
          "name" : "Filter"
        }
      },
      "GetFilterResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterDto"
          }
        },
        "xml" : {
          "name" : "GetFilterResponseDto"
        }
      },
      "GenericCodeDto" : {
        "type" : "object",
        "properties" : {
          "formatEL" : {
            "type" : "string"
          },
          "entityClass" : {
            "type" : "string"
          },
          "prefixOverride" : {
            "type" : "string"
          },
          "sequenceDto" : {
            "$ref" : "#/components/schemas/SequenceDto"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sequence" : {
            "$ref" : "#/components/schemas/SequenceDto"
          }
        },
        "xml" : {
          "name" : "GenericCodeDto"
        }
      },
      "SequenceDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "prefixEL" : {
            "type" : "string"
          },
          "invoiceSequenceCode" : {
            "type" : "string"
          },
          "sequenceSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentInvoiceNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sequencePattern" : {
            "type" : "string"
          },
          "sequenceType" : {
            "type" : "string",
            "enum" : [ "RUM", "CUSTOMER_NO", "SEQUENCE", "NUMERIC", "ALPHA_UP", "UUID", "REGEXP" ]
          }
        }
      },
      "GetGenericCodeResponseDto" : {
        "type" : "object",
        "properties" : {
          "genericCodeDto" : {
            "$ref" : "#/components/schemas/GenericCodeDto"
          }
        },
        "xml" : {
          "name" : "GenericCodeResponse"
        }
      },
      "GenericCodeResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "generatedCode" : {
            "type" : "string"
          },
          "sequenceType" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "GenericCodeResponse"
        }
      },
      "InvoiceCategoryDto" : {
        "required" : [ "code", "occTemplateCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "occTemplateCode" : {
            "type" : "string"
          },
          "occTemplateNegativeCode" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "InvoiceCategory"
        }
      },
      "GetInvoiceCategoryResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoiceCategory" : {
            "$ref" : "#/components/schemas/InvoiceCategoryDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceCategoryResponse"
        }
      },
      "InvoiceCategoriesDto" : {
        "type" : "object",
        "properties" : {
          "invoiceCategory" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoiceCategories"
        }
      },
      "InvoiceCategoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "invoiceCategories" : {
            "$ref" : "#/components/schemas/InvoiceCategoriesDto"
          }
        },
        "xml" : {
          "name" : "InvoiceCategoryResponse"
        }
      },
      "InvoiceSequenceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "sequenceSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentInvoiceNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sequencePattern" : {
            "type" : "string"
          },
          "sequenceType" : {
            "type" : "string",
            "enum" : [ "RUM", "CUSTOMER_NO", "SEQUENCE", "NUMERIC", "ALPHA_UP", "UUID", "REGEXP" ]
          }
        },
        "xml" : {
          "name" : "InvoiceSequence"
        }
      },
      "GetInvoiceSequenceResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoiceSequenceDto" : {
            "$ref" : "#/components/schemas/InvoiceSequenceDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceSequenceResponse"
        }
      },
      "GetInvoiceSequencesResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoiceSequencesDto" : {
            "$ref" : "#/components/schemas/InvoiceSequencesDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceSequencesResponse"
        }
      },
      "InvoiceSequencesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceSequences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceSequenceDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoiceSequences"
        }
      },
      "InvoiceSubCategoryDto" : {
        "required" : [ "accountingCode", "code", "invoiceCategory", "occTemplateCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "invoiceCategory" : {
            "type" : "string"
          },
          "accountingCode" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "occTemplateCode" : {
            "type" : "string"
          },
          "occTemplateNegativeCode" : {
            "type" : "string"
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "InvoiceSubCategory"
        }
      },
      "GetInvoiceSubCategoryResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceSubCategoryResponse"
        }
      },
      "InvoiceSubCategoriesDto" : {
        "type" : "object",
        "properties" : {
          "invoiceSubCategory" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceSubCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoiceSubCategories"
        }
      },
      "InvoiceSubCategoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "invoiceSubCategories" : {
            "$ref" : "#/components/schemas/InvoiceSubCategoriesDto"
          }
        },
        "xml" : {
          "name" : "InvoiceSubCategoryResponse"
        }
      },
      "InvoiceTypeDto" : {
        "required" : [ "code", "occTemplateCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "occTemplateCode" : {
            "type" : "string"
          },
          "occTemplateNegativeCode" : {
            "type" : "string"
          },
          "occTemplateCodeEl" : {
            "type" : "string"
          },
          "occTemplateNegativeCodeEl" : {
            "type" : "string"
          },
          "customInvoiceXmlScriptInstanceCode" : {
            "type" : "string"
          },
          "sequenceDto" : {
            "$ref" : "#/components/schemas/SequenceDto"
          },
          "invoiceValidationScriptCode" : {
            "type" : "string"
          },
          "sellerSequences" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SequenceDto"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "appliesTo" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "matchingAuto" : {
            "type" : "boolean"
          },
          "invoiceAccountable" : {
            "type" : "boolean"
          },
          "billingTemplateName" : {
            "type" : "string"
          },
          "pdfFilenameEL" : {
            "type" : "string"
          },
          "xmlFilenameEL" : {
            "type" : "string"
          },
          "billingTemplateNameEL" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "useSelfSequence" : {
            "type" : "boolean"
          },
          "mailingType" : {
            "type" : "string"
          },
          "emailTemplateCode" : {
            "type" : "string"
          },
          "excludeFromAgedTrialBalance" : {
            "type" : "boolean",
            "description" : "Exclude from Aged Trial Balance"
          },
          "invoiceCodeType" : {
            "type" : "string"
          },
          "vatPaymentOption" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "customUblScript" : {
            "type" : "string"
          }
        },
        "description" : "The Invoice Type",
        "xml" : {
          "name" : "InvoiceType"
        }
      },
      "GetInvoiceTypeResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoiceTypeDto" : {
            "$ref" : "#/components/schemas/InvoiceTypeDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceTypeResponse"
        }
      },
      "GetInvoiceTypesResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "invoiceTypesDto" : {
            "$ref" : "#/components/schemas/InvoiceTypesDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceTypesResponse"
        }
      },
      "InvoiceTypesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceTypeDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoiceTypes"
        }
      },
      "LanguageIsoDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "LanguageIso"
        }
      },
      "GetLanguageIsoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "language" : {
            "$ref" : "#/components/schemas/LanguageIsoDto"
          }
        },
        "xml" : {
          "name" : "GetLanguageIsoResponse"
        }
      },
      "GetLanguagesIsoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "languages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageIsoDto"
            }
          }
        },
        "xml" : {
          "name" : "GetLanguagesIsoResponse"
        }
      },
      "LanguageDto" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the language"
          },
          "code" : {
            "maxLength" : 3,
            "minLength" : 1,
            "type" : "string",
            "description" : "Code of the language"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "Descriptions of the language in different languages",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "GetTradingLanguageResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "language" : {
            "$ref" : "#/components/schemas/LanguageDto"
          }
        },
        "xml" : {
          "name" : "GetTradingLanguageResponse"
        }
      },
      "LanguagesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "language" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDto"
            }
          }
        },
        "xml" : {
          "name" : "Languages"
        }
      },
      "TradingLanguagesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "tradingLanguages" : {
            "$ref" : "#/components/schemas/LanguagesDto"
          }
        },
        "xml" : {
          "name" : "TradingLanguagesResponse"
        }
      },
      "ImportFileTypeDto" : {
        "required" : [ "fileName", "fileType" ],
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string",
            "description" : "Name of the uploaded file"
          },
          "fileType" : {
            "type" : "string",
            "description" : "Type of the uploaded file",
            "enum" : [ "CUSTOMER", "CUSTOMER_ACCOUNT", "PAYMENT_METHOD", "BILLING_ACCOUNT", "USER_ACCOUNT", "SUBSCRIPTION", "SERVICE_INSTANCE", "ATTRIBUTE_INSTANCE", "ACCESS_POINT", "COUNTER", "UNKNOWN" ]
          }
        }
      },
      "FileImportForm" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "filename" : {
            "type" : "string"
          },
          "files" : {
            "type" : "string"
          }
        }
      },
      "AccountingSchemeDto" : {
        "required" : [ "code", "scriptCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "longDescription" : {
            "type" : "string",
            "description" : "a long description"
          },
          "longDescriptionsTranslated" : {
            "type" : "array",
            "description" : "i18n a long description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "scriptCode" : {
            "type" : "string",
            "description" : "the script code"
          }
        },
        "xml" : {
          "name" : "AccountingScheme"
        }
      },
      "GetOccTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "occTemplate" : {
            "$ref" : "#/components/schemas/OccTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetOccTemplateResponse"
        }
      },
      "OccTemplateDto" : {
        "required" : [ "accountingCode", "code", "occCategory" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "accountingCode" : {
            "type" : "string"
          },
          "accountCode" : {
            "type" : "string"
          },
          "occCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "accountCodeClientSide" : {
            "type" : "string"
          },
          "journalCode" : {
            "type" : "string",
            "description" : "The journal code"
          },
          "accountingScheme" : {
            "$ref" : "#/components/schemas/AccountingSchemeDto"
          },
          "contractAccountingCode" : {
            "type" : "string",
            "description" : "contract accounting code",
            "xml" : {
              "name" : "contraAccountingCode"
            }
          },
          "contraAccountingCode2" : {
            "type" : "string",
            "description" : "contra Accounting Code 2"
          },
          "manualCreationEnabled" : {
            "type" : "boolean",
            "description" : "Flag manual creation enabled"
          }
        },
        "xml" : {
          "name" : "OCCTemplate"
        }
      },
      "GetOccTemplatesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "occTemplates" : {
            "$ref" : "#/components/schemas/OccTemplatesDto"
          }
        },
        "xml" : {
          "name" : "GetOccTemplatesResponse"
        }
      },
      "OccTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "occTemplate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OccTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "OCCTemplates"
        }
      },
      "PdfInvoiceResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "pdfInvoice" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          }
        },
        "xml" : {
          "name" : "PdfInvoiceResponse"
        }
      },
      "BankCoordinatesDto" : {
        "required" : [ "accountNumber", "accountOwner", "bankCode", "bankName", "bic", "branchCode", "iban", "key" ],
        "type" : "object",
        "properties" : {
          "bankCode" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string",
            "description" : "The bank code"
          },
          "branchCode" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string",
            "description" : "The branch code"
          },
          "accountNumber" : {
            "maxLength" : 11,
            "minLength" : 0,
            "type" : "string",
            "description" : "The account number"
          },
          "key" : {
            "maxLength" : 2,
            "minLength" : 0,
            "type" : "string",
            "description" : "The key"
          },
          "iban" : {
            "maxLength" : 34,
            "minLength" : 0,
            "type" : "string",
            "description" : "The iban"
          },
          "bic" : {
            "maxLength" : 11,
            "minLength" : 0,
            "type" : "string",
            "description" : "The bic"
          },
          "accountOwner" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "The account owner"
          },
          "bankName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "The bank name"
          },
          "bankId" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "The bank id"
          },
          "issuerNumber" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "The issuer number"
          },
          "issuerName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "The issuer name"
          },
          "ics" : {
            "maxLength" : 35,
            "minLength" : 0,
            "type" : "string",
            "description" : "The ics"
          },
          "empty" : {
            "type" : "boolean"
          }
        },
        "description" : "Bank account information",
        "xml" : {
          "name" : "BankCoordinates"
        }
      },
      "InvoiceConfigurationDto" : {
        "type" : "object",
        "properties" : {
          "displaySubscriptions" : {
            "type" : "boolean"
          },
          "displayServices" : {
            "type" : "boolean"
          },
          "displayOffers" : {
            "type" : "boolean"
          },
          "displayEdrs" : {
            "type" : "boolean"
          },
          "displayProvider" : {
            "type" : "boolean"
          },
          "displayCfAsXML" : {
            "type" : "boolean"
          },
          "displayPricePlans" : {
            "type" : "boolean"
          },
          "displayDetail" : {
            "type" : "boolean"
          },
          "displayChargesPeriods" : {
            "type" : "boolean"
          },
          "displayBillingCycle" : {
            "type" : "boolean"
          },
          "displayFreeTransacInInvoice" : {
            "type" : "boolean"
          },
          "displayOrders" : {
            "type" : "boolean"
          },
          "displayRatedItems" : {
            "type" : "boolean"
          },
          "currentInvoiceNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "displayWalletOperations" : {
            "type" : "boolean"
          },
          "defaultInvoiceSubcategoryCode" : {
            "type" : "string"
          },
          "defaultGenericArticleCode" : {
            "type" : "string"
          },
          "defaultDiscountArticleCode" : {
            "type" : "string"
          },
          "defaultAdvancedPaymentArticleCode" : {
            "type" : "string"
          },
          "defaultInvoiceMinimumArticleCode" : {
            "type" : "string"
          },
          "displayUserAccountHierarchy" : {
            "type" : "boolean"
          },
          "displayTaxDetails" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "InvoiceConfiguration"
        }
      },
      "PaymentPlanPolicyDto" : {
        "type" : "object",
        "properties" : {
          "defaultInstallmentCount" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "maxPaymentPlanDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultFeePerInstallmentPlan" : {
            "type" : "integer",
            "format" : "int32"
          },
          "installmentAmountRounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultInterestRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minAllowedReceivableAmount" : {
            "type" : "number"
          },
          "maxAllowedReceivableAmount" : {
            "type" : "number"
          },
          "minInstallmentAmount" : {
            "type" : "number"
          },
          "theresHoldForApproval" : {
            "type" : "number"
          },
          "splitEvenly" : {
            "type" : "boolean"
          },
          "allowCustomInstallmentPlan" : {
            "type" : "boolean"
          },
          "addInterestRate" : {
            "type" : "boolean"
          },
          "addInstallmentFee" : {
            "type" : "boolean"
          },
          "defaultBlockPayments" : {
            "type" : "boolean"
          },
          "requireInternalApproval" : {
            "type" : "boolean"
          },
          "defaultRecurrenceUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY" ]
          },
          "actionOnRemainingAmount" : {
            "type" : "string",
            "enum" : [ "FIRST", "LAST", "ADDITIONAL" ]
          },
          "clearingPriority" : {
            "type" : "string",
            "enum" : [ "NEWEST", "OLDEST", "SMALLEST", "BIGGEST" ]
          },
          "allowedPaymentMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
            }
          },
          "dunningDefaultPauseReason" : {
            "type" : "integer",
            "format" : "int64"
          },
          "defaultStartingDateOfPlan" : {
            "type" : "string",
            "enum" : [ "TODAY", "LAST_DAY_OF_CURRENT_MONTH", "FIRST_DAY_OF_NEXT_MONTH" ]
          },
          "allowedCreditCategories" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "xml" : {
          "name" : "PaymentPlanPolicy"
        }
      },
      "ProviderDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "multiCurrency" : {
            "type" : "boolean"
          },
          "multiCountry" : {
            "type" : "boolean"
          },
          "multiLanguage" : {
            "type" : "boolean"
          },
          "userAccount" : {
            "type" : "string"
          },
          "enterprise" : {
            "type" : "boolean"
          },
          "levelDuplication" : {
            "type" : "boolean"
          },
          "rounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "invoiceRounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceRoundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "prepaidReservationExpirationDelayinMillisec" : {
            "type" : "integer",
            "format" : "int64"
          },
          "discountAccountingCode" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          },
          "paymentPlanPolicy" : {
            "$ref" : "#/components/schemas/PaymentPlanPolicyDto"
          },
          "recognizeRevenue" : {
            "type" : "boolean"
          },
          "invoiceConfiguration" : {
            "$ref" : "#/components/schemas/InvoiceConfigurationDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "cdrDeduplicationKeyEL" : {
            "type" : "string"
          },
          "isoICDCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Provider"
        }
      },
      "GetProviderResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "provider" : {
            "$ref" : "#/components/schemas/ProviderDto"
          }
        },
        "xml" : {
          "name" : "GetProviderResponse"
        }
      },
      "CreditCategoriesDto" : {
        "type" : "object",
        "properties" : {
          "creditCategory" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreditCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "CreditCategories"
        }
      },
      "CreditCategoryDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "CreditCategory"
        }
      },
      "GetCustomerAccountConfigurationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
            }
          },
          "creditCategories" : {
            "$ref" : "#/components/schemas/CreditCategoriesDto"
          }
        },
        "xml" : {
          "name" : "GetCustomerAccountConfigurationResponse"
        }
      },
      "CustomerBrandDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          }
        },
        "xml" : {
          "name" : "CustomerBrand"
        }
      },
      "CustomerBrandsDto" : {
        "type" : "object",
        "properties" : {
          "customerBrand" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerBrandDto"
            }
          }
        },
        "xml" : {
          "name" : "CustomerBrands"
        }
      },
      "CustomerCategoriesDto" : {
        "type" : "object",
        "properties" : {
          "customerCategory" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "CustomerCategories"
        }
      },
      "CustomerCategoryDto" : {
        "required" : [ "accountingCode", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "exoneratedFromTaxes" : {
            "type" : "boolean",
            "description" : "The exonerated from taxes"
          },
          "exonerationTaxEl" : {
            "type" : "string",
            "description" : "The exoneration tax el"
          },
          "exonerationReason" : {
            "type" : "string",
            "description" : "The exoneration reason"
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "taxCategoryCode" : {
            "type" : "string",
            "description" : "Account tax category code"
          },
          "taxCategoryEl" : {
            "type" : "string",
            "description" : "Expression to determine tax category code"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "defaultSellerCode" : {
            "type" : "string",
            "description" : "Default seller code"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "CustomerCategory"
        }
      },
      "GetCustomerConfigurationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customerBrands" : {
            "$ref" : "#/components/schemas/CustomerBrandsDto"
          },
          "customerCategories" : {
            "$ref" : "#/components/schemas/CustomerCategoriesDto"
          },
          "titles" : {
            "$ref" : "#/components/schemas/TitlesDto"
          }
        },
        "xml" : {
          "name" : "GetCustomerConfigurationResponse"
        }
      },
      "TitleDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if the title is a  company",
            "default" : false
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "Title"
        }
      },
      "TitlesDto" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TitleDto"
            }
          }
        },
        "xml" : {
          "name" : "Titles"
        }
      },
      "GetInvoicingConfigurationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "calendars" : {
            "$ref" : "#/components/schemas/CalendarsDto"
          },
          "taxes" : {
            "$ref" : "#/components/schemas/TaxesDto"
          },
          "invoiceCategories" : {
            "$ref" : "#/components/schemas/InvoiceCategoriesDto"
          },
          "invoiceSubCategories" : {
            "$ref" : "#/components/schemas/InvoiceSubCategoriesDto"
          },
          "billingCycles" : {
            "$ref" : "#/components/schemas/BillingCyclesDto"
          },
          "terminationReasons" : {
            "$ref" : "#/components/schemas/TerminationReasonsDto"
          }
        },
        "xml" : {
          "name" : "GetInvoicingConfigurationResponse"
        }
      },
      "TaxDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "percent" : {
            "type" : "number"
          },
          "accountingCode" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "composite" : {
            "type" : "boolean"
          },
          "subTaxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxDto"
            }
          },
          "taxationCategory" : {
            "type" : "string"
          },
          "vatex" : {
            "type" : "string"
          }
        },
        "description" : "Tax applied",
        "xml" : {
          "name" : "Tax"
        }
      },
      "TaxesDto" : {
        "type" : "object",
        "properties" : {
          "tax" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxDto"
            }
          }
        },
        "xml" : {
          "name" : "Taxes"
        }
      },
      "TerminationReasonDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "applyAgreement" : {
            "type" : "boolean"
          },
          "invoiceAgreementImmediately" : {
            "type" : "boolean"
          },
          "applyReimbursment" : {
            "type" : "boolean"
          },
          "applyTerminationCharges" : {
            "type" : "boolean"
          },
          "overrideProrata" : {
            "type" : "string",
            "enum" : [ "NO_OVERRIDE", "PRORATA", "NO_PRORATA" ]
          },
          "reimburseOneshots" : {
            "type" : "boolean"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "TerminationReasonDto"
        }
      },
      "TerminationReasonsDto" : {
        "type" : "object",
        "properties" : {
          "terminationReason" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TerminationReasonDto"
            }
          }
        },
        "xml" : {
          "name" : "TerminationReasonDto"
        }
      },
      "CountriesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "country" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CountryDto"
            }
          }
        },
        "xml" : {
          "name" : "Countries"
        }
      },
      "GetTradingConfigurationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "countries" : {
            "$ref" : "#/components/schemas/CountriesDto"
          },
          "currencies" : {
            "$ref" : "#/components/schemas/CurrenciesDto"
          },
          "languages" : {
            "$ref" : "#/components/schemas/LanguagesDto"
          }
        },
        "xml" : {
          "name" : "GetTradingConfigurationResponse"
        }
      },
      "ProvidersDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "providers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProviderDto"
            }
          }
        },
        "xml" : {
          "name" : "Providers"
        }
      },
      "QueryResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "result" : {
            "type" : "string"
          }
        }
      },
      "RoleDto" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the role",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "short description of the role",
            "xml" : {
              "attribute" : true
            }
          },
          "roles" : {
            "type" : "array",
            "description" : "roles attached to this role",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RoleDto"
            }
          },
          "securedEntities" : {
            "type" : "array",
            "description" : "list of the secured entities",
            "xml" : {
              "name" : "accessibleEntities",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/SecuredEntityDto"
            }
          },
          "uuid" : {
            "type" : "string",
            "description" : "uuid set automatically"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "replicateInKc" : {
            "type" : "boolean",
            "description" : "replicate in KC"
          }
        },
        "xml" : {
          "name" : "Role"
        }
      },
      "SecuredEntityDto" : {
        "required" : [ "disabled", "entityClass", "entityCode", "entityId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "entityId" : {
            "type" : "integer",
            "description" : "The entity id",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "entityCode" : {
            "type" : "string",
            "description" : "The entity code",
            "xml" : {
              "name" : "code",
              "attribute" : true
            }
          },
          "entityClass" : {
            "type" : "string",
            "description" : "The entity class (a simple name)",
            "xml" : {
              "attribute" : true
            }
          },
          "permission" : {
            "type" : "string",
            "description" : "Allowed action to perform on the entity",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "READ", "UPDATE", "DELETE" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "indicate of the entity is disabled",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          }
        },
        "description" : "list of secured entities associated to the user",
        "xml" : {
          "name" : "SecuredEntity"
        }
      },
      "GetRoleResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "roleDto" : {
            "$ref" : "#/components/schemas/RoleDto"
          }
        },
        "xml" : {
          "name" : "GetRoleResponse"
        }
      },
      "RolesDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "roles" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RoleDto"
            }
          }
        },
        "xml" : {
          "name" : "Roles"
        }
      },
      "ScriptInstanceErrorDto" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "lineNumber" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "columnNumber" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "message" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ScriptInstanceError"
        }
      },
      "ScriptInstanceReponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "compilationErrors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ScriptInstanceErrorDto"
            }
          }
        },
        "xml" : {
          "name" : "ScriptInstanceResponse"
        }
      },
      "ScriptInstanceDto" : {
        "required" : [ "code", "script" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "JAVA", "JAVA_CLASS" ]
          },
          "reuse" : {
            "type" : "boolean"
          },
          "script" : {
            "type" : "string"
          },
          "pool" : {
            "$ref" : "#/components/schemas/ScriptPoolDto"
          },
          "executionRoles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sourcingRoles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scriptInstanceCategoryCode" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "scriptParameters" : {
            "type" : "array",
            "description" : "list of the script parameters",
            "items" : {
              "$ref" : "#/components/schemas/ScriptParameterDto"
            }
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "ScriptInstance"
        }
      },
      "ScriptParameterDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "className" : {
            "type" : "string",
            "description" : "The class name"
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "The default value"
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "Field mandatory"
          },
          "allowedValues" : {
            "type" : "string",
            "description" : "The allowed values"
          },
          "valuesSeparator" : {
            "type" : "string",
            "description" : "The values separator"
          },
          "collection" : {
            "type" : "boolean",
            "description" : "Field collection"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Script parameter filters"
            },
            "description" : "Script parameter filters"
          }
        },
        "description" : "list of the script parameters",
        "xml" : {
          "name" : "ScriptParameter"
        }
      },
      "ScriptPoolDto" : {
        "type" : "object",
        "properties" : {
          "usePool" : {
            "type" : "boolean"
          },
          "min" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxIdleTime" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EntityTag" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "weak" : {
            "type" : "boolean"
          }
        }
      },
      "MediaType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "subtype" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "wildcardType" : {
            "type" : "boolean"
          },
          "wildcardSubtype" : {
            "type" : "boolean"
          }
        }
      },
      "MultivaluedMapStringObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "MultivaluedMapStringString" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "NewCookie" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "path" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "maxAge" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expiry" : {
            "type" : "string",
            "format" : "date-time"
          },
          "secure" : {
            "type" : "boolean"
          },
          "httpOnly" : {
            "type" : "boolean"
          },
          "sameSite" : {
            "type" : "string",
            "enum" : [ "NONE", "LAX", "STRICT" ]
          }
        }
      },
      "Response" : {
        "type" : "object",
        "properties" : {
          "length" : {
            "type" : "integer",
            "format" : "int32"
          },
          "location" : {
            "type" : "string",
            "format" : "uri"
          },
          "language" : {
            "type" : "object",
            "properties" : {
              "language" : {
                "type" : "string"
              },
              "displayName" : {
                "type" : "string"
              },
              "country" : {
                "type" : "string"
              },
              "variant" : {
                "type" : "string"
              },
              "script" : {
                "type" : "string"
              },
              "unicodeLocaleAttributes" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "unicodeLocaleKeys" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "displayLanguage" : {
                "type" : "string"
              },
              "displayScript" : {
                "type" : "string"
              },
              "displayCountry" : {
                "type" : "string"
              },
              "displayVariant" : {
                "type" : "string"
              },
              "extensionKeys" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "iso3Language" : {
                "type" : "string"
              },
              "iso3Country" : {
                "type" : "string"
              }
            }
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "headers" : {
            "type" : "object",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              }
            },
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "status" : {
            "type" : "integer",
            "format" : "int32"
          },
          "metadata" : {
            "type" : "object",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              }
            },
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "entity" : {
            "type" : "object"
          },
          "closed" : {
            "type" : "boolean"
          },
          "links" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "cookies" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/NewCookie"
            }
          },
          "statusInfo" : {
            "$ref" : "#/components/schemas/StatusType"
          },
          "mediaType" : {
            "$ref" : "#/components/schemas/MediaType"
          },
          "allowedMethods" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "entityTag" : {
            "$ref" : "#/components/schemas/EntityTag"
          },
          "stringHeaders" : {
            "type" : "object",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              }
            },
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "StatusType" : {
        "type" : "object",
        "properties" : {
          "family" : {
            "type" : "string",
            "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
          },
          "statusCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reasonPhrase" : {
            "type" : "string"
          }
        }
      },
      "GetScriptInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          }
        },
        "xml" : {
          "name" : "GetScriptInstanceResponse"
        }
      },
      "AccessDto" : {
        "required" : [ "subscription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the access",
            "xml" : {
              "attribute" : true
            }
          },
          "subscription" : {
            "type" : "string",
            "description" : "code of the subscription"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "description" : "code of existing ",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "start date of the access",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "end date of the access",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "subscriptionValidity" : {
            "type" : "string",
            "format" : "date-time",
            "writeOnly" : true
          }
        },
        "xml" : {
          "name" : "Access"
        }
      },
      "AccessesDto" : {
        "type" : "object",
        "properties" : {
          "access" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccessDto"
            }
          }
        }
      },
      "AccountOperationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of account operation",
            "format" : "int64"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "description" : "The type"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "he transaction date",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "description" : "The transaction category",
            "example" : "possible value are : DEBIT, CREDIT",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference"
          },
          "accountCode" : {
            "type" : "string",
            "description" : "The account code",
            "deprecated" : true
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "accountCodeClientSide" : {
            "type" : "string",
            "description" : "The account code client side",
            "deprecated" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "The tax amount"
          },
          "matchingAmount" : {
            "type" : "number",
            "description" : "The matching amount"
          },
          "unMatchingAmount" : {
            "type" : "number",
            "description" : "The un matching amount"
          },
          "matchingStatus" : {
            "type" : "string",
            "description" : "The matching status",
            "example" : "possible value are: O, L, P, C, I, R",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "code" : {
            "type" : "string",
            "description" : "The occ code"
          },
          "description" : {
            "type" : "string",
            "description" : "The occ description"
          },
          "customerAccount" : {
            "type" : "string",
            "description" : "The customer account"
          },
          "excludedFromDunning" : {
            "type" : "boolean",
            "description" : "The excluded from dunning"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "The order number",
            "example" : "ORDER_1|ORDER_2|ORDER_3"
          },
          "matchingAmounts" : {
            "$ref" : "#/components/schemas/MatchingAmountsDto"
          },
          "otherCreditAndCharge" : {
            "$ref" : "#/components/schemas/OtherCreditAndChargeDto"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPaymentDto"
          },
          "bankLot" : {
            "type" : "string",
            "description" : "The bank lot"
          },
          "bankReference" : {
            "type" : "string",
            "description" : "The bank reference"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "description" : "The bank collection date",
            "format" : "date-time"
          },
          "depositDate" : {
            "type" : "string",
            "description" : "The deposit date",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "paymentInfo" : {
            "type" : "string",
            "description" : "The payment info"
          },
          "paymentInfo1" : {
            "type" : "string",
            "description" : "bank code"
          },
          "paymentInfo2" : {
            "type" : "string",
            "description" : "code guichet"
          },
          "paymentInfo3" : {
            "type" : "string",
            "description" : "Num compte"
          },
          "paymentInfo4" : {
            "type" : "string",
            "description" : "RIB"
          },
          "paymentInfo5" : {
            "type" : "string",
            "description" : "bankName"
          },
          "paymentInfo6" : {
            "type" : "string",
            "description" : "bic"
          },
          "billingAccountName" : {
            "type" : "string",
            "description" : "The billing account name"
          },
          "collectionDate" : {
            "type" : "string",
            "description" : "A collection date",
            "format" : "date-time"
          },
          "journalCode" : {
            "type" : "string",
            "description" : "The journal code"
          },
          "status" : {
            "type" : "string",
            "description" : "Account operation status",
            "example" : "possible value are : POSTED, REJECTED, EXPORTED",
            "default" : "POSTED",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Account operation rejection reason",
            "example" : "possible value are : REJECTED, FORCED, CLOSED_PERIOD",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "accountingExportFile" : {
            "type" : "string",
            "description" : "Accounting export file"
          },
          "accountingDate" : {
            "type" : "string",
            "description" : "Accounting date",
            "format" : "date-time"
          },
          "transactionalCurrency" : {
            "type" : "string",
            "description" : "TransactionalCurrency"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          }
        },
        "xml" : {
          "name" : "AccountOperation"
        }
      },
      "AccountOperationsDto" : {
        "type" : "object",
        "properties" : {
          "accountOperation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperationDto"
            }
          }
        },
        "description" : "The list ao paid",
        "xml" : {
          "name" : "AccountOperationsDto"
        }
      },
      "AdditionalDetailsDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "companyName" : {
            "type" : "string",
            "description" : "name of the company"
          },
          "position" : {
            "type" : "string",
            "description" : "position"
          },
          "instantMessengers" : {
            "type" : "string",
            "description" : "instant messenger"
          }
        },
        "description" : "additional detail"
      },
      "AddressDto" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string",
            "description" : "First address"
          },
          "address2" : {
            "type" : "string",
            "description" : "Second address"
          },
          "address3" : {
            "type" : "string",
            "description" : "Third address"
          },
          "address4" : {
            "type" : "string",
            "description" : "forth address"
          },
          "address5" : {
            "type" : "string",
            "description" : "fifth address"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "The zip code"
          },
          "city" : {
            "type" : "string",
            "description" : "The city"
          },
          "country" : {
            "type" : "string",
            "description" : "The country"
          },
          "state" : {
            "type" : "string",
            "description" : "The state"
          }
        },
        "description" : "The address related to the contact information",
        "xml" : {
          "name" : "Address"
        }
      },
      "ApplicableEntityDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the entity applicable",
            "xml" : {
              "attribute" : true
            }
          },
          "entityClass" : {
            "type" : "string",
            "description" : "name of the class applicable",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "description" : "A list of entities (CustomerCategory, Offer, Product, Article).",
        "xml" : {
          "name" : "ApplicableEntity"
        }
      },
      "AttributeInstanceDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "attributeCode" : {
            "type" : "string"
          },
          "parentAttributeValueId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "assignedAttributeValueIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stringValue" : {
            "type" : "string"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "customFieldDto" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "booleanValue" : {
            "type" : "boolean"
          }
        }
      },
      "BillingAccountDto" : {
        "required" : [ "billingCycle", "code", "country", "customerAccount", "language" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "externalRef1" : {
            "type" : "string",
            "description" : "The external ref 1"
          },
          "externalRef2" : {
            "type" : "string",
            "description" : "The external ref 2"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "The job title"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessEntityDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "loaded" : {
            "type" : "boolean"
          },
          "vatNo" : {
            "type" : "string",
            "description" : "The vat no"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "Deprecated registration no., use registrationNumbers instead"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value"
          },
          "minimumTargetAccount" : {
            "type" : "string",
            "description" : "The billing account code to be used when calculating the min amount billable for Customer and CA"
          },
          "minimumAmountElSpark" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value - for Spark"
          },
          "minimumLabelElSpark" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value - for Spark"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if this is a company"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of registration numbers",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "customerAccount" : {
            "type" : "string",
            "description" : "The customer account"
          },
          "billingCycle" : {
            "type" : "string",
            "description" : "The billing cycle"
          },
          "country" : {
            "type" : "string",
            "description" : "The country"
          },
          "tradingCurrency" : {
            "type" : "string",
            "description" : "The trading currency"
          },
          "language" : {
            "type" : "string",
            "description" : "The language"
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "description" : "The next invoice date",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "description" : "The subscription date",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "description" : "The termination date",
            "format" : "date-time"
          },
          "electronicBilling" : {
            "type" : "boolean",
            "description" : "The electronic billing"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of billing account",
            "example" : "possible value are : ACTIVE, CANCELED, TERMINATED, CLOSED",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date, it set automatically when the status was changed",
            "format" : "date-time"
          },
          "terminationReason" : {
            "type" : "string",
            "description" : "The termination reason"
          },
          "email" : {
            "type" : "string",
            "description" : "The email"
          },
          "invoices" : {
            "type" : "array",
            "description" : "list of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceDto"
            }
          },
          "invoicingThreshold" : {
            "type" : "number",
            "description" : "The invoicing threshold"
          },
          "phone" : {
            "type" : "string",
            "description" : "The phone"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string",
            "description" : "Minimum Invoice SubCategory"
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Field was deprecated in 4.6 version. Use 'paymentMethods' field on CustomerAccount entity instead",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          },
          "paymentTerms" : {
            "type" : "string",
            "description" : "Field was deprecated in 4.6 version. Use custom fields instead"
          },
          "userAccounts" : {
            "$ref" : "#/components/schemas/UserAccountsDto"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "description" : "List of discount plans. Use in instantiating a discount plan instance",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "description" : "List of discount plans to be disassociated in a BillingAccount",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of discount plans to be disassociated in a BillingAccount",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "discountPlanInstances" : {
            "type" : "array",
            "description" : "Use to return the active discount plans for this entity",
            "example" : "discountPlanInstance : []",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstanceDto"
            }
          },
          "mailingType" : {
            "type" : "string",
            "description" : "Mailing type"
          },
          "emailTemplate" : {
            "type" : "string",
            "description" : "Email Template code"
          },
          "ccedEmails" : {
            "type" : "string",
            "description" : "list of emails separated by comma",
            "example" : "example1@example.com,example2@example.com"
          },
          "taxCategoryCode" : {
            "type" : "string",
            "description" : "Account tax category code - overrides the value from a customer category"
          },
          "checkThreshold" : {
            "type" : "string",
            "description" : "The option on how to check the threshold",
            "example" : "possible value are: BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "infoGdpr" : {
            "type" : "array",
            "description" : "List of GDPR related to billing account",
            "items" : {
              "$ref" : "#/components/schemas/GDPRInfoDto"
            }
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodDto"
          },
          "thresholdPerEntity" : {
            "type" : "boolean",
            "description" : "check the threshold per entity/invoice for BA"
          },
          "primaryContact" : {
            "type" : "string",
            "description" : "The primary contact"
          },
          "isoICDCode" : {
            "type" : "string",
            "description" : "The iso ICD Code"
          },
          "exemptionReason" : {
            "type" : "string",
            "description" : "The exemption reason"
          },
          "priceListCode" : {
            "type" : "string",
            "description" : "The default Price List"
          },
          "tagCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of the code of tags",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of the code of tags",
              "xml" : {
                "name" : "tagCodes"
              }
            }
          }
        }
      },
      "BillingAccountsDto" : {
        "type" : "object",
        "properties" : {
          "billingAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccountDto"
            }
          }
        }
      },
      "BusinessEntityDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          }
        },
        "description" : "The business account model",
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "CategoryInvoiceAgregateDto" : {
        "required" : [ "categoryInvoiceCode", "listSubCategoryInvoiceAgregateDto" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "categoryInvoiceCode" : {
            "type" : "string",
            "description" : "The category invoice code"
          },
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The user account code"
          },
          "itemNumber" : {
            "type" : "integer",
            "description" : "The item number",
            "format" : "int32"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "listSubCategoryInvoiceAgregateDto" : {
            "type" : "array",
            "description" : "List of Sub category invoice aggregates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/SubCategoryInvoiceAgregateDto"
            }
          },
          "discountAggregates" : {
            "type" : "array",
            "description" : "List of Discount aggregates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountInvoiceAggregateDto"
            }
          }
        },
        "description" : "The category invoice aggregates",
        "xml" : {
          "name" : "CategoryInvoiceAgregate"
        }
      },
      "ContactInformationDto" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "The email"
          },
          "phone" : {
            "type" : "string",
            "description" : "The phone"
          },
          "mobile" : {
            "type" : "string",
            "description" : "The mobile"
          },
          "fax" : {
            "type" : "string",
            "description" : "The fax"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          }
        },
        "description" : "The contact information"
      },
      "CustomerAccountDto" : {
        "required" : [ "code", "currency", "customer", "language" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "externalRef1" : {
            "type" : "string",
            "description" : "The external ref 1"
          },
          "externalRef2" : {
            "type" : "string",
            "description" : "The external ref 2"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "The job title"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessEntityDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "loaded" : {
            "type" : "boolean"
          },
          "vatNo" : {
            "type" : "string",
            "description" : "The vat no"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "Deprecated registration no., use registrationNumbers instead"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value"
          },
          "minimumTargetAccount" : {
            "type" : "string",
            "description" : "The billing account code to be used when calculating the min amount billable for Customer and CA"
          },
          "minimumAmountElSpark" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value - for Spark"
          },
          "minimumLabelElSpark" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value - for Spark"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if this is a company"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of registration numbers",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "customer" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSE" ]
          },
          "creditCategory" : {
            "type" : "string"
          },
          "dateStatus" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateDunningLevel" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dunningLevel" : {
            "type" : "string",
            "enum" : [ "R0", "R1", "R2", "R3", "R4", "R5", "R6" ]
          },
          "mandateIdentification" : {
            "type" : "string"
          },
          "mandateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "balance" : {
            "type" : "number"
          },
          "totalBalance" : {
            "type" : "number"
          },
          "totalBalanceExigible" : {
            "type" : "number"
          },
          "totalInvoiceBalance" : {
            "type" : "number"
          },
          "accountBalance" : {
            "type" : "number"
          },
          "creditBalance" : {
            "type" : "number"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDateDelayEL" : {
            "type" : "string"
          },
          "paymentMethods" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDto"
            }
          },
          "excludedFromPayment" : {
            "type" : "boolean"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "billingAccounts" : {
            "$ref" : "#/components/schemas/BillingAccountsDto"
          },
          "accountOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperationDto"
            }
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "infoGdpr" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GDPRInfoDto"
            }
          },
          "generalClientAccountCode" : {
            "type" : "string"
          }
        }
      },
      "CustomerAccountsDto" : {
        "type" : "object",
        "properties" : {
          "customerAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerAccountDto"
            }
          }
        },
        "description" : "Use for GET / LIST only"
      },
      "CustomerDto" : {
        "required" : [ "code", "customerCategory" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "externalRef1" : {
            "type" : "string",
            "description" : "The external ref 1"
          },
          "externalRef2" : {
            "type" : "string",
            "description" : "The external ref 2"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "The job title"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessEntityDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "loaded" : {
            "type" : "boolean"
          },
          "vatNo" : {
            "type" : "string",
            "description" : "The vat no"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "Deprecated registration no., use registrationNumbers instead"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value"
          },
          "minimumTargetAccount" : {
            "type" : "string",
            "description" : "The billing account code to be used when calculating the min amount billable for Customer and CA"
          },
          "minimumAmountElSpark" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value - for Spark"
          },
          "minimumLabelElSpark" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value - for Spark"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if this is a company"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of registration numbers",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "customerCategory" : {
            "type" : "string",
            "description" : "The customer category"
          },
          "customerBrand" : {
            "type" : "string",
            "description" : "The customer brand"
          },
          "seller" : {
            "type" : "string",
            "description" : "the code of seller"
          },
          "mandateIdentification" : {
            "type" : "string",
            "description" : "The mandate identification"
          },
          "mandateDate" : {
            "type" : "string",
            "description" : "The mandate date",
            "format" : "date-time"
          },
          "customerAccounts" : {
            "$ref" : "#/components/schemas/CustomerAccountsDto"
          },
          "additionalDetails" : {
            "$ref" : "#/components/schemas/AdditionalDetailsDto"
          },
          "invoicingThreshold" : {
            "type" : "number",
            "description" : "Invoicing threshold - do not invoice for a lesser amount"
          },
          "checkThreshold" : {
            "type" : "string",
            "description" : "The option on how to check the threshold",
            "example" : "possible value are :BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "thresholdPerEntity" : {
            "type" : "boolean",
            "description" : "check the threshold per entity/invoice"
          },
          "anonymizationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "infoGdpr" : {
            "type" : "array",
            "description" : "information GDPR",
            "items" : {
              "$ref" : "#/components/schemas/GDPRInfoDto"
            }
          },
          "parentCustomerCode" : {
            "type" : "string",
            "description" : "the code of customer parent"
          },
          "childrenCustomersCodes" : {
            "type" : "array",
            "description" : "children Customers",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "children Customers"
            }
          }
        },
        "xml" : {
          "name" : "Customer"
        }
      },
      "CustomersDto" : {
        "type" : "object",
        "properties" : {
          "customer" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerDto"
            }
          },
          "totalNumberOfRecords" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "DiscountInvoiceAggregateDto" : {
        "required" : [ "amountsByTax", "invoiceSubCategoryCode" ],
        "type" : "object",
        "properties" : {
          "itemNumber" : {
            "type" : "integer",
            "description" : "The item number",
            "format" : "int32"
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity. Deprecated in v5.2",
            "deprecated" : true
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "invoiceSubCategoryCode" : {
            "type" : "string",
            "description" : "The invoice sub category code"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The user account code"
          },
          "amountsByTax" : {
            "type" : "array",
            "description" : "List of amounts broken down by tax",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/SubcategoryInvoiceAgregateAmountDto"
            }
          },
          "ratedTransactions" : {
            "type" : "array",
            "description" : "List the rated transactions",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RatedTransactionDto"
            }
          },
          "discountPlanItemCode" : {
            "type" : "string",
            "description" : "The discount plan item code"
          },
          "discountPercent" : {
            "type" : "number",
            "description" : "The discount percent"
          }
        },
        "description" : "List of Discount aggregates",
        "xml" : {
          "name" : "DiscountInvoiceAggregate"
        }
      },
      "DiscountPlanDto" : {
        "required" : [ "code", "discountPlanType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Effective start date",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "Effective end date",
            "format" : "date-time"
          },
          "defaultDuration" : {
            "type" : "integer",
            "description" : "Length of effectivity.<br/> If start date is not null and end date is null, we use the defaultDuration from the discount plan.<br />If start date is null, and defaultDuration is not null, defaultDuration is ignored.",
            "format" : "int32"
          },
          "durationUnit" : {
            "type" : "string",
            "description" : "Unit of duration",
            "example" : "possible value are : MONTH, DAY",
            "enum" : [ "MONTH", "DAY", "YEAR" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "discountPlanItems" : {
            "type" : "array",
            "description" : "list of discount plan item",
            "example" : "discountPlanItem[]",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanItemDto"
            }
          },
          "expressionEl" : {
            "type" : "string",
            "description" : "expression language"
          },
          "discountPlanType" : {
            "type" : "string",
            "description" : "Type of the discount plan. Defines on which entity the discount plan can be applied",
            "example" : "possible value are : QUOTE, OFFER, PRODUCT, INVOICE, INVOICE_LINE, PROMO_CODE",
            "enum" : [ "QUOTE", "OFFER", "PRODUCT", "INVOICE", "INVOICE_LINE", "PROMO_CODE" ]
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the discount plan. The default value is DRAFT",
            "example" : "possible value are : DRAFT, ACTIVE, INACTIVE, IN_USE, EXPIRED",
            "enum" : [ "ACTIVE", "INACTIVE", "DRAFT", "IN_USE", "EXPIRED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "Datetime of last status update, Automatically filed at creation and status update",
            "format" : "date-time"
          },
          "initialQuantity" : {
            "type" : "integer",
            "description" : "The initial available quantity for the discount plan, For types QUOTE, INVOICE, INVOICE_LINE, the value is forced to 0",
            "format" : "int64"
          },
          "usedQuantity" : {
            "type" : "integer",
            "description" : "How many times the discount plan has been used.<br/> If intialQuantity is not 0, then reaching the initialQuantity expires the discount plan.<br />The value is incremented every time the discountPlan is instantiated on any Billing Account, Subscription, or ProductInstance",
            "format" : "int64"
          },
          "applicationLimit" : {
            "type" : "integer",
            "description" : "How many times the discount can be applied on a given entity (BillingAccount, Subscription, Product Instance).<br />Default value is 0 = infinite.<br/>Useful for one-time discounts.",
            "format" : "int64"
          },
          "applicationFilterEL" : {
            "type" : "string",
            "description" : "A boolean EL that must evaluate to true to allow the discount plan to be applied<br/>It will have access to the variables.<br />entity: the entity on which we want to apply the discount"
          },
          "incompatibleDiscountPlans" : {
            "type" : "array",
            "description" : "A list of discounts plans that cannot be active at the same time on an entity instance.",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "applicableEntities" : {
            "type" : "array",
            "description" : "A list of entities (CustomerCategory, Offer, Product, Article).",
            "items" : {
              "$ref" : "#/components/schemas/ApplicableEntityDto"
            }
          },
          "applicableOnOverriddenPrice" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "defines the order in which discount plans are applied",
            "format" : "int32"
          },
          "applicableOnDiscountedPrice" : {
            "type" : "boolean",
            "description" : "determines whether the discount plan is applicable on the gross or discounted amount"
          },
          "automaticApplication" : {
            "type" : "boolean",
            "description" : "determines whether the discount plan will automatically be applied to an offer or a product upon instantiation"
          },
          "allowanceCode" : {
            "type" : "string",
            "description" : "determines whether the discount plan will automatically be applied to an offer or a product upon instantiation"
          },
          "applicableOnContractPrice" : {
            "type" : "boolean",
            "description" : "If false then discount plan will be ignored if event price comes from a contract"
          }
        },
        "description" : "list of The offer product template",
        "xml" : {
          "name" : "DiscountPlan"
        }
      },
      "DiscountPlanInstanceDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "discountPlan" : {
            "type" : "string",
            "description" : "The discount plan code"
          },
          "billingAccount" : {
            "type" : "string",
            "description" : "The billingAccount code"
          },
          "subscription" : {
            "type" : "string",
            "description" : "The subscription code"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Effectivity start date",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "Effectivity end date",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of this specific discount plan instance",
            "enum" : [ "ACTIVE", "APPLIED", "IN_USE", "EXPIRED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "Datetime of last status change",
            "format" : "date-time"
          },
          "applicationCount" : {
            "type" : "integer",
            "description" : "How many times the discount has been used",
            "format" : "int64"
          }
        }
      },
      "DiscountPlanItemDto" : {
        "required" : [ "code", "discountPlanCode", "discountValue", "discountValueEL" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code",
            "xml" : {
              "attribute" : true
            }
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "Discount plan code"
          },
          "invoiceCategoryCode" : {
            "type" : "string",
            "description" : "Invoice category code"
          },
          "invoiceSubCategoryCode" : {
            "type" : "string",
            "description" : "Invoice sub category code"
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "Accounting code",
            "deprecated" : true
          },
          "expressionEl" : {
            "type" : "string",
            "description" : "Expression to determine if discount applies"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Is entity disabled. Value is ignored in Update action - use enable/disable API instead"
          },
          "discountPlanItemType" : {
            "type" : "string",
            "description" : "Type of discount, whether absolute or percentage",
            "default" : "PERCENTAGE",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountValue" : {
            "type" : "number",
            "description" : "The absolute or percentage discount amount"
          },
          "discountValueEL" : {
            "type" : "string",
            "description" : "The absolute or percentage discount amount EL"
          },
          "targetAccountingArticleCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "The target accounting article codes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "The target accounting article codes",
              "xml" : {
                "name" : "targetAccountingArticleCodes"
              }
            }
          },
          "pricePlanMatrixCode" : {
            "type" : "string",
            "description" : "Price plan matrix code"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "allowToNegate" : {
            "type" : "boolean",
            "description" : "<ul><li>If true, then allows to negate the amount of affected invoice lines</li><li>If fase, then amount for the discount line produce by the discount plan item cannot exceed the amount of discounted lines</li></ul>",
            "default" : false
          },
          "description" : {
            "type" : "string",
            "description" : "description of discount plan item"
          },
          "priority" : {
            "type" : "integer",
            "description" : "The lower number, the higher the priority is",
            "format" : "int64"
          },
          "accountingArticleCode" : {
            "type" : "string",
            "description" : "accounting article code"
          },
          "applyByArticle" : {
            "type" : "boolean",
            "description" : "Apply by article"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "defines the order in which discount plans are applied",
            "format" : "int32"
          },
          "lastDiscount" : {
            "type" : "boolean",
            "description" : "last discount"
          }
        },
        "description" : "list of discount plan item",
        "example" : "discountPlanItem[]",
        "xml" : {
          "name" : "DiscountPlanItem"
        }
      },
      "GDPRInfoDto" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "InvoiceDto" : {
        "required" : [ "billingAccountCode", "discountAmount", "dueDate", "invoiceDate", "invoiceMode", "invoiceType", "rawAmount", "taxAggregates" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "description" : "The invoice id",
            "format" : "int64"
          },
          "invoiceType" : {
            "type" : "string",
            "description" : "The invoice type"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "The billing account code"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "Code of the Seller"
          },
          "subscriptionCode" : {
            "type" : "string",
            "description" : "Code of the subscription"
          },
          "subscriptionId" : {
            "type" : "integer",
            "description" : "Id of the subscription",
            "format" : "int64"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "Order number of the invoice"
          },
          "status" : {
            "type" : "string",
            "description" : "The invoice status",
            "example" : "possible value are : NEW, SUSPECT, REJECTED, DRAFT, CANCELED, VALIDATED",
            "enum" : [ "NEW", "SUSPECT", "REJECTED", "DRAFT", "CANCELED", "VALIDATED" ]
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "The invoice date",
            "format" : "date-time"
          },
          "categoryInvoiceAgregates" : {
            "type" : "array",
            "description" : "The category invoice aggregates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CategoryInvoiceAgregateDto"
            }
          },
          "taxAggregates" : {
            "type" : "array",
            "description" : "The tax aggregates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TaxInvoiceAggregateDto"
            }
          },
          "listInvoiceIdToLink" : {
            "type" : "array",
            "description" : "The list invoice id to link",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "integer",
              "description" : "The list invoice id to link",
              "format" : "int64",
              "xml" : {
                "name" : "invoiceIdToLink"
              }
            }
          },
          "invoiceNumber" : {
            "type" : "string",
            "description" : "The invoice number"
          },
          "discount" : {
            "type" : "number",
            "description" : "discount applied to this invoice"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method",
            "example" : "possible value are : CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "xmlFilename" : {
            "type" : "string",
            "description" : "The xml filename"
          },
          "xml" : {
            "type" : "string",
            "description" : "The xml"
          },
          "pdfFilename" : {
            "type" : "string",
            "description" : "he pdf filename"
          },
          "pdf" : {
            "type" : "array",
            "description" : "content of the pdf",
            "items" : {
              "type" : "string",
              "description" : "content of the pdf",
              "format" : "byte"
            }
          },
          "autoValidation" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if invoice should be assigned a number",
            "default" : true
          },
          "returnXml" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if XML invoice should be generated and returned"
          },
          "returnPdf" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if PDF invoice should be generated and returned"
          },
          "sendByEmail" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if PDF should be delivered by email. Defaults to True"
          },
          "includeBalance" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if currently due balance should be returned"
          },
          "recordedInvoiceDto" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "netToPay" : {
            "type" : "number",
            "description" : "The net to pay"
          },
          "invoiceMode" : {
            "type" : "string",
            "description" : "The invoice mode",
            "example" : "possible value are: AGGREGATED, DETAILLED",
            "enum" : [ "AGGREGATED", "DETAILLED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "dueBalance" : {
            "type" : "number",
            "description" : "The total due is a snapshot at invoice generation time of the due balance (not exigible) before invoice calculation+invoice amount. Due balance is a 'future' dueBalance (the due balance at the invoice due date)"
          },
          "isDraft" : {
            "type" : "boolean",
            "description" : "A flag to generate a draft invoice"
          },
          "checkAlreadySent" : {
            "type" : "boolean",
            "description" : "Before sending the invoice, check if not already sent"
          },
          "overrideEmail" : {
            "type" : "string",
            "description" : "Override Email defined in the billing entity"
          },
          "sentByEmail" : {
            "type" : "boolean",
            "description" : "True if the invoice was sent by email or delibered by some other electronic means, false otherwise",
            "default" : false
          },
          "paymentScheduleInstancesDto" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstancesDto"
          },
          "dunningEntryDate" : {
            "type" : "string",
            "description" : "associated dunning creation date",
            "format" : "date-time"
          },
          "dunningLastModification" : {
            "type" : "string",
            "description" : "associated dunning last update date",
            "format" : "date-time"
          },
          "dunningStatus" : {
            "type" : "string",
            "description" : "associated dunning current status"
          },
          "realTimeStatus" : {
            "type" : "string",
            "description" : "The invoice real time status",
            "example" : "possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED",
            "enum" : [ "NONE", "PENDING", "PENDING_PLAN", "PAID", "PPAID", "UNPAID", "ABANDONED", "DISPUTED", "REFUNDED", "PREFUNDED", "UNREFUNDED" ]
          },
          "ratedTransactionsToLink" : {
            "type" : "array",
            "description" : "List of existing RTs to include, identified by id This option is allowed only if invoiceMode=='DETAILLED'",
            "items" : {
              "type" : "integer",
              "description" : "List of existing RTs to include, identified by id This option is allowed only if invoiceMode=='DETAILLED'",
              "format" : "int64"
            }
          },
          "paymentIncidents" : {
            "type" : "array",
            "description" : "List of payment incidents",
            "items" : {
              "type" : "string",
              "description" : "List of payment incidents"
            }
          },
          "sendPaymentDate" : {
            "type" : "string",
            "description" : "Date of send payment",
            "format" : "date-time"
          },
          "initialCollectionDate" : {
            "type" : "string",
            "description" : "Invoice payment collection date",
            "format" : "date-time"
          },
          "writeOffAmount" : {
            "type" : "number",
            "description" : "Sum off writeOff accountOperations amounts"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "last payment Date",
            "format" : "date-time"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "Invoice status change date",
            "format" : "date-time"
          },
          "xmlDate" : {
            "type" : "string",
            "description" : "Date when the XML has been produced on a validated invoice",
            "format" : "date-time"
          },
          "pdfDate" : {
            "type" : "string",
            "description" : "Date when the PDf has been produced on a validated invoice",
            "format" : "date-time"
          },
          "emailSentDate" : {
            "type" : "string",
            "description" : "Date when the invoice has been sent for a validated invoice",
            "format" : "date-time"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "payment status",
            "example" : "possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED",
            "enum" : [ "NONE", "PENDING", "PENDING_PLAN", "PAID", "PPAID", "UNPAID", "ABANDONED", "DISPUTED", "REFUNDED", "PREFUNDED", "UNREFUNDED" ]
          },
          "paymentStatusDate" : {
            "type" : "string",
            "description" : "Payment status change date",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Beginning of the billed period (based on billing cycle period whenever possible or min(invoiceLine.valueDate))",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "End of the billed period (based on billing cycle period whenever possible or applied lastTransactionDate or max(invoiceLine.valueDate))",
            "format" : "date-time"
          },
          "rawAmount" : {
            "type" : "number",
            "description" : "Total raw amount from invoice lines. <ul><li>Does not include discount</li><li>With or without tax depending on provider setting (isEnterprise)</li></ul>"
          },
          "discountRate" : {
            "type" : "number",
            "description" : "Discount rate to apply (in %).<p>Initialize with discount rate from linked invoice discount plan</p>"
          },
          "discountAmount" : {
            "type" : "number",
            "description" : "Total discount amount with or without tax depending on provider settings.<p>Can be inconsistent with discountRate.</p><p>discountAmount has precedence over discountRate</p>"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "Discount plan code"
          },
          "lastAppliedRate" : {
            "type" : "number",
            "description" : "The exchange rate that converted amounts of the invoice."
          },
          "lastAppliedRateDate" : {
            "type" : "string",
            "description" : "The date of exchange rate applied to amounts of the invoice.",
            "format" : "date-time"
          },
          "autoMatching" : {
            "type" : "boolean"
          },
          "draft" : {
            "type" : "boolean"
          },
          "alreadyAppliedMinimum" : {
            "type" : "boolean"
          },
          "alreadyAddedDiscount" : {
            "type" : "boolean"
          },
          "ratedTransactionsTolink" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "xml" : {
          "name" : "Invoice"
        }
      },
      "MatchingAmountDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "matchingCode" : {
            "type" : "string",
            "description" : "The matching code"
          },
          "matchingAmount" : {
            "type" : "number",
            "description" : "The matching amount"
          },
          "matchingCodes" : {
            "$ref" : "#/components/schemas/MatchingCodesDto"
          }
        },
        "description" : "List of the matching amount",
        "xml" : {
          "name" : "MatchingAmount"
        }
      },
      "MatchingAmountsDto" : {
        "type" : "object",
        "properties" : {
          "matchingAmount" : {
            "type" : "array",
            "description" : "List of the matching amount",
            "items" : {
              "$ref" : "#/components/schemas/MatchingAmountDto"
            }
          }
        },
        "description" : "The matching amounts",
        "xml" : {
          "name" : "MatchingAmounts"
        }
      },
      "MatchingCodeDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of matching code"
          },
          "matchingType" : {
            "type" : "string",
            "description" : "The matching type",
            "example" : "possible value are: A, M, A_TIP, A_DERICT_DEBIT",
            "enum" : [ "A", "M", "A_TIP", "A_DERICT_DEBIT" ]
          },
          "matchingDate" : {
            "type" : "string",
            "description" : "The matching date",
            "format" : "date-time"
          },
          "matchingAmountCredit" : {
            "type" : "number",
            "description" : "The matching amount credit"
          },
          "matchingAmountDebit" : {
            "type" : "number",
            "description" : "The matching amount debit"
          }
        },
        "description" : "List of the matching code",
        "xml" : {
          "name" : "MatchingCode"
        }
      },
      "MatchingCodesDto" : {
        "type" : "object",
        "properties" : {
          "matchingCode" : {
            "type" : "array",
            "description" : "List of the matching code",
            "items" : {
              "$ref" : "#/components/schemas/MatchingCodeDto"
            }
          }
        },
        "description" : "The matching codes",
        "xml" : {
          "name" : "MatchingCodes"
        }
      },
      "NameDto" : {
        "required" : [ "lastName" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The title"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name"
          }
        },
        "description" : "The name",
        "xml" : {
          "name" : "Name"
        }
      },
      "OrderAttributeDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "attributeCode" : {
            "type" : "string"
          },
          "parentAttributeValueId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "assignedAttributeValueIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stringValue" : {
            "type" : "string",
            "description" : "The string value"
          },
          "dateValue" : {
            "type" : "string",
            "description" : "The date value",
            "format" : "date-time"
          },
          "doubleValue" : {
            "type" : "number",
            "description" : "The double value",
            "format" : "double"
          },
          "customFieldDto" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "booleanValue" : {
            "type" : "boolean",
            "description" : "The boolean value"
          },
          "commercialOrderId" : {
            "type" : "integer",
            "description" : "The commercial order id",
            "format" : "int64"
          },
          "orderAttributeCode" : {
            "type" : "string",
            "description" : "The order attribute code"
          },
          "attributeType" : {
            "type" : "string",
            "description" : "The order attribute type",
            "enum" : [ "INFO", "LIST_TEXT", "LIST_MULTIPLE_TEXT", "LIST_NUMERIC", "LIST_MULTIPLE_NUMERIC", "TEXT", "NUMERIC", "INTEGER", "DATE", "CALENDAR", "EMAIL", "PHONE", "TOTAL", "COUNT", "EXPRESSION_LANGUAGE", "BOOLEAN" ]
          },
          "orderAttributeId" : {
            "type" : "integer",
            "description" : "The order attribute id",
            "format" : "int64"
          },
          "orderLotCode" : {
            "type" : "string",
            "description" : "The order lot code"
          },
          "orderProductId" : {
            "type" : "integer",
            "description" : "The order product id",
            "format" : "int64"
          },
          "orderOfferId" : {
            "type" : "integer",
            "description" : "The order offer id",
            "format" : "int64"
          },
          "accessPoint" : {
            "type" : "string",
            "description" : "The access point"
          }
        },
        "xml" : {
          "name" : "OrderAttributeDto"
        }
      },
      "OtherCreditAndChargeDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of account operation",
            "format" : "int64"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "description" : "The type"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "he transaction date",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "description" : "The transaction category",
            "example" : "possible value are : DEBIT, CREDIT",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference"
          },
          "accountCode" : {
            "type" : "string",
            "description" : "The account code",
            "deprecated" : true
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "accountCodeClientSide" : {
            "type" : "string",
            "description" : "The account code client side",
            "deprecated" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "The tax amount"
          },
          "matchingAmount" : {
            "type" : "number",
            "description" : "The matching amount"
          },
          "unMatchingAmount" : {
            "type" : "number",
            "description" : "The un matching amount"
          },
          "matchingStatus" : {
            "type" : "string",
            "description" : "The matching status",
            "example" : "possible value are: O, L, P, C, I, R",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "code" : {
            "type" : "string",
            "description" : "The occ code"
          },
          "description" : {
            "type" : "string",
            "description" : "The occ description"
          },
          "customerAccount" : {
            "type" : "string",
            "description" : "The customer account"
          },
          "excludedFromDunning" : {
            "type" : "boolean",
            "description" : "The excluded from dunning"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "The order number",
            "example" : "ORDER_1|ORDER_2|ORDER_3"
          },
          "matchingAmounts" : {
            "$ref" : "#/components/schemas/MatchingAmountsDto"
          },
          "otherCreditAndCharge" : {
            "$ref" : "#/components/schemas/OtherCreditAndChargeDto"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPaymentDto"
          },
          "bankLot" : {
            "type" : "string",
            "description" : "The bank lot"
          },
          "bankReference" : {
            "type" : "string",
            "description" : "The bank reference"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "description" : "The bank collection date",
            "format" : "date-time"
          },
          "depositDate" : {
            "type" : "string",
            "description" : "The deposit date",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "paymentInfo" : {
            "type" : "string",
            "description" : "The payment info"
          },
          "paymentInfo1" : {
            "type" : "string",
            "description" : "bank code"
          },
          "paymentInfo2" : {
            "type" : "string",
            "description" : "code guichet"
          },
          "paymentInfo3" : {
            "type" : "string",
            "description" : "Num compte"
          },
          "paymentInfo4" : {
            "type" : "string",
            "description" : "RIB"
          },
          "paymentInfo5" : {
            "type" : "string",
            "description" : "bankName"
          },
          "paymentInfo6" : {
            "type" : "string",
            "description" : "bic"
          },
          "billingAccountName" : {
            "type" : "string",
            "description" : "The billing account name"
          },
          "paymentHistories" : {
            "type" : "array",
            "description" : "list of the payment history",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistoryDto"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "description" : "A collection date",
            "format" : "date-time"
          },
          "journalCode" : {
            "type" : "string",
            "description" : "The journal code"
          },
          "status" : {
            "type" : "string",
            "description" : "Account operation status",
            "example" : "possible value are : POSTED, REJECTED, EXPORTED",
            "default" : "POSTED",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Account operation rejection reason",
            "example" : "possible value are : REJECTED, FORCED, CLOSED_PERIOD",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "accountingExportFile" : {
            "type" : "string",
            "description" : "Accounting export file"
          },
          "accountingDate" : {
            "type" : "string",
            "description" : "Accounting date",
            "format" : "date-time"
          },
          "transactionalCurrency" : {
            "type" : "string",
            "description" : "TransactionalCurrency"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "The other credit and charge",
        "xml" : {
          "name" : "AccountOperation"
        }
      },
      "PaymentHistoryDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "customerAccountCode" : {
            "type" : "string",
            "description" : "The customer Account Code"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "The seller Code"
          },
          "customerCode" : {
            "type" : "string",
            "description" : "The customer Code"
          },
          "customerAccountName" : {
            "type" : "string",
            "description" : "The customer Account Name"
          },
          "operationDate" : {
            "type" : "string",
            "description" : "The operation date",
            "format" : "date-time"
          },
          "updatedStatusDate" : {
            "type" : "string",
            "description" : "The updated status date",
            "format" : "date-time"
          },
          "lastUpdateDate" : {
            "type" : "string",
            "description" : "The last Update Date",
            "format" : "date-time"
          },
          "amountCts" : {
            "type" : "integer",
            "description" : "The amount in cts",
            "format" : "int64"
          },
          "syncStatus" : {
            "type" : "string",
            "description" : "The synchrone status",
            "example" : "possible value are : ACCEPTED, PENDING, REJECTED, ERROR, NOT_PROCESSED",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "asyncStatus" : {
            "type" : "string",
            "description" : "The asynchrone status",
            "example" : "possible value are : ACCEPTED, PENDING, REJECTED, ERROR, NOT_PROCESSED",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "status" : {
            "type" : "string",
            "description" : "The status",
            "example" : "possible value are : ACCEPTED, PENDING, REJECTED, ERROR, NOT_PROCESSED",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "externalPaymentId" : {
            "type" : "string",
            "description" : "he external payment id"
          },
          "errorCode" : {
            "type" : "string",
            "description" : "The error code"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "The error message"
          },
          "errorType" : {
            "type" : "string",
            "description" : "The error type, rejected or error",
            "example" : "possible value are :  ERROR, REJECT",
            "enum" : [ "ERROR", "REJECT" ]
          },
          "paymentGatewayCode" : {
            "type" : "string",
            "description" : "The payment gateway"
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "The payment method",
            "example" : "possible value are : CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentMethodName" : {
            "type" : "string",
            "description" : "The payment method name: card number or mandat"
          },
          "operationCategory" : {
            "type" : "string",
            "description" : "The operation category, credit for payment or debit for refund",
            "example" : "possible valye are : DEBIT, CREDIT",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "payment" : {
            "$ref" : "#/components/schemas/AccountOperationDto"
          },
          "refund" : {
            "$ref" : "#/components/schemas/AccountOperationDto"
          },
          "listAoPaid" : {
            "$ref" : "#/components/schemas/AccountOperationsDto"
          }
        },
        "description" : "list of the payment history"
      },
      "PaymentMethodDto" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "id of the entity",
            "format" : "int64"
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "type of the payment method",
            "example" : "possible value are: CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Indicate if the payment method is disabled"
          },
          "alias" : {
            "type" : "string",
            "description" : "Alias"
          },
          "preferred" : {
            "type" : "boolean",
            "description" : "Is it a preferred payment method",
            "default" : false
          },
          "customerAccountCode" : {
            "type" : "string",
            "description" : "Customer account code"
          },
          "info1" : {
            "type" : "string",
            "description" : "first Additional info"
          },
          "info2" : {
            "type" : "string",
            "description" : "second Additional info"
          },
          "info3" : {
            "type" : "string",
            "description" : "third Additional info"
          },
          "info4" : {
            "type" : "string",
            "description" : "fourth Additional info"
          },
          "info5" : {
            "type" : "string",
            "description" : "fifth Additional info"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          },
          "mandateIdentification" : {
            "type" : "string",
            "description" : "Mandate identification for SEPA"
          },
          "mandateDate" : {
            "type" : "string",
            "description" : "Mandate date for SEPA",
            "format" : "date-time"
          },
          "cardType" : {
            "type" : "string",
            "description" : "Card type",
            "example" : "possible value are : VISA, MASTERCARD, AMERICAN_EXPRESS, CB",
            "enum" : [ "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "CB" ]
          },
          "owner" : {
            "type" : "string",
            "description" : "Cardholder: first and last name"
          },
          "monthExpiration" : {
            "type" : "integer",
            "description" : "Card expiration: month",
            "format" : "int32"
          },
          "yearExpiration" : {
            "type" : "integer",
            "description" : "Card expiration: year",
            "format" : "int32"
          },
          "tokenId" : {
            "type" : "string",
            "description" : "Token ID in a payment gateway"
          },
          "cardNumber" : {
            "type" : "string",
            "description" : "Card number: full number , with first 12 digits hiding in read operation"
          },
          "issueNumber" : {
            "type" : "string",
            "description" : "Issue number"
          },
          "userId" : {
            "type" : "string",
            "description" : "Id of the user"
          },
          "email" : {
            "type" : "string",
            "description" : "Email"
          },
          "referenceDocumentCode" : {
            "type" : "string",
            "description" : "The code of reference document"
          },
          "customerCode" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "untdidPaymentMeans" : {
            "type" : "string",
            "description" : "Payment Means"
          }
        },
        "xml" : {
          "name" : "PaymentMethod"
        }
      },
      "PaymentScheduleInstanceBalanceDto" : {
        "type" : "object",
        "properties" : {
          "nbSchedulePaid" : {
            "type" : "integer",
            "description" : "The number schedule paid",
            "format" : "int32"
          },
          "nbScheduleIncoming" : {
            "type" : "integer",
            "description" : "The number schedule incoming",
            "format" : "int32"
          },
          "sumAmountPaid" : {
            "type" : "number",
            "description" : "The sum amount paid"
          },
          "sumAmountIncoming" : {
            "type" : "number",
            "description" : "The sum amount incoming"
          }
        },
        "description" : "The payment schedule instance balance",
        "xml" : {
          "name" : "PaymentScheduleInstanceBalanceDto"
        }
      },
      "PaymentScheduleInstanceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date",
            "format" : "date-time"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount"
          },
          "calendarCode" : {
            "type" : "string",
            "description" : "The calendar code"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the payment schedule instance",
            "example" : "possible value are: IN_PROGRESS, OBSOLETE, DONE, CANCELLED, TERMINATED",
            "enum" : [ "IN_PROGRESS", "OBSOLETE", "DONE", "CANCELLED", "TERMINATED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date",
            "format" : "date-time"
          },
          "paymentScheduleTemplateCode" : {
            "type" : "string",
            "description" : "The payment schedule template code"
          },
          "paymentDayInMonth" : {
            "type" : "integer",
            "description" : "The payment day in month",
            "format" : "int32"
          },
          "serviceInstanceTemplateCode" : {
            "type" : "string",
            "description" : "The service instance template code"
          },
          "serviceInstanceId" : {
            "type" : "integer",
            "description" : "The service instance id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string",
            "description" : "The subscription code"
          },
          "paymentScheduleInstanceBalanceDto" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstanceBalanceDto"
          },
          "items" : {
            "type" : "array",
            "description" : "List of the payment schedule instance item",
            "example" : "item: []",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentScheduleInstanceItemDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "description" : "list of payment schedule instance",
        "xml" : {
          "name" : "PaymentScheduleInstanceDto"
        }
      },
      "PaymentScheduleInstanceItemDto" : {
        "required" : [ "amount", "requestPaymentDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of the payment schedule instance item",
            "format" : "int64"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "requestPaymentDate" : {
            "type" : "string",
            "description" : "The request payment date",
            "format" : "date-time"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "last" : {
            "type" : "boolean"
          },
          "paid" : {
            "type" : "boolean"
          },
          "amount" : {
            "type" : "number"
          }
        },
        "description" : "List of the payment schedule instance item",
        "example" : "item: []",
        "xml" : {
          "name" : "PaymentScheduleInstanceItemDto"
        }
      },
      "PaymentScheduleInstancesDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "instances" : {
            "type" : "array",
            "description" : "list of payment schedule instance",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
            }
          }
        },
        "description" : "list of related payment schedule instances",
        "xml" : {
          "name" : "PaymentScheduleInstancesDto"
        }
      },
      "ProductDto" : {
        "required" : [ "code", "label" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Id of the product",
            "format" : "int64"
          },
          "discountList" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of discount plan",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "code" : {
            "type" : "string",
            "description" : "Code of the product"
          },
          "label" : {
            "type" : "string",
            "description" : "Description of the product"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the product",
            "enum" : [ "DRAFT", "ACTIVE", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "Datetime of the status",
            "format" : "date-time"
          },
          "productLineCode" : {
            "type" : "string",
            "description" : "Product line code related to product"
          },
          "brandCode" : {
            "type" : "string",
            "description" : "Bran code related to product"
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference"
          },
          "model" : {
            "type" : "string",
            "description" : "The model of the product"
          },
          "modelChildren" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of model children",
            "items" : {
              "type" : "string",
              "description" : "List of model children"
            }
          },
          "discountFlag" : {
            "type" : "boolean",
            "description" : "Indicate if the discount is activate",
            "default" : false
          },
          "packageFlag" : {
            "type" : "boolean",
            "description" : "Indicate if the product packaged",
            "default" : false
          },
          "priceVersionDateSetting" : {
            "type" : "string",
            "description" : "Price version date setting",
            "enum" : [ "QUOTE", "DELIVERY", "RENEWAL", "EVENT", "MANUAL" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "currentProductVersion" : {
            "$ref" : "#/components/schemas/ProductVersionDto"
          },
          "productChargeTemplateMappingDto" : {
            "type" : "array",
            "description" : "List product charge template mapping",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplateMappingDto"
            }
          },
          "commercialRuleCodes" : {
            "type" : "array",
            "description" : "List commercial rule codes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List commercial rule codes",
              "xml" : {
                "name" : "commercialRuleCodes"
              }
            }
          },
          "discountListCodes" : {
            "type" : "array",
            "description" : "List discount list code",
            "items" : {
              "type" : "string",
              "description" : "List discount list code"
            }
          },
          "mediaCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of media codes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of media codes",
              "xml" : {
                "name" : "mediaCodes"
              }
            }
          },
          "isModel" : {
            "type" : "boolean",
            "description" : "allowing to create,update and delete an product from a model"
          },
          "productModelCode" : {
            "type" : "string",
            "description" : "product model code"
          },
          "agreementDateSetting" : {
            "type" : "string",
            "description" : "Agreeemnt date Setting",
            "enum" : [ "COPY", "INHERIT", "MANUAL" ]
          }
        },
        "description" : "product associated to this offer product",
        "xml" : {
          "name" : "CpqProductDto"
        }
      },
      "ProductInstanceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "applicationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quantity" : {
            "type" : "number"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "ProductToInstantiateDto" : {
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "productCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "quantity" : {
            "type" : "number"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "attributeInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderAttributeDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "productToInstantiate"
        }
      },
      "ProductsDto" : {
        "type" : "object",
        "properties" : {
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductDto"
            }
          }
        }
      },
      "RatedTransactionDto" : {
        "required" : [ "amountTax", "amountWithTax", "amountWithoutTax", "code", "usageDate" ],
        "type" : "object",
        "properties" : {
          "usageDate" : {
            "type" : "string",
            "description" : "The usage date",
            "format" : "date-time"
          },
          "unitAmountWithoutTax" : {
            "type" : "number",
            "description" : "The unit amount without tax"
          },
          "unitAmountWithTax" : {
            "type" : "number",
            "description" : "The unit amount with tax"
          },
          "unitAmountTax" : {
            "type" : "number",
            "description" : "The unit amount tax"
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity"
          },
          "inputQuantity" : {
            "type" : "number",
            "description" : "The quantity"
          },
          "rawAmountWithoutTax" : {
            "type" : "number",
            "description" : "The raw amount without tax"
          },
          "rawAmountWithTax" : {
            "type" : "number",
            "description" : "The raw amount with tax"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "code" : {
            "type" : "string",
            "description" : "The code"
          },
          "status" : {
            "type" : "string",
            "description" : "The status",
            "example" : "possible value are: OPEN, BILLED, REJECTED, RERATED, CANCELED",
            "enum" : [ "OPEN", "BILLED", "REJECTED", "RERATED", "CANCELED", "PROCESSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "unityDescription" : {
            "type" : "string",
            "description" : "The unity description"
          },
          "priceplanCode" : {
            "type" : "string",
            "description" : "The price plan code"
          },
          "doNotTriggerInvoicing" : {
            "type" : "boolean",
            "description" : "indicate if we don't want to trigger invoicing",
            "default" : false
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date",
            "format" : "date-time"
          },
          "parameter1" : {
            "type" : "string",
            "description" : "used to set more onformations in case of \"DETAILLED\" invoice"
          },
          "parameter2" : {
            "type" : "string",
            "description" : "used to set more onformations in case of \"DETAILLED\" invoice"
          },
          "parameter3" : {
            "type" : "string",
            "description" : "used to set more onformations in case of \"DETAILLED\" invoice"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The user account code"
          },
          "taxCode" : {
            "type" : "string",
            "description" : "Tax applied - code"
          },
          "taxPercent" : {
            "type" : "number",
            "description" : "Tax percent"
          },
          "invoiceSubCategoryCode" : {
            "type" : "string",
            "description" : "Invoice sub category code"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "Seller code"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "BillingAccount code"
          },
          "taxClassCode" : {
            "type" : "string",
            "description" : "Charge tax class code"
          },
          "inputUnitOfMeasure" : {
            "type" : "string",
            "description" : "The input unit of measure"
          },
          "ratingUnitOfMeasure" : {
            "type" : "string",
            "description" : "The rating unit of measure"
          },
          "sortIndex" : {
            "type" : "integer",
            "description" : "Sorting index",
            "format" : "int32"
          },
          "businessKey" : {
            "type" : "string",
            "description" : "The rating business key"
          }
        },
        "description" : "List the rated transactions",
        "xml" : {
          "name" : "RatedTransaction"
        }
      },
      "RecordedInvoiceDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of account operation",
            "format" : "int64"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "description" : "The type"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "he transaction date",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "description" : "The transaction category",
            "example" : "possible value are : DEBIT, CREDIT",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference"
          },
          "accountCode" : {
            "type" : "string",
            "description" : "The account code",
            "deprecated" : true
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "accountCodeClientSide" : {
            "type" : "string",
            "description" : "The account code client side",
            "deprecated" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "The tax amount"
          },
          "matchingAmount" : {
            "type" : "number",
            "description" : "The matching amount"
          },
          "unMatchingAmount" : {
            "type" : "number",
            "description" : "The un matching amount"
          },
          "matchingStatus" : {
            "type" : "string",
            "description" : "The matching status",
            "example" : "possible value are: O, L, P, C, I, R",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "code" : {
            "type" : "string",
            "description" : "The occ code"
          },
          "description" : {
            "type" : "string",
            "description" : "The occ description"
          },
          "customerAccount" : {
            "type" : "string",
            "description" : "The customer account"
          },
          "excludedFromDunning" : {
            "type" : "boolean",
            "description" : "The excluded from dunning"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "The order number",
            "example" : "ORDER_1|ORDER_2|ORDER_3"
          },
          "matchingAmounts" : {
            "$ref" : "#/components/schemas/MatchingAmountsDto"
          },
          "otherCreditAndCharge" : {
            "$ref" : "#/components/schemas/OtherCreditAndChargeDto"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPaymentDto"
          },
          "bankLot" : {
            "type" : "string",
            "description" : "The bank lot"
          },
          "bankReference" : {
            "type" : "string",
            "description" : "The bank reference"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "description" : "The bank collection date",
            "format" : "date-time"
          },
          "depositDate" : {
            "type" : "string",
            "description" : "The deposit date",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "paymentInfo" : {
            "type" : "string",
            "description" : "The payment info"
          },
          "paymentInfo1" : {
            "type" : "string",
            "description" : "bank code"
          },
          "paymentInfo2" : {
            "type" : "string",
            "description" : "code guichet"
          },
          "paymentInfo3" : {
            "type" : "string",
            "description" : "Num compte"
          },
          "paymentInfo4" : {
            "type" : "string",
            "description" : "RIB"
          },
          "paymentInfo5" : {
            "type" : "string",
            "description" : "bankName"
          },
          "paymentInfo6" : {
            "type" : "string",
            "description" : "bic"
          },
          "billingAccountName" : {
            "type" : "string",
            "description" : "The billing account name"
          },
          "paymentHistories" : {
            "type" : "array",
            "description" : "list of the payment history",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistoryDto"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "description" : "A collection date",
            "format" : "date-time"
          },
          "journalCode" : {
            "type" : "string",
            "description" : "The journal code"
          },
          "status" : {
            "type" : "string",
            "description" : "Account operation status",
            "example" : "possible value are : POSTED, REJECTED, EXPORTED",
            "default" : "POSTED",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Account operation rejection reason",
            "example" : "possible value are : REJECTED, FORCED, CLOSED_PERIOD",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "accountingExportFile" : {
            "type" : "string",
            "description" : "Accounting export file"
          },
          "accountingDate" : {
            "type" : "string",
            "description" : "Accounting date",
            "format" : "date-time"
          },
          "transactionalCurrency" : {
            "type" : "string",
            "description" : "TransactionalCurrency"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "productionDate" : {
            "type" : "string",
            "description" : "The production date",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "The invoice date",
            "format" : "date-time"
          },
          "netToPay" : {
            "type" : "number",
            "description" : "The net to pay"
          }
        },
        "description" : "The recorded invoice dto",
        "xml" : {
          "name" : "AccountOperation"
        }
      },
      "RegistrationNumberDto" : {
        "type" : "object",
        "properties" : {
          "registrationNo" : {
            "type" : "string"
          },
          "isoIcdCode" : {
            "type" : "string"
          }
        }
      },
      "RejectedPaymentDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The id of account operation",
            "format" : "int64"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "description" : "The type"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "he transaction date",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "description" : "The transaction category",
            "example" : "possible value are : DEBIT, CREDIT",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference"
          },
          "accountCode" : {
            "type" : "string",
            "description" : "The account code",
            "deprecated" : true
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "accountCodeClientSide" : {
            "type" : "string",
            "description" : "The account code client side",
            "deprecated" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "The tax amount"
          },
          "matchingAmount" : {
            "type" : "number",
            "description" : "The matching amount"
          },
          "unMatchingAmount" : {
            "type" : "number",
            "description" : "The un matching amount"
          },
          "matchingStatus" : {
            "type" : "string",
            "description" : "The matching status",
            "example" : "possible value are: O, L, P, C, I, R",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "code" : {
            "type" : "string",
            "description" : "The occ code"
          },
          "description" : {
            "type" : "string",
            "description" : "The occ description"
          },
          "customerAccount" : {
            "type" : "string",
            "description" : "The customer account"
          },
          "excludedFromDunning" : {
            "type" : "boolean",
            "description" : "The excluded from dunning"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "The order number",
            "example" : "ORDER_1|ORDER_2|ORDER_3"
          },
          "matchingAmounts" : {
            "$ref" : "#/components/schemas/MatchingAmountsDto"
          },
          "otherCreditAndCharge" : {
            "$ref" : "#/components/schemas/OtherCreditAndChargeDto"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPaymentDto"
          },
          "bankLot" : {
            "type" : "string",
            "description" : "The bank lot"
          },
          "bankReference" : {
            "type" : "string",
            "description" : "The bank reference"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "description" : "The bank collection date",
            "format" : "date-time"
          },
          "depositDate" : {
            "type" : "string",
            "description" : "The deposit date",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "paymentInfo" : {
            "type" : "string",
            "description" : "The payment info"
          },
          "paymentInfo1" : {
            "type" : "string",
            "description" : "bank code"
          },
          "paymentInfo2" : {
            "type" : "string",
            "description" : "code guichet"
          },
          "paymentInfo3" : {
            "type" : "string",
            "description" : "Num compte"
          },
          "paymentInfo4" : {
            "type" : "string",
            "description" : "RIB"
          },
          "paymentInfo5" : {
            "type" : "string",
            "description" : "bankName"
          },
          "paymentInfo6" : {
            "type" : "string",
            "description" : "bic"
          },
          "billingAccountName" : {
            "type" : "string",
            "description" : "The billing account name"
          },
          "paymentHistories" : {
            "type" : "array",
            "description" : "list of the payment history",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistoryDto"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "description" : "A collection date",
            "format" : "date-time"
          },
          "journalCode" : {
            "type" : "string",
            "description" : "The journal code"
          },
          "status" : {
            "type" : "string",
            "description" : "Account operation status",
            "example" : "possible value are : POSTED, REJECTED, EXPORTED",
            "default" : "POSTED",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Account operation rejection reason",
            "example" : "possible value are : REJECTED, FORCED, CLOSED_PERIOD",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "accountingExportFile" : {
            "type" : "string",
            "description" : "Accounting export file"
          },
          "accountingDate" : {
            "type" : "string",
            "description" : "Accounting date",
            "format" : "date-time"
          },
          "transactionalCurrency" : {
            "type" : "string",
            "description" : "TransactionalCurrency"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "rejectedType" : {
            "type" : "string",
            "description" : "The rejected type",
            "example" : "possible value are: A, M",
            "enum" : [ "AUTOMATIC", "MANUAL" ]
          },
          "rejectedDate" : {
            "type" : "string",
            "description" : "The rejected date",
            "format" : "date-time"
          },
          "rejectedDescription" : {
            "type" : "string",
            "description" : "The rejected description"
          },
          "rejectedCode" : {
            "type" : "string"
          }
        },
        "description" : "The rejected paymen",
        "xml" : {
          "name" : "AccountOperation"
        }
      },
      "SellerDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "countryCode" : {
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          },
          "parentSeller" : {
            "type" : "string"
          },
          "customers" : {
            "$ref" : "#/components/schemas/CustomersDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "invoiceTypeSequences" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SequenceDto"
            }
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessEntityDto"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "vatNo" : {
            "type" : "string"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "registrationNo" : {
            "type" : "string"
          },
          "isoICDCode" : {
            "type" : "string"
          },
          "legalText" : {
            "type" : "string"
          },
          "legalType" : {
            "type" : "string"
          }
        }
      },
      "ServiceInstanceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "priceVersionDateSetting" : {
            "type" : "string",
            "enum" : [ "QUOTE", "DELIVERY", "RENEWAL", "EVENT", "MANUAL" ]
          },
          "priceVersionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quantity" : {
            "type" : "number"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "endAgreementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "attributeInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/AttributeInstanceDto"
            }
          },
          "orderNumber" : {
            "type" : "string"
          },
          "rateUntilDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountPS" : {
            "type" : "number"
          },
          "calendarPSCode" : {
            "type" : "string"
          },
          "paymentDayInMonthPS" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "minimumChargeTemplate" : {
            "type" : "string"
          },
          "subscribedTillDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "serviceRenewal" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "ServiceInstancesDto" : {
        "type" : "object",
        "properties" : {
          "serviceInstance" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceInstanceDto"
            }
          }
        }
      },
      "SubCategoryInvoiceAgregateDto" : {
        "required" : [ "amountsByTax", "invoiceSubCategoryCode" ],
        "type" : "object",
        "properties" : {
          "itemNumber" : {
            "type" : "integer",
            "description" : "The item number",
            "format" : "int32"
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          },
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity. Deprecated in v5.2",
            "deprecated" : true
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "invoiceSubCategoryCode" : {
            "type" : "string",
            "description" : "The invoice sub category code"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The user account code"
          },
          "amountsByTax" : {
            "type" : "array",
            "description" : "List of amounts broken down by tax",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/SubcategoryInvoiceAgregateAmountDto"
            }
          },
          "ratedTransactions" : {
            "type" : "array",
            "description" : "List the rated transactions",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RatedTransactionDto"
            }
          }
        },
        "description" : "List of Sub category invoice aggregates",
        "xml" : {
          "name" : "SubCategoryInvoiceAgregate"
        }
      },
      "SubcategoryInvoiceAgregateAmountDto" : {
        "type" : "object",
        "properties" : {
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "Amount without tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "Amount with tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "Tax amount"
          },
          "tax" : {
            "$ref" : "#/components/schemas/TaxDto"
          }
        },
        "description" : "List of amounts broken down by tax"
      },
      "SubscriptionDto" : {
        "required" : [ "billingCycle", "code", "offerTemplate", "seller", "subscriptionDate", "userAccount", "versionNumber" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "versionNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nextVersion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previousVersion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAccount" : {
            "type" : "string"
          },
          "offerTemplate" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endAgreementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CREATED", "ACTIVE", "CANCELED", "RESILIATED", "CLOSED", "SUSPENDED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "accesses" : {
            "$ref" : "#/components/schemas/AccessesDto"
          },
          "services" : {
            "$ref" : "#/components/schemas/ServiceInstancesDto"
          },
          "products" : {
            "$ref" : "#/components/schemas/ProductsDto"
          },
          "productInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductInstanceDto"
            }
          },
          "productsToInstantiate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductToInstantiateDto"
            }
          },
          "terminationReason" : {
            "type" : "string"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "type" : "string"
          },
          "subscribedTillDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewed" : {
            "type" : "boolean"
          },
          "renewalNotifiedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "billingCycle" : {
            "type" : "string"
          },
          "seller" : {
            "type" : "string",
            "description" : "Seller code"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "ratingGroup" : {
            "type" : "string"
          },
          "electronicBilling" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          },
          "mailingType" : {
            "type" : "string"
          },
          "emailTemplate" : {
            "type" : "string"
          },
          "ccedEmails" : {
            "type" : "string"
          },
          "priceListCode" : {
            "type" : "string"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "discountPlanInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstanceDto"
            }
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodDto"
          },
          "customerService" : {
            "type" : "string"
          },
          "salesPersonName" : {
            "type" : "string",
            "description" : "The sales person name"
          },
          "discountPlanInstancesToRemove" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanInstancesToRemove"
              }
            }
          },
          "contractCode" : {
            "type" : "string",
            "description" : "code of existing contract"
          },
          "purchaseOrders" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "SubscriptionRenewalDto" : {
        "type" : "object",
        "properties" : {
          "initialTermType" : {
            "type" : "string",
            "description" : "intial term type",
            "example" : "RECURRING, CALENDAR, FIXED",
            "enum" : [ "RECURRING", "CALENDAR", "FIXED" ]
          },
          "renewalTermType" : {
            "type" : "string",
            "description" : "renewal term type",
            "example" : "possible value are : RECURRING, CALENDAR",
            "enum" : [ "RECURRING", "CALENDAR" ]
          },
          "initialyActiveFor" : {
            "type" : "integer",
            "description" : "The initial period for which the subscription will be active",
            "format" : "int32"
          },
          "initialyActiveForUnit" : {
            "type" : "string",
            "description" : "The initial period for which the subscription will be active",
            "example" : "possible value are : MONTH, DAY",
            "enum" : [ "MONTH", "DAY" ]
          },
          "calendarInitialyActiveFor" : {
            "$ref" : "#/components/schemas/CalendarDto"
          },
          "autoRenew" : {
            "type" : "boolean",
            "description" : "Should subscription be renewed automatically"
          },
          "daysNotifyRenewal" : {
            "type" : "integer",
            "description" : "Number of days before the end of term to trigger notification event",
            "format" : "int32"
          },
          "endOfTermAction" : {
            "type" : "string",
            "description" : "Whether the Subscription should be suspended or terminated if not renewed",
            "example" : "possible value are : SUSPEND, TERMINATE",
            "enum" : [ "SUSPEND", "TERMINATE" ]
          },
          "terminationReasonCode" : {
            "type" : "string",
            "description" : "terminating subscription if endOfTermAction is to terminate"
          },
          "renewFor" : {
            "type" : "integer",
            "description" : "The period to renew subscription for",
            "format" : "int32"
          },
          "calendarRenewFor" : {
            "$ref" : "#/components/schemas/CalendarDto"
          },
          "renewForUnit" : {
            "type" : "string",
            "description" : "he period to renew subscription for",
            "example" : "possible value are : MONTH, DAY",
            "enum" : [ "MONTH", "DAY" ]
          },
          "extendAgreementPeriodToSubscribedTillDate" : {
            "type" : "boolean",
            "description" : "Whether end of agreement date should be matched to the active till date"
          }
        },
        "description" : "The renewal rule"
      },
      "SubscriptionsDto" : {
        "type" : "object",
        "properties" : {
          "subscription" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionDto"
            }
          }
        }
      },
      "TaxInvoiceAggregateDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "itemNumber" : {
            "type" : "integer",
            "description" : "The item number",
            "format" : "int32"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "taxCode" : {
            "type" : "string",
            "description" : "The taxes code"
          },
          "taxPercent" : {
            "type" : "number",
            "description" : "The tax percent applied"
          },
          "accountingCode" : {
            "type" : "string",
            "description" : "The accounting code"
          }
        },
        "description" : "The tax aggregates",
        "xml" : {
          "name" : "CategoryInvoiceAgregate"
        }
      },
      "UserAccountDto" : {
        "required" : [ "billingAccount", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "externalRef1" : {
            "type" : "string",
            "description" : "The external ref 1"
          },
          "externalRef2" : {
            "type" : "string",
            "description" : "The external ref 2"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "The job title"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessEntityDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "loaded" : {
            "type" : "boolean"
          },
          "vatNo" : {
            "type" : "string",
            "description" : "The vat no"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "Deprecated registration no., use registrationNumbers instead"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value"
          },
          "minimumTargetAccount" : {
            "type" : "string",
            "description" : "The billing account code to be used when calculating the min amount billable for Customer and CA"
          },
          "minimumAmountElSpark" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value - for Spark"
          },
          "minimumLabelElSpark" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value - for Spark"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if this is a company"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of registration numbers",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "parentUserAccountCode" : {
            "type" : "string"
          },
          "userAccountCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "billingAccount" : {
            "type" : "string"
          },
          "billingAccountDescription" : {
            "type" : "string"
          },
          "customerAccount" : {
            "type" : "string"
          },
          "customerAccountDescription" : {
            "type" : "string"
          },
          "customer" : {
            "type" : "string"
          },
          "customerDescription" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "isConsumer" : {
            "type" : "boolean"
          },
          "infoGdpr" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GDPRInfoDto"
            }
          },
          "subscriptions" : {
            "$ref" : "#/components/schemas/SubscriptionsDto"
          },
          "parentUserAccount" : {
            "$ref" : "#/components/schemas/UserAccountDto"
          },
          "userAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAccountDto"
            }
          },
          "isoICDCode" : {
            "type" : "string",
            "description" : "The iso ICD Code"
          }
        }
      },
      "UserAccountsDto" : {
        "type" : "object",
        "properties" : {
          "userAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAccountDto"
            }
          }
        },
        "description" : "Use for GET / LIST only"
      },
      "GetSellerResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "seller" : {
            "$ref" : "#/components/schemas/SellerDto"
          }
        },
        "xml" : {
          "name" : "GetSellerResponse"
        }
      },
      "SellerResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "sellers" : {
            "$ref" : "#/components/schemas/SellersDto"
          }
        },
        "xml" : {
          "name" : "SellerResponse"
        }
      },
      "SellersDto" : {
        "type" : "object",
        "properties" : {
          "seller" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SellerDto"
            }
          }
        }
      },
      "SellerCodesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "sellerCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "SellerCodesResponse"
        }
      },
      "GetTaxResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "tax" : {
            "$ref" : "#/components/schemas/TaxDto"
          }
        },
        "xml" : {
          "name" : "GetTaxResponse"
        }
      },
      "GetTaxesResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "taxesDto" : {
            "$ref" : "#/components/schemas/TaxesDto"
          }
        },
        "xml" : {
          "name" : "GetTaxesResponse"
        }
      },
      "GetTerminationReasonResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "terminationReason" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TerminationReasonDto"
            }
          }
        },
        "xml" : {
          "name" : "TerminationReasonResponse"
        }
      },
      "ChargeAggregateDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ChargeAggregate"
        }
      },
      "UsageChargeAggregateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "listChargeAggregate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChargeAggregateDto"
            }
          }
        },
        "xml" : {
          "name" : "UsageChargeAggregateResponse"
        }
      },
      "CatUsageDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "listSubCatUsage" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/SubCatUsageDto"
            }
          }
        },
        "xml" : {
          "name" : "CatUsage"
        }
      },
      "SubCatUsageDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "listUsage" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/UsageDto"
            }
          }
        },
        "xml" : {
          "name" : "SubCatUsage"
        }
      },
      "UsageDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "dateEvent" : {
            "type" : "string",
            "format" : "date-time"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "unityDescription" : {
            "type" : "string"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "parameterExtra" : {
            "type" : "string"
          },
          "offerCode" : {
            "type" : "string"
          },
          "priceplanCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Usage"
        }
      },
      "UsageResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "listCatUsage" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CatUsageDto"
            }
          }
        },
        "xml" : {
          "name" : "UsageResponse"
        }
      },
      "UserDto" : {
        "required" : [ "email", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "username" : {
            "maxLength" : 50,
            "minLength" : 3,
            "type" : "string",
            "description" : "the username of the user"
          },
          "password" : {
            "type" : "string",
            "description" : "Used when creating keycloak user"
          },
          "email" : {
            "type" : "string",
            "description" : "email of the user"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name"
          },
          "roles" : {
            "type" : "array",
            "description" : "list of role associated to user",
            "xml" : {
              "name" : "userRoles",
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of role associated to user",
              "xml" : {
                "name" : "userRole"
              }
            }
          },
          "securedEntities" : {
            "type" : "array",
            "description" : "list of secured entities associated to the user",
            "xml" : {
              "name" : "accessibleEntities",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/SecuredEntityDto"
            }
          },
          "userLevel" : {
            "type" : "string",
            "description" : "the user level"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "date time creation of the user",
            "format" : "date-time"
          },
          "lastLoginDate" : {
            "type" : "string",
            "description" : "the last login date",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "attributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "clientRoles" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "replaceRoles" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "GetUserResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserDto"
          }
        },
        "xml" : {
          "name" : "GetUserResponse"
        }
      },
      "CurrentUserDto" : {
        "required" : [ "email", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "username" : {
            "type" : "string",
            "description" : "The username"
          },
          "email" : {
            "type" : "string",
            "description" : "The email"
          },
          "fullName" : {
            "type" : "string",
            "description" : "The full name"
          },
          "rolesByApplication" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "description" : "List of the roles",
              "example" : "role: [ { KEY_1 : [{ROLE_1:VALUE_1}] }]",
              "items" : {
                "type" : "string",
                "description" : "List of the roles",
                "example" : "role: [ { KEY_1 : [{ROLE_1:VALUE_1}] }]",
                "xml" : {
                  "name" : "role"
                }
              }
            },
            "description" : "List of the roles",
            "example" : "role: [ { KEY_1 : [{ROLE_1:VALUE_1}] }]",
            "xml" : {
              "wrapped" : true
            }
          }
        },
        "xml" : {
          "name" : "CurrentUser"
        }
      },
      "GetCurrentUserResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "user" : {
            "$ref" : "#/components/schemas/CurrentUserDto"
          }
        },
        "xml" : {
          "name" : "GetUserResponse"
        }
      },
      "UsersDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "users" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/UserDto"
            }
          }
        },
        "xml" : {
          "name" : "Users"
        }
      },
      "GetAccessResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "access" : {
            "$ref" : "#/components/schemas/AccessDto"
          }
        },
        "xml" : {
          "name" : "GetAccessResponse"
        }
      },
      "AccessesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "accesses" : {
            "$ref" : "#/components/schemas/AccessesDto"
          }
        },
        "xml" : {
          "name" : "AccessesResponse"
        }
      },
      "AccountHierarchyDto" : {
        "required" : [ "email" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "email"
          },
          "customerId" : {
            "type" : "string"
          },
          "customerCode" : {
            "type" : "string",
            "description" : "code of the customer"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "code of the seller"
          },
          "customerBrandCode" : {
            "type" : "string",
            "description" : "code of the customer brand"
          },
          "customerCategoryCode" : {
            "type" : "string",
            "description" : "code of the customer category"
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "code of the currency"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "code of the customer country"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "code of the language"
          },
          "titleCode" : {
            "type" : "string",
            "description" : "code of the title"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name of the account user"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of the account user"
          },
          "birthDate" : {
            "type" : "string",
            "description" : "date of the birthday",
            "format" : "date-time"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "phone number"
          },
          "billingCycleCode" : {
            "type" : "string",
            "description" : "code of the billing cycle"
          },
          "address1" : {
            "type" : "string",
            "description" : "the first adresse, to be used for account"
          },
          "address2" : {
            "type" : "string",
            "description" : "the second adresse, to be used for account"
          },
          "address3" : {
            "type" : "string",
            "description" : "the third adresse, to be used for account"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "zip code"
          },
          "state" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string",
            "description" : "city of the user account"
          },
          "usePrefix" : {
            "type" : "boolean"
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "taxCategoryCode" : {
            "type" : "string",
            "description" : "Account tax category code - overrides the value from a customer category"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "description" : "List of discount plans",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "description" : "List of discount plans to be disassociated in a billing account",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of discount plans to be disassociated in a billing account",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortField" : {
            "type" : "string"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paymentMethods" : {
            "type" : "array",
            "description" : "The payment methods",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDto"
            }
          },
          "paymentMethod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "Job title. Account Entity"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "Registration number"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of registration numbers",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "checkThreshold" : {
            "type" : "string",
            "description" : "The option on how to check the threshold",
            "example" : "possible value are : BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "customerAccountCheckThreshold" : {
            "type" : "string",
            "description" : "The option on how to check the threshold for customer Account",
            "example" : "possible value are : BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "customerCheckThreshold" : {
            "type" : "string",
            "description" : "The option on how to check the threshold for customer",
            "example" : "possible value are : BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "vatNo" : {
            "type" : "string"
          },
          "mailingType" : {
            "type" : "string",
            "description" : "The mailing Type"
          },
          "emailTemplate" : {
            "type" : "string",
            "description" : "Email template"
          },
          "ccedEmails" : {
            "type" : "string",
            "description" : "cc Emails"
          },
          "minimumAmountEl" : {
            "$ref" : "#/components/schemas/MinimumAmountElDto"
          },
          "customerInvoicingThreshold" : {
            "type" : "number",
            "description" : "The invoicing threshold for the customer"
          },
          "customerAccountInvoicingThreshold" : {
            "type" : "number",
            "description" : "The invoicing threshold for the customer account"
          },
          "thresholdPerEntity" : {
            "type" : "boolean",
            "description" : "check the threshold per entity/invoice for BA"
          },
          "customerAccountThresholdPerEntity" : {
            "type" : "boolean"
          },
          "customerThresholdPerEntity" : {
            "type" : "boolean"
          },
          "generalClientAccountCode" : {
            "type" : "string",
            "description" : "General client account code"
          },
          "parentCustomer" : {
            "$ref" : "#/components/schemas/CustomerDto"
          }
        },
        "xml" : {
          "name" : "AccountHierarchy"
        }
      },
      "MinimumAmountElDto" : {
        "type" : "object",
        "properties" : {
          "customerMinimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value for Customer"
          },
          "customerMinimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value for Customer"
          },
          "customerMinimumTargetAccount" : {
            "type" : "string",
            "description" : "The billable Entity for customer"
          },
          "customerAccountMinimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value for CA"
          },
          "customerAccountMinimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value for CA"
          },
          "customerAccountMinimumTargetAccount" : {
            "type" : "string",
            "description" : "The billable Entity for CA"
          },
          "billingAccountMinimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value for BA"
          },
          "billingAccountMinimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value for BA"
          },
          "userAccountMinimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value for UA"
          },
          "userAccountMinimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value for UA"
          },
          "customerMinimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template for the customer"
          },
          "customerAccountMinimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template for the customer account"
          },
          "billingAccountMinimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template for the billing account"
          },
          "userAccountMinimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template for the billing account"
          }
        }
      },
      "CRMAccountHierarchyDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "crmAccountType" : {
            "type" : "string"
          },
          "crmParentCode" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalRef1" : {
            "type" : "string"
          },
          "externalRef2" : {
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerCategory" : {
            "type" : "string"
          },
          "customerBrand" : {
            "type" : "string"
          },
          "registrationNo" : {
            "type" : "string"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "vatNo" : {
            "type" : "string"
          },
          "seller" : {
            "type" : "string"
          },
          "mandateIdentification" : {
            "type" : "string"
          },
          "mandateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "currency" : {
            "type" : "string"
          },
          "caStatus" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSE" ]
          },
          "creditCategory" : {
            "type" : "string"
          },
          "dateStatus" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateDunningLevel" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dunningLevel" : {
            "type" : "string",
            "enum" : [ "R0", "R1", "R2", "R3", "R4", "R5", "R6" ]
          },
          "paymentMethods" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDto"
            }
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          },
          "paymentTerms" : {
            "type" : "string"
          },
          "billingCycle" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "electronicBilling" : {
            "type" : "boolean"
          },
          "baStatus" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "email" : {
            "type" : "string"
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "uaStatus" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "cfToAdd" : {
            "$ref" : "#/components/schemas/CustomFieldDto"
          },
          "cfMapToAdd" : {
            "$ref" : "#/components/schemas/CustomFieldDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "mailingType" : {
            "type" : "string"
          },
          "emailTemplate" : {
            "type" : "string"
          },
          "ccedEmails" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "$ref" : "#/components/schemas/MinimumAmountElDto"
          },
          "customerInvoicingThreshold" : {
            "type" : "number"
          },
          "customerAccountInvoicingThreshold" : {
            "type" : "number"
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "customerAccountCheckThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "customerCheckThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "taxCategoryCode" : {
            "type" : "string"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "parentCustomerCode" : {
            "type" : "string"
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "customerAccountThresholdPerEntity" : {
            "type" : "boolean"
          },
          "customerThresholdPerEntity" : {
            "type" : "boolean"
          },
          "company" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "CRMAccountHierarchy"
        }
      },
      "CustomerHierarchyDto" : {
        "required" : [ "sellers" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "sellers" : {
            "$ref" : "#/components/schemas/SellersDto"
          },
          "options" : {
            "$ref" : "#/components/schemas/OptionsDto"
          }
        },
        "xml" : {
          "name" : "CustomerHierarchy"
        }
      },
      "OptionsDto" : {
        "type" : "object",
        "properties" : {
          "overwriteAllAccessPoints" : {
            "type" : "boolean"
          }
        }
      },
      "CustomerListResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customers" : {
            "$ref" : "#/components/schemas/CustomersDto"
          }
        },
        "xml" : {
          "name" : "CustomerListResponse"
        }
      },
      "GetAccountHierarchyResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customers" : {
            "$ref" : "#/components/schemas/CustomersDto"
          }
        },
        "xml" : {
          "name" : "FindAccountHierarchyResponse"
        }
      },
      "FindAccountHierachyRequestDto" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          }
        }
      },
      "CounterInstanceDto" : {
        "type" : "object",
        "properties" : {
          "customerAccountCode" : {
            "type" : "string"
          },
          "counterTemplateCode" : {
            "type" : "string"
          },
          "userAccountCode" : {
            "type" : "string"
          },
          "billingAccountCode" : {
            "type" : "string"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "counterPeriods" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Counter Periods",
            "items" : {
              "$ref" : "#/components/schemas/CounterPeriodDto"
            }
          },
          "chargeInstanceCode" : {
            "type" : "string"
          }
        }
      },
      "CountersInstancesDto" : {
        "type" : "object",
        "properties" : {
          "counterInstance" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstanceDto"
            }
          }
        }
      },
      "GetCountersInstancesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "countersInstances" : {
            "$ref" : "#/components/schemas/CountersInstancesDto"
          }
        }
      },
      "GetBillingAccountResponseDto" : {
        "required" : [ "billingCycle", "code", "country", "customerAccount", "language" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "externalRef1" : {
            "type" : "string",
            "description" : "The external ref 1"
          },
          "externalRef2" : {
            "type" : "string",
            "description" : "The external ref 2"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "The job title"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessEntityDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "loaded" : {
            "type" : "boolean"
          },
          "vatNo" : {
            "type" : "string",
            "description" : "The vat no"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "Deprecated registration no., use registrationNumbers instead"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value"
          },
          "minimumTargetAccount" : {
            "type" : "string",
            "description" : "The billing account code to be used when calculating the min amount billable for Customer and CA"
          },
          "minimumAmountElSpark" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value - for Spark"
          },
          "minimumLabelElSpark" : {
            "type" : "string",
            "description" : "Expression to determine rated transaction description to reach minimum amount value - for Spark"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if this is a company"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "registrationNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of registration numbers",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumberDto"
            }
          },
          "customerAccount" : {
            "type" : "string",
            "description" : "The customer account"
          },
          "billingCycle" : {
            "type" : "string",
            "description" : "The billing cycle"
          },
          "country" : {
            "type" : "string",
            "description" : "The country"
          },
          "tradingCurrency" : {
            "type" : "string",
            "description" : "The trading currency"
          },
          "language" : {
            "type" : "string",
            "description" : "The language"
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "description" : "The next invoice date",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "description" : "The subscription date",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "description" : "The termination date",
            "format" : "date-time"
          },
          "electronicBilling" : {
            "type" : "boolean",
            "description" : "The electronic billing"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of billing account",
            "example" : "possible value are : ACTIVE, CANCELED, TERMINATED, CLOSED",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date, it set automatically when the status was changed",
            "format" : "date-time"
          },
          "terminationReason" : {
            "type" : "string",
            "description" : "The termination reason"
          },
          "email" : {
            "type" : "string",
            "description" : "The email"
          },
          "invoices" : {
            "type" : "array",
            "description" : "list of the invoice",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceDto"
            }
          },
          "invoicingThreshold" : {
            "type" : "number",
            "description" : "The invoicing threshold"
          },
          "phone" : {
            "type" : "string",
            "description" : "The phone"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string",
            "description" : "Minimum Invoice SubCategory"
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Field was deprecated in 4.6 version. Use 'paymentMethods' field on CustomerAccount entity instead",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          },
          "paymentTerms" : {
            "type" : "string",
            "description" : "Field was deprecated in 4.6 version. Use custom fields instead"
          },
          "userAccounts" : {
            "$ref" : "#/components/schemas/UserAccountsDto"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "description" : "List of discount plans. Use in instantiating a discount plan instance",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "description" : "List of discount plans to be disassociated in a BillingAccount",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of discount plans to be disassociated in a BillingAccount",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "discountPlanInstances" : {
            "type" : "array",
            "description" : "Use to return the active discount plans for this entity",
            "example" : "discountPlanInstance : []",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstanceDto"
            }
          },
          "mailingType" : {
            "type" : "string",
            "description" : "Mailing type"
          },
          "emailTemplate" : {
            "type" : "string",
            "description" : "Email Template code"
          },
          "ccedEmails" : {
            "type" : "string",
            "description" : "list of emails separated by comma",
            "example" : "example1@example.com,example2@example.com"
          },
          "taxCategoryCode" : {
            "type" : "string",
            "description" : "Account tax category code - overrides the value from a customer category"
          },
          "checkThreshold" : {
            "type" : "string",
            "description" : "The option on how to check the threshold",
            "example" : "possible value are: BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "infoGdpr" : {
            "type" : "array",
            "description" : "List of GDPR related to billing account",
            "items" : {
              "$ref" : "#/components/schemas/GDPRInfoDto"
            }
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodDto"
          },
          "thresholdPerEntity" : {
            "type" : "boolean",
            "description" : "check the threshold per entity/invoice for BA"
          },
          "primaryContact" : {
            "type" : "string",
            "description" : "The primary contact"
          },
          "isoICDCode" : {
            "type" : "string",
            "description" : "The iso ICD Code"
          },
          "exemptionReason" : {
            "type" : "string",
            "description" : "The exemption reason"
          },
          "priceListCode" : {
            "type" : "string",
            "description" : "The default Price List"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccountDto"
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TagDto"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          }
        },
        "xml" : {
          "name" : "GetBillingAccountResponse"
        }
      },
      "TagDto" : {
        "required" : [ "code", "name", "tagTypeCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "code of the seller"
          },
          "name" : {
            "type" : "string",
            "description" : "name of the tag"
          },
          "tagTypeCode" : {
            "type" : "string",
            "description" : "code of the type of the tag"
          },
          "parentTagCode" : {
            "type" : "string",
            "description" : "code of the tag parent"
          },
          "filterEl" : {
            "type" : "string",
            "description" : "filter expression language"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "BillingAccountsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "billingAccounts" : {
            "$ref" : "#/components/schemas/BillingAccountsDto"
          }
        },
        "xml" : {
          "name" : "BillingAccountsResponse"
        }
      },
      "BaseEntityDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          }
        }
      },
      "BusinessAccountModelDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "license" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "type" : "string"
          },
          "logoPictureFile" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          },
          "moduleItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BaseEntityDto"
            }
          },
          "hierarchyType" : {
            "type" : "string",
            "enum" : [ "S", "S_C", "C", "S_CA", "C_CA", "CA", "S_BA", "C_BA", "CA_BA", "BA", "S_UA", "C_UA", "CA_UA", "BA_UA", "UA" ]
          },
          "transient" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "BusinessAccountModel"
        }
      },
      "BusinessAccountModelResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModelDto"
          }
        },
        "xml" : {
          "name" : "BusinessAccountModelResponse"
        }
      },
      "ParentEntitiesDto" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ParentEntityDto"
            }
          }
        }
      },
      "ParentEntityDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      },
      "ParentListResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "parents" : {
            "$ref" : "#/components/schemas/ParentEntitiesDto"
          }
        }
      },
      "CRMAccountTypeSearchDto" : {
        "type" : "object",
        "properties" : {
          "searchTerm" : {
            "type" : "string"
          },
          "accountTypeCode" : {
            "type" : "string"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "type" : "integer",
            "format" : "int32"
          },
          "order" : {
            "type" : "string",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          },
          "sortField" : {
            "type" : "string"
          }
        }
      },
      "MeveoModuleDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "license" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "type" : "string"
          },
          "logoPictureFile" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          },
          "moduleItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BaseEntityDto"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "Module"
        }
      },
      "MeveoModuleDtosResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "modules" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/MeveoModuleDto"
            }
          }
        },
        "xml" : {
          "name" : "MeveoModuleDtosResponse"
        }
      },
      "GetCustomerAccountResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccountDto"
          }
        },
        "xml" : {
          "name" : "GetCustomerAccountResponse"
        }
      },
      "CustomerAccountsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "customerAccounts" : {
            "$ref" : "#/components/schemas/CustomerAccountsDto"
          }
        },
        "xml" : {
          "name" : "CustomerAccountsResponse"
        }
      },
      "TransferCustomerAccountDto" : {
        "required" : [ "fromCustomerAccountCode", "toCustomerAccountCode" ],
        "type" : "object",
        "properties" : {
          "fromCustomerAccountCode" : {
            "type" : "string"
          },
          "toCustomerAccountCode" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          }
        },
        "xml" : {
          "name" : "TransferCustomerAccount"
        }
      },
      "CustomerSequenceDto" : {
        "required" : [ "code", "seller" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "genericSequence" : {
            "$ref" : "#/components/schemas/GenericSequenceDto"
          },
          "seller" : {
            "type" : "string",
            "description" : "Code of the seller"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "GenericSequenceDto" : {
        "type" : "object",
        "properties" : {
          "prefix" : {
            "pattern" : "^[\\p{Upper}-]{1,16}$",
            "type" : "string",
            "description" : "Prefix of sequence"
          },
          "sequenceSize" : {
            "type" : "integer",
            "description" : "Size of the sequence. Maximum allowable for RUM is 35",
            "format" : "int64"
          },
          "currentSequenceNb" : {
            "type" : "integer",
            "description" : "Current value of the sequence",
            "format" : "int64"
          }
        }
      },
      "GetCustomerResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customer" : {
            "$ref" : "#/components/schemas/CustomerDto"
          }
        },
        "xml" : {
          "name" : "GetCustomerResponse"
        }
      },
      "GetCustomerCategoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customerCategory" : {
            "$ref" : "#/components/schemas/CustomerCategoryDto"
          }
        },
        "xml" : {
          "name" : "GetCustomerCategoryResponse"
        }
      },
      "GenericSequenceValueResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "sequence" : {
            "$ref" : "#/components/schemas/GenericSequenceDto"
          },
          "value" : {
            "type" : "string"
          },
          "seller" : {
            "type" : "string"
          },
          "paymentGateway" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "GenericSequenceValueResponse"
        }
      },
      "CustomersResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "customers" : {
            "$ref" : "#/components/schemas/CustomersDto"
          }
        },
        "xml" : {
          "name" : "CustomersResponse"
        }
      },
      "ProviderContactDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "mobile" : {
            "type" : "string"
          },
          "fax" : {
            "type" : "string"
          },
          "genericMail" : {
            "type" : "string"
          },
          "addressDto" : {
            "$ref" : "#/components/schemas/AddressDto"
          }
        },
        "xml" : {
          "name" : "ProviderContract"
        }
      },
      "ProviderContactResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "providerContact" : {
            "$ref" : "#/components/schemas/ProviderContactDto"
          }
        },
        "xml" : {
          "name" : "ProviderContactResponse"
        }
      },
      "ProviderContactsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "providerContacts" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProviderContactDto"
            }
          }
        },
        "xml" : {
          "name" : "ProviderContactsResponse"
        }
      },
      "TitleResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "titleDto" : {
            "$ref" : "#/components/schemas/TitleDto"
          }
        },
        "xml" : {
          "name" : "TitleResponse"
        }
      },
      "TitlesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "titles" : {
            "$ref" : "#/components/schemas/TitlesDto"
          }
        },
        "xml" : {
          "name" : "TitlesResponse"
        }
      },
      "ApplyProductRequestDto" : {
        "required" : [ "operationDate", "product" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "product" : {
            "type" : "string"
          },
          "userAccount" : {
            "type" : "string"
          },
          "subscription" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quantity" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "type" : "string"
          },
          "criteria2" : {
            "type" : "string"
          },
          "criteria3" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "seller" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ApplyProductRequest"
        }
      },
      "GetUserAccountResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccountDto"
          }
        },
        "xml" : {
          "name" : "GetUserAccountResponse"
        }
      },
      "UserAccountsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "userAccounts" : {
            "$ref" : "#/components/schemas/UserAccountsDto"
          }
        },
        "xml" : {
          "name" : "UserAccountsResponse"
        }
      },
      "FileFormatDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "fileNamePattern" : {
            "type" : "string"
          },
          "fileNameUniqueness" : {
            "type" : "boolean"
          },
          "fileTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "configurationTemplate" : {
            "type" : "string"
          },
          "recordName" : {
            "type" : "string"
          },
          "inputDirectory" : {
            "type" : "string"
          },
          "outputDirectory" : {
            "type" : "string"
          },
          "rejectDirectory" : {
            "type" : "string"
          },
          "archiveDirectory" : {
            "type" : "string"
          },
          "jobCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "FileFormat"
        }
      },
      "FileFormatResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dto" : {
            "$ref" : "#/components/schemas/FileFormatDto"
          }
        },
        "xml" : {
          "name" : "FileFormatResponse"
        }
      },
      "FileFormatListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "dtos" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/FileFormatDto"
            }
          }
        },
        "xml" : {
          "name" : "FileFormatListResponse"
        }
      },
      "FileDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "directory" : {
            "type" : "boolean"
          }
        }
      },
      "GetFilesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "files" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/FileDto"
            }
          }
        },
        "xml" : {
          "name" : "GetFilesResponse"
        }
      },
      "FileRequestDto" : {
        "required" : [ "content", "filepath" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "filepath" : {
            "type" : "string"
          },
          "content" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "FileRequest"
        }
      },
      "AccountingCodeDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "parentAccountingCode" : {
            "type" : "string"
          },
          "chartOfAccountTypeEnum" : {
            "type" : "string",
            "enum" : [ "ASSETS", "LIABILITIES", "EQUITY", "REVENUE", "EXPENSE" ]
          },
          "chartOfAccountViewTypeEnum" : {
            "type" : "string",
            "enum" : [ "VIEW", "REGULAR" ]
          },
          "reportingAccount" : {
            "type" : "string"
          },
          "notes" : {
            "type" : "string"
          },
          "migrated" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "AccountingCodeGetResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCodeDto"
          }
        },
        "xml" : {
          "name" : "AccountingCodeGetResponse"
        }
      },
      "AccountingCodeListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "accountingCodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingCodeDto"
            }
          }
        },
        "xml" : {
          "name" : "AccountingCodeListResponse"
        }
      },
      "PdpStatusDto" : {
        "type" : "object",
        "properties" : {
          "transmittedFormat" : {
            "type" : "string",
            "description" : "transmitted format => UBL, XML, PDF ",
            "enum" : [ "UBL", "XML", "PDF" ]
          },
          "origin" : {
            "type" : "string",
            "description" : "origin can be UI, API"
          },
          "returnCode" : {
            "type" : "integer",
            "description" : "the code returned by the caller",
            "format" : "int32"
          },
          "label" : {
            "type" : "string",
            "description" : "label of the status"
          },
          "invoiceIdentifier" : {
            "type" : "string",
            "description" : "the invoice identifier"
          },
          "invoiceNumber" : {
            "type" : "string",
            "description" : "the invoice number"
          },
          "status" : {
            "type" : "string",
            "description" : "status of the invoice",
            "enum" : [ "DEPOSITED", "CASHED", "RECTIFICATIVE", "REJECTED", "DISPUTED" ]
          },
          "depositDate" : {
            "type" : "string",
            "description" : "deposit date",
            "format" : "date-time"
          }
        },
        "xml" : {
          "name" : "pdpStatusDto"
        }
      },
      "InvoicingPlanItemDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "billingPlanCode" : {
            "type" : "string"
          },
          "advancement" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rateToBill" : {
            "type" : "number"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "InvoicingPlanItem"
        }
      },
      "InvoicingPlanItemResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoicingPlanItemDto" : {
            "$ref" : "#/components/schemas/InvoicingPlanItemDto"
          }
        },
        "xml" : {
          "name" : "InvoicingPlanItemResponse"
        }
      },
      "InvoicingPlanItemsDto" : {
        "type" : "object",
        "properties" : {
          "invoicingPlanItem" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoicingPlanItemDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoicingPlanItems"
        }
      },
      "InvoicingPlanItemsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "invoicingPlanItems" : {
            "$ref" : "#/components/schemas/InvoicingPlanItemsDto"
          }
        },
        "xml" : {
          "name" : "InvoicingPlanItemsResponse"
        }
      },
      "InvoicingPlanDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "InvoicingPlan"
        }
      },
      "InvoicingPlanResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoicingPlanDto" : {
            "$ref" : "#/components/schemas/InvoicingPlanDto"
          }
        },
        "xml" : {
          "name" : "InvoicingPlanResponse"
        }
      },
      "InvoicingPlansDto" : {
        "type" : "object",
        "properties" : {
          "invoicingPlan" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoicingPlanDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoicingPlans"
        }
      },
      "InvoicingPlansResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "invoicingPlans" : {
            "$ref" : "#/components/schemas/InvoicingPlansDto"
          }
        },
        "xml" : {
          "name" : "InvoicingPlansResponse"
        }
      },
      "CancelBillingRunRequestDto" : {
        "required" : [ "billingRunId" ],
        "type" : "object",
        "properties" : {
          "billingRunId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "CancelBillingRunRequest"
        }
      },
      "InvoiceValidationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "deleteCanceledInvoices" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "InvoiceValidationDto"
        }
      },
      "CreateBillingRunDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "billingCycleCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "billingRunTypeEnum" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "AUTOMATIC", "MANUAL", "FULL_AUTOMATIC" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "referenceDate" : {
            "type" : "string",
            "enum" : [ "TODAY", "NEXT_INVOICE_DATE", "LAST_TRANSACTION_DATE", "END_DATE" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "computeDatesAtValidation" : {
            "type" : "boolean"
          },
          "skipValidationScript" : {
            "type" : "boolean"
          },
          "rejectAutoAction" : {
            "type" : "string",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "suspectAutoAction" : {
            "type" : "string",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "generateAO" : {
            "type" : "boolean"
          },
          "descriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "disableAggregation" : {
            "type" : "boolean",
            "description" : " Do not aggregate Rated transactions to Invoice lines at all",
            "nullable" : true
          },
          "useAccountingArticleLabel" : {
            "type" : "boolean",
            "description" : "Aggregate based on accounting article label instead of RT description",
            "nullable" : true
          },
          "dateAggregation" : {
            "type" : "string",
            "description" : "Aggregate by date option",
            "nullable" : true,
            "enum" : [ "NO_DATE_AGGREGATION", "DAY_OF_USAGE_DATE", "WEEK_OF_USAGE_DATE", "MONTH_OF_USAGE_DATE" ]
          },
          "aggregateUnitAmounts" : {
            "type" : "boolean",
            "description" : "Aggregate per unit amount",
            "nullable" : true
          },
          "ignoreSubscriptions" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore subscription field (multiple subscriptions will be aggregated together)",
            "nullable" : true
          },
          "ignoreOrders" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore order field (multiple orders will be aggregated together)",
            "nullable" : true
          },
          "ignoreUserAccounts" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore user accounts field (multiple user accounts will be aggregated together)",
            "nullable" : true
          },
          "discountAggregation" : {
            "type" : "string",
            "description" : "Use incremental mode in invoice lines or not",
            "nullable" : true,
            "enum" : [ "NO_AGGREGATION", "FULL_AGGREGATION" ]
          },
          "incrementalInvoiceLines" : {
            "type" : "boolean",
            "description" : "Use incremental mode in invoice lines or not",
            "nullable" : true
          },
          "preReportAutoOnCreate" : {
            "type" : "boolean",
            "description" : "Decide if Report job will be launched automatically at billing run creation"
          },
          "preReportAutoOnInvoiceLinesJob" : {
            "type" : "boolean",
            "description" : "Decide if Report job will be launched automatically during invoice line job"
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ignoreServiceInstances" : {
            "type" : "boolean",
            "description" : "Decide if service instances will be added to invoice lines or ignored",
            "nullable" : true
          }
        },
        "xml" : {
          "name" : "CreateBillingRunDto"
        }
      },
      "GetBillingAccountListInRunResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "billingAccountsDto" : {
            "$ref" : "#/components/schemas/BillingAccountsDto"
          }
        },
        "xml" : {
          "name" : "GetBillingAccountListInRunResponse"
        }
      },
      "BillingRunDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "processDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "NEW", "PREINVOICED", "PREVALIDATED", "CANCELED", "INVOICES_GENERATED", "POSTINVOICED", "POSTVALIDATED", "VALIDATED", "CANCELLING", "REJECTED", "CREATING_INVOICE_LINES", "INVOICE_LINES_CREATED", "INVOICES_CREATED", "MINIMUM_ADDED", "THRESHOLD_CHECKED", "DISCOUNT_ADDED", "TAX_COMPUTED", "DRAFT_INVOICES", "OPEN" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/BillingCycleDto"
          },
          "billingAccountNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "billableBillingAcountNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "producibleInvoiceNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "producibleAmountWithoutTax" : {
            "type" : "number"
          },
          "producibleAmountTax" : {
            "type" : "number"
          },
          "producibleAmountWithTax" : {
            "type" : "number"
          },
          "prAmountWithoutTax" : {
            "type" : "number"
          },
          "prAmountWithTax" : {
            "type" : "number"
          },
          "prAmountTax" : {
            "type" : "number"
          },
          "processType" : {
            "type" : "string",
            "enum" : [ "AUTOMATIC", "MANUAL", "FULL_AUTOMATIC" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "referenceDate" : {
            "type" : "string",
            "enum" : [ "TODAY", "NEXT_INVOICE_DATE", "LAST_TRANSACTION_DATE", "END_DATE" ]
          },
          "rejectionReason" : {
            "type" : "string"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "countryCode" : {
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          },
          "selectedBillingAccounts" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "computeDatesAtValidation" : {
            "type" : "boolean"
          },
          "generateAO" : {
            "type" : "boolean"
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "skipValidationScript" : {
            "type" : "boolean"
          },
          "rejectAutoAction" : {
            "type" : "string",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "suspectAutoAction" : {
            "type" : "string",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "invoiceNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "BillingRun"
        }
      },
      "GetBillingRunInfoResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "billingRunDto" : {
            "$ref" : "#/components/schemas/BillingRunDto"
          }
        },
        "xml" : {
          "name" : "GetBillingRunInfoResponse"
        }
      },
      "GetPostInvoicingReportsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "postInvoicingReportsDTO" : {
            "$ref" : "#/components/schemas/PostInvoicingReportsDTO"
          }
        },
        "xml" : {
          "name" : "GetPostInvoicingReportsResponse"
        }
      },
      "PostInvoicingReportsDTO" : {
        "type" : "object",
        "properties" : {
          "invoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "positiveInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "negativeInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "globalAmount" : {
            "type" : "number"
          },
          "positiveInvoicesAmountHT" : {
            "type" : "number"
          },
          "positiveInvoicesTaxAmount" : {
            "type" : "number"
          },
          "positiveInvoicesAmount" : {
            "type" : "number"
          },
          "negativeInvoicesAmountHT" : {
            "type" : "number"
          },
          "negativeInvoicesTaxAmount" : {
            "type" : "number"
          },
          "negativeInvoicesAmount" : {
            "type" : "number"
          },
          "emptyInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "electronicInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "checkInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "directDebitInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tipInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "wiretransferInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "creditDebitCardInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "npmInvoicesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "checkAmuontHT" : {
            "type" : "number"
          },
          "directDebitAmuontHT" : {
            "type" : "number"
          },
          "tipAmuontHT" : {
            "type" : "number"
          },
          "wiretransferAmuontHT" : {
            "type" : "number"
          },
          "creditDebitCardAmountHT" : {
            "type" : "number"
          },
          "npmAmountHT" : {
            "type" : "number"
          },
          "checkAmuont" : {
            "type" : "number"
          },
          "directDebitAmuont" : {
            "type" : "number"
          },
          "tipAmuont" : {
            "type" : "number"
          },
          "wiretransferAmuont" : {
            "type" : "number"
          },
          "creditDebitCardAmount" : {
            "type" : "number"
          },
          "npmAmount" : {
            "type" : "number"
          }
        }
      },
      "GetPreInvoicingReportsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "preInvoicingReportsDTO" : {
            "$ref" : "#/components/schemas/PreInvoicingReportsDTO"
          }
        },
        "xml" : {
          "name" : "GetPreInvoicingReportsResponse"
        }
      },
      "PreInvoicingReportsDTO" : {
        "type" : "object",
        "properties" : {
          "billingCycleCode" : {
            "type" : "string"
          },
          "billingAccountNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "billableBillingAccountNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amoutWitountTax" : {
            "type" : "number"
          },
          "checkBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "directDebitBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tipBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "wiretransferBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "creditDebitCardBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "checkBillableBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "directDebitBillableBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tipBillableBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "wiretransferBillableBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "creditDebitCardBillableBANumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "checkBillableBAAmountHT" : {
            "type" : "number"
          },
          "directDebitBillableBAAmountHT" : {
            "type" : "number"
          },
          "tipBillableBAAmountHT" : {
            "type" : "number"
          },
          "wiretransferBillableBAAmountHT" : {
            "type" : "number"
          },
          "creditDebitCardBillableBAAmountHT" : {
            "type" : "number"
          },
          "subCategoriesAmountHT" : {
            "type" : "number"
          },
          "taxesAmount" : {
            "type" : "number"
          }
        }
      },
      "InvalidateInvoiceDocumentsDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invalidateXMLInvoices" : {
            "type" : "boolean"
          },
          "invalidatePDFInvoices" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "InvalidateInvoiceDto"
        }
      },
      "ValidateBillingRunRequestDto" : {
        "required" : [ "billingRunId" ],
        "type" : "object",
        "properties" : {
          "billingRunId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "ValidateBillingRunRequest"
        }
      },
      "PrepaidReservationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "reservationId" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "consumedQuantity" : {
            "type" : "number"
          }
        }
      },
      "Access" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accessUserId" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "cacheKey" : {
            "type" : "string"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AccountEntity" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "defaultLevel" : {
            "type" : "boolean"
          },
          "providerContact" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModel"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "vatStatus" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "VALID", "INVALID" ]
          },
          "registrationNo" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "accountType" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AccountOperation" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountingEntries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingEntry"
            }
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "matchingAmounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MatchingAmount"
            }
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "paymentHistories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistory"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AccountingArticle" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "articleFamily" : {
            "$ref" : "#/components/schemas/ArticleFamily"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "invoiceTypeEl" : {
            "type" : "string"
          },
          "analyticCode1" : {
            "type" : "string"
          },
          "analyticCode2" : {
            "type" : "string"
          },
          "analyticCode3" : {
            "type" : "string"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "accountingCodeEl" : {
            "type" : "string"
          },
          "columnCriteriaEL" : {
            "type" : "string"
          },
          "accountingCodeMappings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingCodeMapping"
            }
          },
          "ignoreAggregation" : {
            "type" : "boolean"
          },
          "allowanceCode" : {
            "$ref" : "#/components/schemas/UntdidAllowanceCode"
          },
          "physical" : {
            "type" : "boolean"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AccountingArticleAmount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "amount" : {
            "type" : "number"
          },
          "billingRunReport" : {
            "$ref" : "#/components/schemas/BillingRunReport"
          },
          "ratedTransactionCount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "AccountingCode" : {
        "required" : [ "chartOfAccountTypeEnum", "chartOfAccountViewTypeEnum", "code", "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "parentAccountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "chartOfAccountTypeEnum" : {
            "type" : "string",
            "enum" : [ "ASSETS", "LIABILITIES", "EQUITY", "REVENUE", "EXPENSE" ]
          },
          "reportingAccount" : {
            "type" : "string"
          },
          "chartOfAccountViewTypeEnum" : {
            "type" : "string",
            "enum" : [ "VIEW", "REGULAR" ]
          },
          "notes" : {
            "type" : "string"
          },
          "migrated" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "AccountingCodeMapping" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "billingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "billingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "sellerCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "criteriaElValue" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "AccountingEntry" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "accountOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "originEntry" : {
            "$ref" : "#/components/schemas/AccountingEntry"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "invoiceCategory" : {
            "$ref" : "#/components/schemas/InvoiceCategory"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "amount" : {
            "type" : "number"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string"
          },
          "exportDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "extraParam1" : {
            "type" : "string"
          },
          "extraParam2" : {
            "type" : "string"
          },
          "extraParam3" : {
            "type" : "string"
          },
          "isWritten" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "AccountingScheme" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "longDescription" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "longDescriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ActionDunning" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "typeAction" : {
            "type" : "string",
            "enum" : [ "FILE", "LETTER", "EMAIL", "CHARGE" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "A", "T", "E" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoice"
          },
          "dunningLOT" : {
            "$ref" : "#/components/schemas/DunningLOT"
          },
          "fromLevel" : {
            "type" : "string",
            "enum" : [ "R0", "R1", "R2", "R3", "R4", "R5", "R6" ]
          },
          "toLevel" : {
            "type" : "string",
            "enum" : [ "R0", "R1", "R2", "R3", "R4", "R5", "R6" ]
          },
          "actionPlanItem" : {
            "$ref" : "#/components/schemas/WFAction"
          },
          "amountDue" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "AdditionalDetails" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "companyName" : {
            "maxLength" : 200,
            "minLength" : 0,
            "type" : "string"
          },
          "position" : {
            "maxLength" : 200,
            "minLength" : 0,
            "type" : "string"
          },
          "instantMessengers" : {
            "maxLength" : 500,
            "minLength" : 0,
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "address2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "address3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "address4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "address5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "zipCode" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "city" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "state" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "countryBundle" : {
            "type" : "string"
          }
        }
      },
      "AddressBook" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "contacts" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contact"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "AddressBookContact" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "addressBook" : {
            "$ref" : "#/components/schemas/AddressBook"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "position" : {
            "type" : "string"
          },
          "mainContact" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Amounts" : {
        "type" : "object",
        "properties" : {
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          }
        }
      },
      "ApplicableEntity" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "entityClass" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "ArticleFamily" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "articleFamily" : {
            "$ref" : "#/components/schemas/ArticleFamily"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ArticleMapping" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "mappingScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ArticleMappingLine" : {
        "required" : [ "attributeOperator", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "articleMapping" : {
            "$ref" : "#/components/schemas/ArticleMapping"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "attributeOperator" : {
            "type" : "string",
            "enum" : [ "AND", "OR" ]
          },
          "attributesMapping" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeMapping"
            }
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "mappingKeyEL" : {
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Attribute" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "parentAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "elValue" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "allowedValues" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "chargeTemplates" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChargeTemplate"
            }
          },
          "attributeType" : {
            "type" : "string",
            "enum" : [ "INFO", "LIST_TEXT", "LIST_MULTIPLE_TEXT", "LIST_NUMERIC", "LIST_MULTIPLE_NUMERIC", "TEXT", "NUMERIC", "INTEGER", "DATE", "CALENDAR", "EMAIL", "PHONE", "TOTAL", "COUNT", "EXPRESSION_LANGUAGE", "BOOLEAN" ]
          },
          "medias" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Media"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "commercialRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeader"
            }
          },
          "assignedAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            }
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "groupedAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GroupedAttributes"
            }
          },
          "productVersionAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttribute"
            }
          },
          "offerTemplateAttribute" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateAttribute"
            }
          },
          "attributeCategory" : {
            "type" : "string",
            "enum" : [ "REGULAR", "BUSINESS" ]
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AttributeInstance" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "parentAttributeValue" : {
            "$ref" : "#/components/schemas/AttributeInstance"
          },
          "assignedAttributeValue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeInstance"
            }
          },
          "stringValue" : {
            "type" : "string"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "booleanValue" : {
            "type" : "boolean"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "value" : {
            "type" : "object"
          },
          "realValue" : {
            "type" : "object"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AttributeMapping" : {
        "required" : [ "operator" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "articleMappingLine" : {
            "$ref" : "#/components/schemas/ArticleMappingLine"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "attributeValue" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "GREATER_THAN", "LESS_THAN", "EQUAL", "GREATER_THAN_OR_EQUAL", "LESS_THAN_OR_EQUAL", "NOT_EQUAL", "EXISTS", "CONTAINS", "NOT_CONTAINS" ]
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Auditable" : {
        "type" : "object",
        "properties" : {
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creator" : {
            "type" : "string"
          },
          "updater" : {
            "type" : "string"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUser" : {
            "type" : "string"
          }
        }
      },
      "AuditableFieldHistory" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string"
          },
          "previousState" : {
            "type" : "object"
          },
          "currentState" : {
            "type" : "object"
          },
          "auditType" : {
            "type" : "string",
            "enum" : [ "STATUS", "RENEWAL", "OTHER" ]
          },
          "historable" : {
            "type" : "boolean"
          },
          "notfiable" : {
            "type" : "boolean"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          }
        }
      },
      "AutomatedPayment" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "paymentHistories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistory"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "dunningDocument" : {
            "$ref" : "#/components/schemas/DunningDocument"
          },
          "paymentOrder" : {
            "type" : "string"
          },
          "fees" : {
            "type" : "number"
          },
          "transactionalFees" : {
            "type" : "number"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "isManualPayment" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "AutomatedRefund" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "paymentHistories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistory"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "refundedPayment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "BankCoordinates" : {
        "type" : "object",
        "properties" : {
          "bankCode" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "branchCode" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "accountNumber" : {
            "maxLength" : 11,
            "minLength" : 0,
            "type" : "string"
          },
          "key" : {
            "maxLength" : 2,
            "minLength" : 0,
            "type" : "string"
          },
          "iban" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "bic" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accountOwner" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "bankName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "bankId" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "issuerNumber" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "issuerName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "ics" : {
            "maxLength" : 35,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "BatchEntity" : {
        "required" : [ "code", "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "targetJob" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "targetEntity" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "notify" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "PROCESSING", "SUCCESS", "CANCELED", "FAILURE" ]
          },
          "jobInstance" : {
            "$ref" : "#/components/schemas/JobInstance"
          },
          "jobExecutionResult" : {
            "$ref" : "#/components/schemas/JobExecutionResultImpl"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BillingAccount" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "defaultLevel" : {
            "type" : "boolean"
          },
          "providerContact" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModel"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "vatStatus" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "VALID", "INVALID" ]
          },
          "registrationNo" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "electronicBilling" : {
            "type" : "boolean"
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "usersAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAccount"
            }
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "discountRate" : {
            "type" : "number"
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/BillingCycle"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "brAmountWithoutTax" : {
            "type" : "number"
          },
          "brAmountWithTax" : {
            "type" : "number"
          },
          "invoicePrefix" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "terminationReason" : {
            "$ref" : "#/components/schemas/SubscriptionTerminationReason"
          },
          "counters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "minimumInvoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethod"
          },
          "contracts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contract"
            }
          },
          "minRatedTransactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RatedTransaction"
            }
          },
          "totalInvoicingAmountWithoutTax" : {
            "type" : "number"
          },
          "discountPlanInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstance"
            }
          },
          "totalInvoicingAmountWithTax" : {
            "type" : "number"
          },
          "totalInvoicingAmountTax" : {
            "type" : "number"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "emailTemplate" : {
            "$ref" : "#/components/schemas/EmailTemplate"
          },
          "mailingType" : {
            "type" : "string",
            "enum" : [ "MANUAL", "AUTO", "BATCH" ]
          },
          "ccedEmails" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "exemptionReason" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxCategory" : {
            "$ref" : "#/components/schemas/TaxCategory"
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "exoneratedFromtaxes" : {
            "type" : "boolean"
          },
          "taxCategoryResolved" : {
            "$ref" : "#/components/schemas/TaxCategory"
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "minInvoiceLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLine"
            }
          },
          "priceList" : {
            "$ref" : "#/components/schemas/PriceList"
          },
          "registrationNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumber"
            }
          },
          "mrr" : {
            "type" : "number"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "allDiscountPlanInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstance"
            }
          },
          "parentUserAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAccount"
            }
          },
          "billingAccountTradingLanguageCode" : {
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "accountType" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "BillingAccountAmount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "amount" : {
            "type" : "number"
          },
          "billingRunReport" : {
            "$ref" : "#/components/schemas/BillingRunReport"
          },
          "ratedTransactionCount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BillingCycle" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "billingTemplateNameEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "calendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "lastTransactionDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "lastTransactionDateEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceDateProductionDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "dueDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceTypeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "BILLINGACCOUNT", "SUBSCRIPTION", "ORDER" ]
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "referenceDate" : {
            "type" : "string",
            "enum" : [ "TODAY", "NEXT_INVOICE_DATE", "LAST_TRANSACTION_DATE", "END_DATE" ]
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "splitPerPaymentMethod" : {
            "type" : "boolean"
          },
          "collectionDateDelayEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "computeDatesAtValidation" : {
            "type" : "boolean"
          },
          "billingRunValidationScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "disableAggregation" : {
            "type" : "boolean"
          },
          "useAccountingArticleLabel" : {
            "type" : "boolean"
          },
          "dateAggregation" : {
            "type" : "string",
            "enum" : [ "NO_DATE_AGGREGATION", "DAY_OF_USAGE_DATE", "WEEK_OF_USAGE_DATE", "MONTH_OF_USAGE_DATE" ]
          },
          "aggregateUnitAmounts" : {
            "type" : "boolean"
          },
          "ignoreSubscriptions" : {
            "type" : "boolean"
          },
          "ignoreOrders" : {
            "type" : "boolean"
          },
          "incrementalInvoiceLines" : {
            "type" : "boolean"
          },
          "reportConfigPreReportAutoOnCreate" : {
            "type" : "boolean"
          },
          "reportConfigPreReportAutoOnInvoiceLinesJob" : {
            "type" : "boolean"
          },
          "reportConfigDisplayBillingAccounts" : {
            "type" : "boolean"
          },
          "reportConfigDisplaySubscriptions" : {
            "type" : "boolean"
          },
          "reportConfigDisplayOffers" : {
            "type" : "boolean"
          },
          "reportConfigDisplayProducts" : {
            "type" : "boolean"
          },
          "reportConfigDisplayArticles" : {
            "type" : "boolean"
          },
          "reportConfigBlockSizeBillingAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reportConfigBlockSizeSubscriptions" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reportConfigBlockSizeOffers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reportConfigBlockSizeProducts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reportConfigBlockSizeArticles" : {
            "type" : "integer",
            "format" : "int32"
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "discountAggregation" : {
            "type" : "string",
            "enum" : [ "NO_AGGREGATION", "FULL_AGGREGATION" ]
          },
          "additionalAggregationFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ignoreUserAccounts" : {
            "type" : "boolean"
          },
          "ignoreServiceInstances" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "BillingRule" : {
        "required" : [ "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "disabled" : {
            "type" : "boolean"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "criteriaEL" : {
            "type" : "string"
          },
          "invoicedBACodeEL" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BillingRun" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "processDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "NEW", "PREINVOICED", "PREVALIDATED", "CANCELED", "INVOICES_GENERATED", "POSTINVOICED", "POSTVALIDATED", "VALIDATED", "CANCELLING", "REJECTED", "CREATING_INVOICE_LINES", "INVOICE_LINES_CREATED", "INVOICES_CREATED", "MINIMUM_ADDED", "THRESHOLD_CHECKED", "DISCOUNT_ADDED", "TAX_COMPUTED", "DRAFT_INVOICES", "OPEN" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/BillingCycle"
          },
          "billingAccountNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "billableBillingAcountNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "producibleInvoiceNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "producibleAmountWithoutTax" : {
            "type" : "number"
          },
          "producibleAmountTax" : {
            "type" : "number"
          },
          "invoiceNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "producibleAmountWithTax" : {
            "type" : "number"
          },
          "prAmountWithoutTax" : {
            "type" : "number"
          },
          "prAmountWithTax" : {
            "type" : "number"
          },
          "prAmountTax" : {
            "type" : "number"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "billingRunLists" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingRunList"
            }
          },
          "billableBillingAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccount"
            }
          },
          "processType" : {
            "type" : "string",
            "enum" : [ "AUTOMATIC", "MANUAL", "FULL_AUTOMATIC" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "rejectionReason" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "selectedBillingAccounts" : {
            "type" : "string"
          },
          "rejectedBillingAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RejectedBillingAccount"
            }
          },
          "referenceDate" : {
            "type" : "string",
            "enum" : [ "TODAY", "NEXT_INVOICE_DATE", "LAST_TRANSACTION_DATE", "END_DATE" ]
          },
          "skipValidationScript" : {
            "type" : "boolean"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "computeDatesAtValidation" : {
            "type" : "boolean"
          },
          "nextBillingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "minimumApplied" : {
            "type" : "boolean"
          },
          "thresholdChecked" : {
            "type" : "boolean"
          },
          "discountApplied" : {
            "type" : "boolean"
          },
          "rejectAutoAction" : {
            "type" : "string",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "suspectAutoAction" : {
            "type" : "string",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "exceptionalRTIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "exceptionalILIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "runType" : {
            "type" : "string",
            "enum" : [ "CYCLE", "EXCEPTIONAL" ]
          },
          "xmlJobExecutionResultId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pdfJobExecutionResultId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "isQuarantine" : {
            "type" : "boolean"
          },
          "originBillingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "jobExecutions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobExecutionResultImpl"
            }
          },
          "generateAO" : {
            "type" : "boolean"
          },
          "disableAggregation" : {
            "type" : "boolean"
          },
          "incrementalInvoiceLines" : {
            "type" : "boolean"
          },
          "dateAggregation" : {
            "type" : "string",
            "enum" : [ "NO_DATE_AGGREGATION", "DAY_OF_USAGE_DATE", "WEEK_OF_USAGE_DATE", "MONTH_OF_USAGE_DATE" ]
          },
          "aggregateUnitAmounts" : {
            "type" : "boolean"
          },
          "useAccountingArticleLabel" : {
            "type" : "boolean"
          },
          "ignoreSubscriptions" : {
            "type" : "boolean"
          },
          "ignoreOrders" : {
            "type" : "boolean"
          },
          "discountAggregation" : {
            "type" : "string",
            "enum" : [ "NO_AGGREGATION", "FULL_AGGREGATION" ]
          },
          "preReportAutoOnCreate" : {
            "type" : "boolean"
          },
          "preInvoicingReport" : {
            "$ref" : "#/components/schemas/BillingRunReport"
          },
          "preReportAutoOnInvoiceLinesJob" : {
            "type" : "boolean"
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ignoreUserAccounts" : {
            "type" : "boolean"
          },
          "additionalAggregationFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ignoreServiceInstances" : {
            "type" : "boolean"
          },
          "descriptionOrCode" : {
            "type" : "string",
            "writeOnly" : true
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "exceptionalBR" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "BillingRunList" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "invoice" : {
            "type" : "boolean"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "ratedAmountWithoutTax" : {
            "type" : "number"
          },
          "ratedAmountTax" : {
            "type" : "number"
          },
          "ratedAmountWithTax" : {
            "type" : "number"
          },
          "ratedAmount2WithoutTax" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BillingRunReport" : {
        "required" : [ "billingAccountsCount", "billingRun", "creationDate", "oneShotTotalAmountWithoutTax", "oneShotTransactionsCount", "ratedTransactionsCount", "recurringTotalAmountWithoutTax", "recurringTransactionsCount", "subscriptionsCount", "totalAmountWithoutTax", "type", "usageTotalAmountWithoutTax", "usageTransactionsCount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "OPEN_RATED_TRANSACTIONS", "BILLED_RATED_TRANSACTIONS", "OPEN_INVOICE_LINES", "BILLED_INVOICE_LINES" ]
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "billingAccountsCount" : {
            "type" : "number"
          },
          "subscriptionsCount" : {
            "type" : "number"
          },
          "ratedTransactionsCount" : {
            "type" : "number"
          },
          "totalAmountWithoutTax" : {
            "type" : "number"
          },
          "oneShotTransactionsCount" : {
            "type" : "number"
          },
          "recurringTransactionsCount" : {
            "type" : "number"
          },
          "usageTransactionsCount" : {
            "type" : "number"
          },
          "oneShotTotalAmountWithoutTax" : {
            "type" : "number"
          },
          "recurringTotalAmountWithoutTax" : {
            "type" : "number"
          },
          "usageTotalAmountWithoutTax" : {
            "type" : "number"
          },
          "topBillingAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccountAmount"
            }
          },
          "topOffers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferAmount"
            }
          },
          "topProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductAmount"
            }
          },
          "topAccountingArticles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingArticleAmount"
            }
          },
          "topSubscriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionAmount"
            }
          },
          "reportFinal" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BusinessAccountModel" : {
        "required" : [ "code", "disabled", "hierarchyType", "license" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "moduleItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MeveoModuleItem"
            }
          },
          "license" : {
            "type" : "string",
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "installed" : {
            "type" : "boolean"
          },
          "moduleSource" : {
            "type" : "string"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "hierarchyType" : {
            "type" : "string",
            "enum" : [ "S", "S_C", "C", "S_CA", "C_CA", "CA", "S_BA", "C_BA", "CA_BA", "BA", "S_UA", "C_UA", "CA_UA", "BA_UA", "UA" ]
          },
          "downloaded" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BusinessEntity" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BusinessOfferModel" : {
        "required" : [ "code", "disabled", "license" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "moduleItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MeveoModuleItem"
            }
          },
          "license" : {
            "type" : "string",
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "installed" : {
            "type" : "boolean"
          },
          "moduleSource" : {
            "type" : "string"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "downloaded" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BusinessProductModel" : {
        "required" : [ "code", "disabled", "license" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "moduleItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MeveoModuleItem"
            }
          },
          "license" : {
            "type" : "string",
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "installed" : {
            "type" : "boolean"
          },
          "moduleSource" : {
            "type" : "string"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "productTemplate" : {
            "$ref" : "#/components/schemas/ProductTemplate"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "downloaded" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "BusinessServiceModel" : {
        "required" : [ "code", "disabled", "license" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "moduleItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MeveoModuleItem"
            }
          },
          "license" : {
            "type" : "string",
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "installed" : {
            "type" : "boolean"
          },
          "moduleSource" : {
            "type" : "string"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "duplicateService" : {
            "type" : "boolean"
          },
          "duplicatePricePlan" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "downloaded" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Calendar" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "calendarType" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "initDateEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "calendarTypeWSubtypes" : {
            "type" : "string"
          },
          "initDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "calendarTypeResolved" : {
            "type" : "string"
          },
          "initializationRequired" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Campaign" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "scheduleDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "processingThreadId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "priority" : {
            "type" : "string",
            "enum" : [ "SLOW", "NORMAL", "URGENT" ]
          },
          "media" : {
            "type" : "string",
            "enum" : [ "POSTAL_MAIL", "EMAIL", "SMS", "IM", "FAX", "VOICE", "WEBSERVICE", "QUEUE", "FTP_FILE", "CFT_FILE", "DATABASE", "DUNNING_MEDIA" ]
          },
          "subMedia" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "useAnyMedia" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "SCHEDULED", "RUNNING", "PAUSED", "CANCELED", "TERMINATED" ]
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CategoryInvoiceAgregate" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "itemNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "prDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "conversionFromBillingCurrency" : {
            "type" : "boolean"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "invoiceCategory" : {
            "$ref" : "#/components/schemas/InvoiceCategory"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subCategoryInvoiceAgregates" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubCategoryInvoiceAgregate"
            }
          },
          "descriminatorValue" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CdrError" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string"
          },
          "errorMessage" : {
            "type" : "string"
          },
          "cdr" : {
            "type" : "string"
          }
        }
      },
      "Channel" : {
        "required" : [ "code", "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ChargeCDRResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "walletOperationCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "edrIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "reservationIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "walletOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperationDto"
            }
          },
          "counterPeriods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterPeriodDto"
            }
          },
          "error" : {
            "$ref" : "#/components/schemas/CdrError"
          }
        },
        "xml" : {
          "name" : "ChargeCDRResponseDto"
        }
      },
      "ChargeInstance" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeType" : {
            "maxLength" : 1,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "chargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "currency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "country" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "walletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "prepaidWalletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulatorCounterInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "taxClassResolved" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ChargeTemplate" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "chargeType" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "amountEditable" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "edrTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEDRTemplate"
            }
          },
          "inputUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "inputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "outputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRule" : {
            "$ref" : "#/components/schemas/RevenueRecognitionRule"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "taxClassEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "dropZeroWo" : {
            "type" : "boolean"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "pricePlans" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrix"
            }
          },
          "roundingValuesComputed" : {
            "type" : "boolean"
          },
          "roundingUnityNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "roundingEdrNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "internalNote" : {
            "type" : "string"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter1Description" : {
            "type" : "string"
          },
          "parameter2Description" : {
            "type" : "string"
          },
          "parameter3Description" : {
            "type" : "string"
          },
          "parameterExtraDescription" : {
            "type" : "string"
          },
          "parameter1Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean"
          },
          "parameter1IsHidden" : {
            "type" : "boolean"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean"
          },
          "parameter2IsHidden" : {
            "type" : "boolean"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean"
          },
          "parameter3IsHidden" : {
            "type" : "boolean"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean"
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "businessKeyDescription" : {
            "type" : "string"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean"
          },
          "quantityAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CheckPaymentMethod" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "alias" : {
            "type" : "string"
          },
          "preferred" : {
            "type" : "boolean"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "userId" : {
            "type" : "string"
          },
          "info1" : {
            "type" : "string"
          },
          "info2" : {
            "type" : "string"
          },
          "info3" : {
            "type" : "string"
          },
          "info4" : {
            "type" : "string"
          },
          "info5" : {
            "type" : "string"
          },
          "tokenId" : {
            "type" : "string"
          },
          "token3DsId" : {
            "type" : "string"
          },
          "referenceDocument" : {
            "$ref" : "#/components/schemas/Document"
          },
          "paymentMeans" : {
            "$ref" : "#/components/schemas/UntdidPaymentMeans"
          },
          "mandateChangeAction" : {
            "type" : "string",
            "enum" : [ "NONE", "TO_ADVERTISE", "ADVERTISED" ]
          },
          "action" : {
            "type" : "string"
          },
          "expired" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CommercialOrder" : {
        "required" : [ "billingAccount", "code", "orderDate", "orderInvoiceType", "orderProgress", "progressDate", "rateInvoiced", "seller", "status", "statusDate", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "orderProgressTmp" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "orderNumber" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "quote" : {
            "$ref" : "#/components/schemas/CpqQuote"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "orderType" : {
            "$ref" : "#/components/schemas/OrderType"
          },
          "invoicingPlan" : {
            "$ref" : "#/components/schemas/InvoicingPlan"
          },
          "status" : {
            "type" : "string"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderProgress" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rateInvoiced" : {
            "type" : "integer",
            "format" : "int32"
          },
          "progressDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerServiceBegin" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerServiceDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalReference" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "salesPersonName" : {
            "maxLength" : 52,
            "minLength" : 0,
            "type" : "string"
          },
          "orderParent" : {
            "$ref" : "#/components/schemas/Order"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "orderInvoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "access" : {
            "$ref" : "#/components/schemas/Access"
          },
          "offers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderOffer"
            }
          },
          "orderLots" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderLot"
            }
          },
          "orderPrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderPrice"
            }
          },
          "oneShotTotalAmount" : {
            "type" : "number"
          },
          "quoteVersion" : {
            "$ref" : "#/components/schemas/QuoteVersion"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/BillingCycle"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "priceList" : {
            "$ref" : "#/components/schemas/PriceList"
          },
          "mrr" : {
            "type" : "number"
          },
          "totalInvoicingAmountWithoutTax" : {
            "type" : "number"
          },
          "totalInvoicingAmountWithTax" : {
            "type" : "number"
          },
          "totalInvoicingAmountTax" : {
            "type" : "number"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CommercialRuleHeader" : {
        "required" : [ "code", "disabled", "ruleType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "ruleType" : {
            "type" : "string",
            "enum" : [ "PRE_REQUISITE", "INCOMPATIBILITY", "REPLACEMENT" ]
          },
          "targetOfferTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "targetProduct" : {
            "$ref" : "#/components/schemas/Product"
          },
          "targetProductVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "targetGroupedAttributes" : {
            "$ref" : "#/components/schemas/GroupedAttributes"
          },
          "targetAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "targetAttributeValue" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "targetTag" : {
            "$ref" : "#/components/schemas/Tag"
          },
          "ruleEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "commercialRuleItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleItem"
            }
          },
          "disabled" : {
            "type" : "boolean"
          },
          "scopeType" : {
            "type" : "string",
            "enum" : [ "QUOTE", "QUOTE_OFFER" ]
          },
          "targetOfferAttribute" : {
            "type" : "boolean"
          },
          "targetOfferTemplateCode" : {
            "type" : "string"
          },
          "targetProductCode" : {
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CommercialRuleItem" : {
        "required" : [ "operator" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "commercialRuleHeader" : {
            "$ref" : "#/components/schemas/CommercialRuleHeader"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "AND", "OR" ]
          },
          "ruleItemEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "commercialRuleLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleLine"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CommercialRuleLine" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "commercialRuleItem" : {
            "$ref" : "#/components/schemas/CommercialRuleItem"
          },
          "sourceOfferTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "sourceProduct" : {
            "$ref" : "#/components/schemas/Product"
          },
          "sourceProductVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "sourceAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "sourceGroupedAttributes" : {
            "$ref" : "#/components/schemas/GroupedAttributes"
          },
          "sourceTag" : {
            "$ref" : "#/components/schemas/Tag"
          },
          "sourceAttributeValue" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "sourceGroupedAttributeValue" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "GREATER_THAN", "LESS_THAN", "EQUAL", "GREATER_THAN_OR_EQUAL", "LESS_THAN_OR_EQUAL", "NOT_EQUAL", "EXISTS", "CONTAINS", "NOT_CONTAINS" ]
          },
          "sourceOfferAttribute" : {
            "type" : "boolean"
          },
          "sourceOfferTemplateCode" : {
            "type" : "string"
          },
          "sourceProductCode" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CommunicationPolicy" : {
        "type" : "object",
        "properties" : {
          "delayMinBetween2messages" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbMaxMessagePerDay" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbMaxMessagePerWeek" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbMaxMessagePerMonth" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Contact" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "registrationNo" : {
            "type" : "string"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "assistantName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "assistantPhone" : {
            "maxLength" : 15,
            "minLength" : 0,
            "type" : "string"
          },
          "position" : {
            "maxLength" : 200,
            "minLength" : 0,
            "type" : "string"
          },
          "company" : {
            "maxLength" : 200,
            "minLength" : 0,
            "type" : "string"
          },
          "websiteUrl" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "importedFrom" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "importedBy" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "socialIdentifier" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "agreedToUA" : {
            "type" : "boolean"
          },
          "contactPolicy" : {
            "$ref" : "#/components/schemas/CommunicationPolicy"
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "addressBook" : {
            "$ref" : "#/components/schemas/AddressBook"
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "reference" : {
            "maxLength" : 80,
            "minLength" : 0,
            "type" : "string"
          },
          "comment" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "addressBookContacts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AddressBookContact"
            }
          },
          "contactCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactCategory"
            }
          },
          "enterprise" : {
            "type" : "boolean"
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vip" : {
            "type" : "boolean"
          },
          "prospect" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ContactCategory" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ContactInformation" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "phone" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "mobile" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "fax" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "Contract" : {
        "required" : [ "beginDate", "code", "disabled", "endDate", "status", "statusDate", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "status" : {
            "type" : "string"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contractDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "beginDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewal" : {
            "type" : "boolean"
          },
          "contractDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "contractItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContractItem"
            }
          },
          "billingRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingRule"
            }
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ContractItem" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "pricePlan" : {
            "$ref" : "#/components/schemas/PricePlanMatrix"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "rate" : {
            "type" : "number",
            "format" : "double"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "contractRateType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "separateDiscount" : {
            "type" : "boolean"
          },
          "applicationEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "tradingContractItems" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TradingContractItem"
            }
          },
          "applicableOnOverriddenPrice" : {
            "type" : "boolean"
          },
          "targetAccountingArticles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingArticle"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CounterInstance" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplate"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "counterPeriods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterPeriod"
            }
          },
          "usageChargeInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UsageChargeInstance"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CounterPeriod" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "counterInstance" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "counterType" : {
            "type" : "string",
            "enum" : [ "USAGE", "NOTIFICATION", "USAGE_AMOUNT" ]
          },
          "periodStartDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "periodEndDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "level" : {
            "type" : "number"
          },
          "value" : {
            "type" : "number"
          },
          "notificationLevels" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulator" : {
            "type" : "boolean"
          },
          "accumulatedValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "number"
            }
          },
          "accumulatorType" : {
            "type" : "string",
            "enum" : [ "MULTI_VALUE", "SINGLE_VALUE" ]
          },
          "notificationLevelsAsMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "number"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CounterPeriodDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "counterType" : {
            "type" : "string",
            "enum" : [ "USAGE", "NOTIFICATION", "USAGE_AMOUNT" ]
          },
          "level" : {
            "type" : "number"
          },
          "periodStartDate" : {
            "type" : "string"
          },
          "periodEndDate" : {
            "type" : "string"
          },
          "value" : {
            "type" : "number"
          },
          "accumulator" : {
            "type" : "boolean"
          },
          "accumulatedValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "number"
            }
          },
          "accumulatorType" : {
            "type" : "string",
            "enum" : [ "MULTI_VALUE", "SINGLE_VALUE" ]
          }
        }
      },
      "CounterTemplate" : {
        "required" : [ "code", "counterLevel", "counterType", "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "counterType" : {
            "type" : "string",
            "enum" : [ "USAGE", "NOTIFICATION", "USAGE_AMOUNT" ]
          },
          "calendarCodeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "calendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "ceiling" : {
            "type" : "number"
          },
          "unityDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "counterLevel" : {
            "type" : "string",
            "enum" : [ "SI", "SU", "UA", "BA", "CA", "CUST" ]
          },
          "ceilingExpressionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "notificationLevels" : {
            "maxLength" : 70,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulator" : {
            "type" : "boolean"
          },
          "accumulatorType" : {
            "type" : "string",
            "enum" : [ "MULTI_VALUE", "SINGLE_VALUE" ]
          },
          "filterEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "keyEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "valueEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "managedByApp" : {
            "type" : "boolean"
          },
          "sharedCounter" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Country" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "countryCode" : {
            "maxLength" : 10,
            "minLength" : 0,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "code" : {
            "type" : "string"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CpqQuote" : {
        "required" : [ "applicantAccount", "billableAccount", "code", "orderInvoiceType", "previousStatus", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "applicantAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "status" : {
            "type" : "string"
          },
          "previousStatus" : {
            "type" : "string"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "sendDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quoteDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quoteLotDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "opportunityRef" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "customerRef" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "customerName" : {
            "maxLength" : 52,
            "minLength" : 0,
            "type" : "string"
          },
          "contactName" : {
            "maxLength" : 52,
            "minLength" : 0,
            "type" : "string"
          },
          "registerNumber" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "salesPersonName" : {
            "maxLength" : 52,
            "minLength" : 0,
            "type" : "string"
          },
          "billableAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "quoteNumber" : {
            "type" : "string"
          },
          "orderInvoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "mrr" : {
            "type" : "number"
          },
          "totalInvoicingAmountWithoutTax" : {
            "type" : "number"
          },
          "totalInvoicingAmountWithTax" : {
            "type" : "number"
          },
          "totalInvoicingAmountTax" : {
            "type" : "number"
          },
          "minInvoiceLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLine"
            }
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/BillingCycle"
          },
          "validationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transient" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          }
        }
      },
      "CreditCategory" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "provider" : {
            "$ref" : "#/components/schemas/Provider"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Currency" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "currencyCode" : {
            "maxLength" : 3,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionEn" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "symbol" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "systemCurrency" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "CustomFieldValue" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "format" : "date-time"
          },
          "to" : {
            "type" : "string",
            "format" : "date-time"
          },
          "strictMatch" : {
            "type" : "boolean"
          },
          "fromMatch" : {
            "type" : "string",
            "format" : "date-time"
          },
          "toMatch" : {
            "type" : "string",
            "format" : "date-time"
          },
          "empty" : {
            "type" : "boolean"
          },
          "valid" : {
            "type" : "boolean"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value" : {
            "type" : "object"
          },
          "allEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReferenceWrapper"
            }
          },
          "listValue" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "mapValue" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "getkeyValueMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "valueEmptyForGui" : {
            "type" : "boolean"
          },
          "excessiveInSize" : {
            "type" : "boolean"
          },
          "valueEmpty" : {
            "type" : "boolean"
          },
          "string" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "long" : {
            "type" : "integer",
            "format" : "int64"
          },
          "double" : {
            "type" : "number",
            "format" : "double"
          },
          "boolean" : {
            "type" : "boolean"
          },
          "entity" : {
            "$ref" : "#/components/schemas/EntityReferenceWrapper"
          },
          "url" : {
            "$ref" : "#/components/schemas/UrlReferenceWrapper"
          },
          "listString" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listDate" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "listLong" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "listDouble" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "listBoolean" : {
            "type" : "array",
            "items" : {
              "type" : "boolean"
            }
          },
          "listEntity" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReferenceWrapper"
            }
          },
          "mapString" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "mapDate" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "mapLong" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "mapDouble" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "mapBoolean" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "boolean"
            }
          },
          "mapEntity" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/EntityReferenceWrapper"
            }
          },
          "source" : {
            "type" : "string"
          },
          "customTableCode" : {
            "type" : "string"
          },
          "dataFilter" : {
            "type" : "string"
          },
          "fields" : {
            "type" : "string"
          },
          "mapCfValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "CustomFieldValues" : {
        "type" : "object",
        "properties" : {
          "valuesByCode" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomFieldValue"
              }
            }
          },
          "encrypted" : {
            "type" : "boolean"
          },
          "newVersionedCFValuePeriods" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DatePeriod"
              }
            }
          }
        }
      },
      "Customer" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "defaultLevel" : {
            "type" : "boolean"
          },
          "providerContact" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModel"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "vatStatus" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "VALID", "INVALID" ]
          },
          "registrationNo" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "anonymizationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "addressbook" : {
            "$ref" : "#/components/schemas/AddressBook"
          },
          "customerCategory" : {
            "$ref" : "#/components/schemas/CustomerCategory"
          },
          "customerBrand" : {
            "$ref" : "#/components/schemas/CustomerBrand"
          },
          "customerAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerAccount"
            }
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "additionalDetails" : {
            "$ref" : "#/components/schemas/AdditionalDetails"
          },
          "counters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "minimumTargetAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "contracts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contract"
            }
          },
          "registrationNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumber"
            }
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "parentCustomer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "childrenCustomers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Customer"
            }
          },
          "anonymized" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "accountType" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CustomerAccount" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "defaultLevel" : {
            "type" : "boolean"
          },
          "providerContact" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModel"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "vatStatus" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "VALID", "INVALID" ]
          },
          "registrationNo" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "addressbook" : {
            "$ref" : "#/components/schemas/AddressBook"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSE" ]
          },
          "creditCategory" : {
            "$ref" : "#/components/schemas/CreditCategory"
          },
          "billingAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccount"
            }
          },
          "accountOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "dunningDocuments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningDocument"
            }
          },
          "actionDunnings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ActionDunning"
            }
          },
          "dateStatus" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateDunningLevel" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "dunningLevel" : {
            "type" : "string",
            "enum" : [ "R0", "R1", "R2", "R3", "R4", "R5", "R6" ]
          },
          "password" : {
            "maxLength" : 10,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDateDelayEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethod"
            }
          },
          "excludedFromPayment" : {
            "type" : "boolean"
          },
          "auditedMethodPayments" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PaymentMethod"
              }
            }
          },
          "counters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "minimumTargetAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "invoicingThreshold" : {
            "type" : "number"
          },
          "checkThreshold" : {
            "type" : "string",
            "enum" : [ "BEFORE_DISCOUNT", "AFTER_DISCOUNT", "POSITIVE_RT", "POSITIVE_IL" ]
          },
          "thresholdPerEntity" : {
            "type" : "boolean"
          },
          "contracts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contract"
            }
          },
          "dueBalance" : {
            "type" : "string"
          },
          "generalClientAccount" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "paymentPlans" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentPlan"
            }
          },
          "registrationNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumber"
            }
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "preferredPaymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethod"
          },
          "paypalPaymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaypalPaymentMethod"
            }
          },
          "preferredPaymentMethodType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "ddpaymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DDPaymentMethod"
            }
          },
          "wirePaymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WirePaymentMethod"
            }
          },
          "checkPaymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CheckPaymentMethod"
            }
          },
          "stripePaymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StripePaymentMethod"
            }
          },
          "noMoreValidCard" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "accountType" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CustomerBalance" : {
        "type" : "object",
        "properties" : {
          "occTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "label" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "defaultBalance" : {
            "type" : "boolean"
          },
          "balanceEL" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CustomerBrand" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CustomerCategory" : {
        "required" : [ "code", "defaultSeller", "taxCategory", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "exoneratedFromTaxes" : {
            "type" : "boolean"
          },
          "exonerationTaxEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "exonerationReason" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "taxCategory" : {
            "$ref" : "#/components/schemas/TaxCategory"
          },
          "taxCategoryEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "defaultSeller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "CustomerSequence" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "genericSequence" : {
            "$ref" : "#/components/schemas/GenericSequence"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DDPaymentMethod" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "alias" : {
            "type" : "string"
          },
          "preferred" : {
            "type" : "boolean"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "userId" : {
            "type" : "string"
          },
          "info1" : {
            "type" : "string"
          },
          "info2" : {
            "type" : "string"
          },
          "info3" : {
            "type" : "string"
          },
          "info4" : {
            "type" : "string"
          },
          "info5" : {
            "type" : "string"
          },
          "tokenId" : {
            "type" : "string"
          },
          "token3DsId" : {
            "type" : "string"
          },
          "referenceDocument" : {
            "$ref" : "#/components/schemas/Document"
          },
          "paymentMeans" : {
            "$ref" : "#/components/schemas/UntdidPaymentMeans"
          },
          "mandateChangeAction" : {
            "type" : "string",
            "enum" : [ "NONE", "TO_ADVERTISE", "ADVERTISED" ]
          },
          "action" : {
            "type" : "string"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinates"
          },
          "mandateIdentification" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "mandateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expired" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DDRequestBuilder" : {
        "required" : [ "code", "disabled", "paymentLevel", "type", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CUSTOM", "NATIF" ]
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "implementationClassName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "nbOperationPerFile" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxSizeFile" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentLevel" : {
            "type" : "string",
            "enum" : [ "AO", "CA" ]
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DDRequestItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "amount" : {
            "type" : "number"
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestLOT" : {
            "$ref" : "#/components/schemas/DDRequestLOT"
          },
          "accountOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "errorMsg" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "automatedPayment" : {
            "$ref" : "#/components/schemas/AutomatedPayment"
          },
          "automatedRefund" : {
            "$ref" : "#/components/schemas/AutomatedRefund"
          },
          "rejectedFileName" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "threadName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DDRequestLOT" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "fileName" : {
            "type" : "string"
          },
          "returnFileName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "sendDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "nbItemsOk" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paymentCreated" : {
            "type" : "boolean"
          },
          "totalAmount" : {
            "type" : "number"
          },
          "ddrequestItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DDRequestItem"
            }
          },
          "returnStatusCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "rejectedCause" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "nbItemsKo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ddRequestBuilder" : {
            "$ref" : "#/components/schemas/DDRequestBuilder"
          },
          "paymentOrRefundEnum" : {
            "type" : "string",
            "enum" : [ "PAYMENT", "REFUND" ]
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DatePeriod" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "format" : "date-time"
          },
          "to" : {
            "type" : "string",
            "format" : "date-time"
          },
          "strictMatch" : {
            "type" : "boolean"
          },
          "fromMatch" : {
            "type" : "string",
            "format" : "date-time"
          },
          "toMatch" : {
            "type" : "string",
            "format" : "date-time"
          },
          "empty" : {
            "type" : "boolean"
          },
          "valid" : {
            "type" : "boolean"
          }
        }
      },
      "DigitalResource" : {
        "required" : [ "code", "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "uri" : {
            "type" : "string"
          },
          "mimeType" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "productOfferings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOffering"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DiscountPlan" : {
        "required" : [ "code", "disabled", "status", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "minDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "discountPlanItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanItem"
            }
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "defaultDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "durationUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY", "YEAR" ]
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "QUOTE", "OFFER", "PRODUCT", "INVOICE", "INVOICE_LINE", "PROMO_CODE" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "DRAFT", "IN_USE", "EXPIRED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "initialQuantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "usedQuantity" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "applicationLimit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "applicationFilterEL" : {
            "type" : "string"
          },
          "discountPlanaApplicableEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApplicableEntity"
            }
          },
          "incompatibleDiscountPlans" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlan"
            }
          },
          "applicableOnOverriddenPrice" : {
            "type" : "boolean"
          },
          "applicableOnDiscountedPrice" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expressionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "automaticApplication" : {
            "type" : "boolean"
          },
          "allowanceCode" : {
            "$ref" : "#/components/schemas/UntdidAllowanceCode"
          },
          "applicableOnContractPrice" : {
            "type" : "boolean"
          },
          "valid" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DiscountPlanInstance" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "ACTIVE", "APPLIED", "IN_USE", "EXPIRED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "applicationCount" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "valid" : {
            "type" : "boolean"
          },
          "discountPlanInstanceStatus" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DiscountPlanItem" : {
        "required" : [ "allowToNegate", "code", "disabled", "discountPlan", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "invoiceCategory" : {
            "$ref" : "#/components/schemas/InvoiceCategory"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "expressionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountValueEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "discountPlanItemType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "priority" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "targetAccountingArticle" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingArticle"
            }
          },
          "pricePlanMatrix" : {
            "$ref" : "#/components/schemas/PricePlanMatrix"
          },
          "allowToNegate" : {
            "type" : "boolean"
          },
          "applyByArticle" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastDiscount" : {
            "type" : "boolean"
          },
          "finalSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "tradingDiscountPlanItems" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TradingDiscountPlanItem"
            }
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "Document" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fileName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "REJECTED" ]
          },
          "code" : {
            "type" : "string"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "linkedAccountEntity" : {
            "$ref" : "#/components/schemas/AccountEntity"
          },
          "documentVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "encodedFile" : {
            "type" : "string"
          },
          "category" : {
            "$ref" : "#/components/schemas/DocumentCategory"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "fileType" : {
            "$ref" : "#/components/schemas/FileType"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DocumentCategory" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "relativePath" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DunningAction" : {
        "type" : "object",
        "properties" : {
          "script" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "attachDueInvoices" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "actionType" : {
            "type" : "string"
          },
          "attachOverdueInvoices" : {
            "type" : "boolean"
          },
          "relatedLevels" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          },
          "actionNotificationTemplate" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "assignedTo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "actionMode" : {
            "type" : "string"
          },
          "actionChannel" : {
            "type" : "string"
          }
        }
      },
      "DunningActionInstance" : {
        "required" : [ "actionStatus", "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "actionType" : {
            "type" : "string",
            "enum" : [ "SEND_NOTIFICATION", "RETRY_PAYMENT", "WRITE_OFF_INVOICE", "ISSUE_A_CREDIT_NOTE", "SCRIPT" ]
          },
          "actionMode" : {
            "type" : "string",
            "enum" : [ "MANUAL", "AUTOMATIC" ]
          },
          "actionOwner" : {
            "$ref" : "#/components/schemas/DunningAgent"
          },
          "actionRestult" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "actionStatus" : {
            "type" : "string",
            "enum" : [ "TO_BE_DONE", "DONE", "IGNORED" ]
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "collectionPlan" : {
            "$ref" : "#/components/schemas/DunningCollectionPlan"
          },
          "dunningLevelInstance" : {
            "$ref" : "#/components/schemas/DunningLevelInstance"
          },
          "dunningAction" : {
            "$ref" : "#/components/schemas/DunningAction"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DunningAgent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "external" : {
            "type" : "boolean"
          },
          "collectionAgency" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "agentFirstNameItem" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "agentLastNameItem" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "agentEmailItem" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "dunningSettings" : {
            "$ref" : "#/components/schemas/DunningSettings"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DunningCollectionPlan" : {
        "required" : [ "collectionPlanNumber" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "collectionPlanNumber" : {
            "type" : "string"
          },
          "relatedPolicy" : {
            "$ref" : "#/components/schemas/DunningPolicy"
          },
          "initialCollectionPlan" : {
            "$ref" : "#/components/schemas/DunningCollectionPlan"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "relatedInvoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "pauseReason" : {
            "$ref" : "#/components/schemas/DunningPauseReason"
          },
          "stopReason" : {
            "$ref" : "#/components/schemas/DunningStopReason"
          },
          "currentDunningLevelSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "daysOpen" : {
            "type" : "integer",
            "format" : "int32"
          },
          "closeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "$ref" : "#/components/schemas/DunningCollectionPlanStatus"
          },
          "pausedUntilDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "balance" : {
            "type" : "number"
          },
          "retryPaymentOnResumeDate" : {
            "type" : "boolean"
          },
          "dunningLevelInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningLevelInstance"
            }
          },
          "nextAction" : {
            "type" : "string"
          },
          "nextActionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastAction" : {
            "type" : "string"
          },
          "lastActionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "totalDunningLevels" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pauseDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "relatedInvoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DunningCollectionPlanStatus" : {
        "required" : [ "dunningSettings", "status" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "indicate description for the collection"
          },
          "status" : {
            "type" : "string",
            "description" : "indicate the status used in the collection",
            "enum" : [ "ONGOING", "RECOVERED", "UNRECOVERED", "PAUSED", "STOPPED" ]
          },
          "colorCode" : {
            "type" : "string",
            "description" : "indicate color code for the status"
          },
          "dunningSettings" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningDocument" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "dueInvoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecordedInvoice"
            }
          },
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Payment"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "CLOSED" ]
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "paidAmount" : {
            "type" : "number"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DunningHistory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "linesRead" : {
            "type" : "integer",
            "format" : "int32"
          },
          "linesInserted" : {
            "type" : "integer",
            "format" : "int32"
          },
          "linesRejected" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dunningLots" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningLOT"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DunningLOT" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "fileName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "actionType" : {
            "type" : "string",
            "enum" : [ "FILE", "LETTER", "EMAIL", "CHARGE" ]
          },
          "dunningHistory" : {
            "$ref" : "#/components/schemas/DunningHistory"
          },
          "actions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ActionDunning"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DunningLevel" : {
        "type" : "object",
        "properties" : {
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "dunning level description"
          },
          "dunningLevelMinBalanceCurrency" : {
            "type" : "string",
            "description" : "Dunning level currency"
          },
          "isReminderLevel" : {
            "type" : "boolean",
            "description" : "Is a reminder level"
          },
          "isActiveLevel" : {
            "type" : "boolean",
            "description" : "Is an active level"
          },
          "dunningLevelDaysOverdue" : {
            "type" : "integer",
            "description" : "Days overdue",
            "format" : "int32"
          },
          "isSoftDeclineLevel" : {
            "type" : "boolean",
            "description" : "Soft decline"
          },
          "dunningLevelMinBalance" : {
            "type" : "number",
            "description" : "Dunning level min balance"
          },
          "dunningLevelChargeType" : {
            "type" : "string",
            "description" : "Dunning level charge type"
          },
          "dunningLevelChargeValue" : {
            "type" : "number",
            "description" : "Dunning level charge value"
          },
          "dunningLevelChargeCurrency" : {
            "type" : "string",
            "description" : "Dunning level charge currency"
          },
          "isEndOfDunningLevel" : {
            "type" : "boolean",
            "description" : "End of dunning level"
          },
          "dunningActions" : {
            "type" : "array",
            "description" : "Dunning level actions",
            "items" : {
              "type" : "string",
              "description" : "Dunning level actions"
            }
          }
        }
      },
      "DunningLevelInstance" : {
        "required" : [ "code", "daysOverdue", "dunningLevel", "levelStatus", "sequence", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "daysOverdue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "collectionPlan" : {
            "$ref" : "#/components/schemas/DunningCollectionPlan"
          },
          "collectionPlanStatus" : {
            "$ref" : "#/components/schemas/DunningCollectionPlanStatus"
          },
          "actions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningActionInstance"
            }
          },
          "levelStatus" : {
            "type" : "string",
            "enum" : [ "TO_BE_DONE", "IN_PROGRESS", "DONE", "IGNORED" ]
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dunningLevel" : {
            "$ref" : "#/components/schemas/DunningLevel"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "DunningPauseReason" : {
        "required" : [ "dunningSettings", "pauseReason" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The pause reason's description"
          },
          "descriptionI18n" : {
            "type" : "array",
            "description" : "The pause reason's description in different languages",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "pauseReason" : {
            "type" : "string",
            "description" : "The pause reason"
          },
          "dunningSettings" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningPaymentRetry" : {
        "required" : [ "dunningSettings", "numPayRetries", "payRetryFrequency", "payRetryFrequencyUnit", "paymentMethod" ],
        "type" : "object",
        "properties" : {
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "psp" : {
            "type" : "string",
            "description" : "The payment service provider"
          },
          "numPayRetries" : {
            "type" : "integer",
            "description" : "The number of payment retries",
            "format" : "int32"
          },
          "payRetryFrequencyUnit" : {
            "type" : "string",
            "description" : "The unit's frequency of retry",
            "enum" : [ "DAY", "MONTH" ]
          },
          "payRetryFrequency" : {
            "type" : "integer",
            "description" : "The retry's frequency",
            "format" : "int32"
          },
          "dunningSettings" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningPolicy" : {
        "type" : "object",
        "properties" : {
          "dunningPolicyLevels" : {
            "type" : "array",
            "description" : "Dunning policy levels",
            "items" : {
              "$ref" : "#/components/schemas/DunningPolicyLevel"
            }
          },
          "policyName" : {
            "type" : "string",
            "description" : "dunning policy name"
          },
          "policyDescription" : {
            "type" : "string",
            "description" : "dunning policy description"
          },
          "interestForDelaySequence" : {
            "type" : "integer",
            "description" : "Interest for delay sequence",
            "format" : "int32"
          },
          "minBalanceTrigger" : {
            "type" : "number",
            "description" : "min balance trigger",
            "format" : "double"
          },
          "minBalanceTriggerCurrency" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "determineLevelBy" : {
            "type" : "string",
            "description" : "Determine level by",
            "enum" : [ "DAYS_OVERDUE", "DAYS_OVERDUE_AND_BALANCE_THRESHOLD" ]
          },
          "policyPriority" : {
            "type" : "integer",
            "description" : "Policy priority",
            "format" : "int32"
          },
          "dunningPolicyRules" : {
            "type" : "array",
            "description" : "Dunning policy rules",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "includeDueInvoicesInThreshold" : {
            "type" : "boolean",
            "description" : "include due invoices in threshold"
          },
          "includePayReminder" : {
            "type" : "boolean",
            "description" : "include pay reminder"
          },
          "attachInvoicesToEmails" : {
            "type" : "boolean",
            "description" : "Attach invoices to emails"
          },
          "isDefaultPolicy" : {
            "type" : "boolean",
            "description" : "is default policy"
          },
          "isActivePolicy" : {
            "type" : "boolean",
            "description" : "is policy is activated"
          }
        }
      },
      "DunningPolicyLevel" : {
        "type" : "object",
        "properties" : {
          "dunningLevelId" : {
            "type" : "integer",
            "description" : "Dunning level id",
            "format" : "int64"
          },
          "collectionPlanStatusId" : {
            "type" : "integer",
            "description" : "Collection plan status Id",
            "format" : "int64"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        },
        "description" : "Dunning policy levels"
      },
      "DunningPolicyRule" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "ruleJoint" : {
            "type" : "string"
          },
          "dunningPolicy" : {
            "$ref" : "#/components/schemas/DunningPolicy"
          },
          "dunningPolicyRuleLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningPolicyRuleLine"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "DunningPolicyRuleLine" : {
        "type" : "object",
        "properties" : {
          "policyConditionOperator" : {
            "type" : "string",
            "description" : "Policy condition operation",
            "enum" : [ "EQUALS", "NOT_EQUALS", "HIGHER_THAN", "HIGHER_THAN_OR_EQUAL", "LOWER_THAN", "LOWER_THAN_OR_EQUAL" ]
          },
          "ruleLineJoint" : {
            "type" : "string",
            "description" : "Rule line joint",
            "enum" : [ "AND", "OR" ]
          },
          "policyConditionTarget" : {
            "type" : "string",
            "description" : "Policy condition target",
            "enum" : [ "creditCategory", "customerCategory", "isCompany", "paymentMethod" ]
          },
          "policyConditionTargetValue" : {
            "type" : "string",
            "description" : "Policy condition target value"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        },
        "description" : "List of policy rule lines"
      },
      "DunningSettings" : {
        "required" : [ "dunningMode" ],
        "type" : "object",
        "properties" : {
          "accountingArticle" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "dunningMode" : {
            "type" : "string",
            "description" : "dunning mode",
            "enum" : [ "CUSTOMER_LEVEL", "INVOICE_LEVEL" ]
          },
          "maxDunningLevels" : {
            "type" : "integer",
            "description" : "Max dunning level",
            "format" : "int32",
            "default" : 15
          },
          "maxDaysOutstanding" : {
            "type" : "integer",
            "description" : "Max days outstanding",
            "format" : "int32"
          },
          "interestForDelayRate" : {
            "type" : "number",
            "description" : "interest for delay rate"
          },
          "customerBalance" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "allowInterestForDelay" : {
            "type" : "boolean",
            "description" : "allow interest for delay",
            "default" : true
          },
          "allowDunningCharges" : {
            "type" : "boolean",
            "description" : "allow dunninf charge",
            "default" : true
          },
          "applyDunningChargeFxExchangeRate" : {
            "type" : "boolean",
            "description" : "apply dunning charge exchange rate",
            "default" : true
          }
        }
      },
      "DunningStopReason" : {
        "required" : [ "dunningSettings", "stopReason" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The stop reason's description"
          },
          "descriptionI18n" : {
            "type" : "array",
            "description" : "The pause reason's description in different languages",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "stopReason" : {
            "type" : "string",
            "description" : "The stop reason"
          },
          "dunningSettings" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "EDR" : {
        "required" : [ "subscription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "originBatch" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "originRecord" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quantity" : {
            "type" : "number"
          },
          "parameter1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter7" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter8" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter9" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "dateParam1" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam2" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam3" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam4" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam5" : {
            "type" : "string",
            "format" : "date-time"
          },
          "decimalParam1" : {
            "type" : "number"
          },
          "decimalParam2" : {
            "type" : "number"
          },
          "decimalParam3" : {
            "type" : "number"
          },
          "decimalParam4" : {
            "type" : "number"
          },
          "decimalParam5" : {
            "type" : "number"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accessCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "headerEDR" : {
            "$ref" : "#/components/schemas/EDR"
          },
          "extraParameter" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "RATED", "REJECTED", "MEDIATING", "AGGREGATED", "DUPLICATED", "CANCELLED" ]
          },
          "rejectReason" : {
            "type" : "string"
          },
          "timesTried" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventKey" : {
            "type" : "string"
          },
          "eventVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "walletOperation" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "quantityLeftToRate" : {
            "type" : "number"
          },
          "businessKey" : {
            "type" : "string"
          },
          "zeroWoDropped" : {
            "type" : "boolean"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "EmailTemplate" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "media" : {
            "type" : "string",
            "enum" : [ "POSTAL_MAIL", "EMAIL", "SMS", "IM", "FAX", "VOICE", "WEBSERVICE", "QUEUE", "FTP_FILE", "CFT_FILE", "DATABASE", "DUNNING_MEDIA" ]
          },
          "tagStartDelimiter" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "tagEndDelimiter" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DUNNING", "INVOICE", "OTHER" ]
          },
          "textContent" : {
            "type" : "string"
          },
          "translatedTextContent" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "subject" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "htmlContent" : {
            "type" : "string"
          },
          "translatedHtmlContent" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "translatedSubject" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "EntityReferenceWrapper" : {
        "type" : "object",
        "properties" : {
          "classname" : {
            "type" : "string"
          },
          "classnameCode" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "empty" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          }
        }
      },
      "ExchangeRate" : {
        "required" : [ "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "disabled" : {
            "type" : "boolean"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "exchangeRate" : {
            "type" : "number"
          },
          "fromDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "currentRate" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "FileType" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "GdprConfiguration" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "inactiveSubscriptionLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "inactiveOrderLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customerProspectLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mailingLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "aoCheckUnpaidLife" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deleteSubscription" : {
            "type" : "boolean"
          },
          "deleteOrder" : {
            "type" : "boolean"
          },
          "deleteInvoice" : {
            "type" : "boolean"
          },
          "deleteAccounting" : {
            "type" : "boolean"
          },
          "deleteCustomerProspect" : {
            "type" : "boolean"
          },
          "deleteMailingLife" : {
            "type" : "boolean"
          },
          "deleteAoCheckUnpaidLife" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "GeneralLedger" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "otherTransactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OtherTransaction"
            }
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "GenericSequence" : {
        "type" : "object",
        "properties" : {
          "prefix" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "sequenceSize" : {
            "maximum" : 20,
            "type" : "integer",
            "format" : "int64"
          },
          "currentSequenceNb" : {
            "maximum" : 35,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "GroupedAttributes" : {
        "required" : [ "code", "disabled", "display", "mandatory", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "display" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "commercialRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeader"
            }
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ICustomFieldEntity" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "cfValuesAsJson" : {
            "type" : "string"
          },
          "cfvaluesTransient" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "IInvoiceable" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "unitAmountWithTax" : {
            "type" : "number"
          },
          "unitAmountTax" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "taxPercent" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "subscriptionId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "walletId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceSubCategoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "billingAccountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAccountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sellerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxOverriden" : {
            "type" : "boolean"
          },
          "taxRecalculated" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "taxClassId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          }
        }
      },
      "InterBankTitle" : {
        "type" : "object",
        "properties" : {
          "codeCreancier" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "codeEtablissementCreancier" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "codeCentre" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "nne" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "adresseTSA" : {
            "$ref" : "#/components/schemas/Address"
          }
        }
      },
      "Invoice" : {
        "required" : [ "prepaid", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoice"
          },
          "invoiceAgregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceAgregate"
            }
          },
          "invoiceNumber" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "temporaryInvoiceNumber" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "productDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "NEW", "SUSPECT", "REJECTED", "DRAFT", "CANCELED", "VALIDATED" ]
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "netToPay" : {
            "type" : "number"
          },
          "paymentMethodType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "iban" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "alias" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "comment" : {
            "maxLength" : 1200,
            "minLength" : 0,
            "type" : "string"
          },
          "adjustedInvoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "linkedInvoices" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LinkedInvoice"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "subscriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Subscription"
            }
          },
          "quote" : {
            "$ref" : "#/components/schemas/Quote"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          },
          "xmlFilename" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "pdfFilename" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethod"
          },
          "dueBalance" : {
            "type" : "number"
          },
          "alreadySent" : {
            "type" : "boolean"
          },
          "dontSend" : {
            "type" : "boolean"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "externalRef" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "rejectReason" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "initialCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "xmlDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "pdfDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "emailSentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentStatus" : {
            "type" : "string",
            "enum" : [ "NONE", "PENDING", "PENDING_PLAN", "PAID", "PPAID", "UNPAID", "ABANDONED", "DISPUTED", "REFUNDED", "PREFUNDED", "UNREFUNDED" ]
          },
          "paymentStatusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "rawAmount" : {
            "type" : "number"
          },
          "discountRate" : {
            "type" : "number"
          },
          "discountAmount" : {
            "type" : "number"
          },
          "cpqQuote" : {
            "$ref" : "#/components/schemas/CpqQuote"
          },
          "invoiceAdjustmentCurrentSellerNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceAdjustmentCurrentProviderNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previousInvoiceNumber" : {
            "type" : "string"
          },
          "draft" : {
            "type" : "boolean"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "draftRatedTransactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RatedTransaction"
            }
          },
          "newInvoicingProcess" : {
            "type" : "boolean"
          },
          "hasTaxes" : {
            "type" : "boolean"
          },
          "hasDiscounts" : {
            "type" : "boolean"
          },
          "hasMinimum" : {
            "type" : "boolean"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "invoiceLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLine"
            }
          },
          "commercialOrder" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "draftInvoiceLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLine"
            }
          },
          "amountWithoutTaxBeforeDiscount" : {
            "type" : "number"
          },
          "relatedDunningCollectionPlan" : {
            "$ref" : "#/components/schemas/DunningCollectionPlan"
          },
          "dunningCollectionPlanTriggered" : {
            "type" : "boolean"
          },
          "lastAppliedRate" : {
            "type" : "number"
          },
          "lastAppliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalNetToPay" : {
            "type" : "number"
          },
          "transactionalRawAmount" : {
            "type" : "number"
          },
          "transactionalDiscountAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTaxBeforeDiscount" : {
            "type" : "number"
          },
          "paymentPlan" : {
            "$ref" : "#/components/schemas/PaymentPlan"
          },
          "openOrderNumber" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceBalance" : {
            "type" : "number"
          },
          "useCurrentRate" : {
            "type" : "boolean"
          },
          "rejectedByRule" : {
            "$ref" : "#/components/schemas/InvoiceValidationRule"
          },
          "transactionalInvoiceBalance" : {
            "type" : "number"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "conversionFromBillingCurrency" : {
            "type" : "boolean"
          },
          "autoMatching" : {
            "type" : "boolean"
          },
          "ublReference" : {
            "type" : "boolean"
          },
          "pdpStatus" : {
            "$ref" : "#/components/schemas/PDPStatusEntity"
          },
          "certificateUncollectibilityNumber" : {
            "type" : "string"
          },
          "collectionPlan" : {
            "$ref" : "#/components/schemas/DunningCollectionPlan"
          },
          "purchaseOrders" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PurchaseOrder"
            }
          },
          "invoiceKey" : {
            "type" : "string"
          },
          "detailedInvoice" : {
            "type" : "boolean"
          },
          "alreadyAppliedMinimum" : {
            "type" : "boolean"
          },
          "alreadyAddedDiscount" : {
            "type" : "boolean"
          },
          "realTimeStatus" : {
            "type" : "string",
            "enum" : [ "NONE", "PENDING", "PENDING_PLAN", "PAID", "PPAID", "UNPAID", "ABANDONED", "DISPUTED", "REFUNDED", "PREFUNDED", "UNREFUNDED" ]
          },
          "appliedRate" : {
            "type" : "number"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "invoiceNumberOrTemporaryNumber" : {
            "type" : "string"
          },
          "subCategoryInvoiceAgregate" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubCategoryInvoiceAgregate"
            }
          },
          "reminderLevelTriggered" : {
            "type" : "boolean"
          },
          "discountAgregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubCategoryInvoiceAgregate"
            }
          },
          "pdfFilenameOnly" : {
            "type" : "string"
          },
          "xmlFilenameOnly" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "InvoiceAgregate" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "itemNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "prDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "conversionFromBillingCurrency" : {
            "type" : "boolean"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "descriminatorValue" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceCategory" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceSubCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceSubCategory"
            }
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "occTemplate" : {
            "$ref" : "#/components/schemas/OCCTemplate"
          },
          "occTemplateNegative" : {
            "$ref" : "#/components/schemas/OCCTemplate"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "InvoiceConfiguration" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "displaySubscriptions" : {
            "type" : "boolean"
          },
          "displayServices" : {
            "type" : "boolean"
          },
          "displayOffers" : {
            "type" : "boolean"
          },
          "displayPricePlans" : {
            "type" : "boolean"
          },
          "displayEdrs" : {
            "type" : "boolean"
          },
          "displayProvider" : {
            "type" : "boolean"
          },
          "displayDetail" : {
            "type" : "boolean"
          },
          "displayCfAsXML" : {
            "type" : "boolean"
          },
          "displayBillingCycle" : {
            "type" : "boolean"
          },
          "displayOrders" : {
            "type" : "boolean"
          },
          "displayTaxDetails" : {
            "type" : "boolean"
          },
          "currentInvoiceNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "defaultInvoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "defaultGenericAccountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "defaultDiscountAccountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "defaultAdvancedPaymentAccountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "defaultInvoiceMinimumAccountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "displayWalletOperations" : {
            "type" : "boolean"
          },
          "displayUserAccountHierarchy" : {
            "type" : "boolean"
          },
          "displayRatedItems" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceLine" : {
        "required" : [ "adjustmentStatus", "amountTax", "amountWithTax", "amountWithoutTax", "discountAmount", "discountRate", "quantity", "rawAmount", "status", "taxMode", "taxRate", "unitPrice", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "prestation" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "offerServiceTemplate" : {
            "$ref" : "#/components/schemas/OfferServiceTemplate"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "quantity" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "discountRate" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxRate" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "orderRef" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "accessPoint" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "commercialOrder" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "valueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "discountAmount" : {
            "type" : "number"
          },
          "label" : {
            "type" : "string"
          },
          "rawAmount" : {
            "type" : "number"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "productVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "orderLot" : {
            "$ref" : "#/components/schemas/OrderLot"
          },
          "taxRecalculated" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "BILLED", "REJECTED", "RERATED", "CANCELED" ]
          },
          "ratedTransactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RatedTransaction"
            }
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "adjustmentStatus" : {
            "type" : "string",
            "enum" : [ "ADJUSTED", "NOT_ADJUSTED", "TO_ADJUST" ]
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceAggregateF" : {
            "$ref" : "#/components/schemas/SubCategoryInvoiceAgregate"
          },
          "quote" : {
            "$ref" : "#/components/schemas/CpqQuote"
          },
          "quoteOffer" : {
            "$ref" : "#/components/schemas/QuoteOffer"
          },
          "orderOffer" : {
            "$ref" : "#/components/schemas/OrderOffer"
          },
          "discountedInvoiceLine" : {
            "$ref" : "#/components/schemas/InvoiceLine"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "taxMode" : {
            "type" : "string",
            "enum" : [ "ARTICLE", "TAX", "RATE" ]
          },
          "transactionalUnitPrice" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalDiscountAmount" : {
            "type" : "number"
          },
          "transactionalRawAmount" : {
            "type" : "number"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "conversionFromBillingCurrency" : {
            "type" : "boolean"
          },
          "openOrderNumber" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "linkedInvoiceLine" : {
            "$ref" : "#/components/schemas/InvoiceLine"
          },
          "additionalAggregationFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "invoiceRounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceKey" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "subscriptions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Subscription"
            }
          },
          "invoiceTypeId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentMethodId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxOverridden" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "InvoiceSequence" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "sequenceType" : {
            "type" : "string",
            "enum" : [ "RUM", "CUSTOMER_NO", "SEQUENCE", "NUMERIC", "ALPHA_UP", "UUID", "REGEXP" ]
          },
          "sequenceSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sequencePattern" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceType"
            }
          },
          "invoiceTypeSellerSequences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceTypeSellerSequence"
            }
          },
          "previousInvoiceNb" : {
            "type" : "integer",
            "format" : "int64"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceSubCategory" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "discount" : {
            "type" : "number"
          },
          "invoiceCategory" : {
            "$ref" : "#/components/schemas/InvoiceCategory"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "occTemplate" : {
            "$ref" : "#/components/schemas/OCCTemplate"
          },
          "occTemplateNegative" : {
            "$ref" : "#/components/schemas/OCCTemplate"
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "InvoiceType" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "occTemplate" : {
            "$ref" : "#/components/schemas/OCCTemplate"
          },
          "occTemplateNegative" : {
            "$ref" : "#/components/schemas/OCCTemplate"
          },
          "customInvoiceXmlScriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "appliesTo" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceType"
            }
          },
          "invoiceSequence" : {
            "$ref" : "#/components/schemas/InvoiceSequence"
          },
          "prefixEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "sellerSequence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceTypeSellerSequence"
            }
          },
          "matchingAuto" : {
            "type" : "boolean"
          },
          "invoiceAccountable" : {
            "type" : "boolean"
          },
          "useSelfSequence" : {
            "type" : "boolean"
          },
          "pdfFilenameEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "xmlFilenameEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "billingTemplateNameEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "occTemplateCodeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "occTemplateNegativeCodeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "emailTemplate" : {
            "$ref" : "#/components/schemas/EmailTemplate"
          },
          "mailingType" : {
            "type" : "string",
            "enum" : [ "MANUAL", "AUTO", "BATCH" ]
          },
          "excludeFromAgedTrialBalance" : {
            "type" : "boolean"
          },
          "invoiceValidationScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "invoiceValidationRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceValidationRule"
            }
          },
          "untdidInvoiceCodeType" : {
            "$ref" : "#/components/schemas/UntdidInvoiceCodeType"
          },
          "untdidVatPaymentOption" : {
            "$ref" : "#/components/schemas/UntdidVatPaymentOption"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "customUblScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "InvoiceTypeSellerSequence" : {
        "required" : [ "invoiceType", "seller" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "object"
          },
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "invoiceSequence" : {
            "$ref" : "#/components/schemas/InvoiceSequence"
          },
          "prefixEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceValidationRule" : {
        "required" : [ "code", "evaluationMode", "invoiceType", "priority", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "SCRIPT", "EXPRESSION_LANGUAGE", "RULE_SET" ]
          },
          "failStatus" : {
            "type" : "string",
            "enum" : [ "REJECTED", "SUSPECT", "VALID" ]
          },
          "validationScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "validationEL" : {
            "type" : "string"
          },
          "ruleValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "evaluationMode" : {
            "type" : "string",
            "enum" : [ "VALIDATION", "REJECTION", "CONDITION" ]
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "AND", "OR" ]
          },
          "parentRule" : {
            "$ref" : "#/components/schemas/InvoiceValidationRule"
          },
          "subRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceValidationRule"
            }
          },
          "toReorder" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "InvoicingPlan" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "invoicingPlanItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoicingPlanItem"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "InvoicingPlanItem" : {
        "required" : [ "advancement", "billingPlan", "code", "disabled", "rateToBill", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "billingPlan" : {
            "$ref" : "#/components/schemas/InvoicingPlan"
          },
          "advancement" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rateToBill" : {
            "type" : "number"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "IsoIcd" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "schemeName" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "JobCategoryEnum" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "JobExecutionResultImpl" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "jobParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "invoiceCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "jobInstance" : {
            "$ref" : "#/components/schemas/JobInstance"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "nbItemsToProcess" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsCorrectlyProcessed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsProcessedWithWarning" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsProcessedWithError" : {
            "type" : "integer",
            "format" : "int64"
          },
          "parentJobExecutionResult" : {
            "type" : "integer",
            "format" : "int64"
          },
          "workerJobExecutionResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobExecutionResultImpl"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "SHUTDOWN", "COMPLETED", "COMPLETED_MORE", "RUNNING", "FAILED", "CANCELLED" ]
          },
          "jobLauncherEnum" : {
            "type" : "string",
            "enum" : [ "TIMER", "GUI", "INCOMPLETE", "TRIGGER", "API", "WORKER" ]
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "report" : {
            "type" : "string"
          },
          "nodeName" : {
            "type" : "string"
          },
          "moreToProcess" : {
            "type" : "boolean"
          },
          "limitExceeded" : {
            "type" : "boolean"
          },
          "cumulativeEndDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "cumulativeNbItemsCorrectlyProcessed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cumulativeNbItemsProcessedWithWarning" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cumulativeNbItemsProcessedWithError" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cumulativeStatus" : {
            "type" : "string",
            "enum" : [ "SHUTDOWN", "COMPLETED", "COMPLETED_MORE", "RUNNING", "FAILED", "CANCELLED" ]
          },
          "cumulativeJobExecutionResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobExecutionResultImpl"
            }
          },
          "cumulativeStartDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "cumulativeNbItemsProcessed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsProcessed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "JobInstance" : {
        "required" : [ "code", "disabled", "jobStatusReportFrequency", "jobTemplate", "processNextJobOnError", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "jobTemplate" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parametres" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "jobCategoryEnum" : {
            "$ref" : "#/components/schemas/JobCategoryEnum"
          },
          "executionResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobExecutionResultImpl"
            }
          },
          "timerEntity" : {
            "$ref" : "#/components/schemas/TimerEntity"
          },
          "queryScheduler" : {
            "$ref" : "#/components/schemas/QueryScheduler"
          },
          "followingJob" : {
            "$ref" : "#/components/schemas/JobInstance"
          },
          "runOnNodes" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "limitToNrOfNodes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "clusterBehavior" : {
            "type" : "string",
            "enum" : [ "LIMIT_TO_SINGLE_NODE", "RUN_IN_PARALLEL", "SPREAD_OVER_CLUSTER_NODES" ]
          },
          "excludeInvoicesWithoutAmount" : {
            "type" : "boolean"
          },
          "verboseReport" : {
            "type" : "boolean"
          },
          "stopOnError" : {
            "type" : "boolean"
          },
          "processNextJobOnError" : {
            "type" : "boolean"
          },
          "jobStatusReportFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "providerCode" : {
            "type" : "string"
          },
          "runTimeValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "runTimeCfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "runTimeParametres" : {
            "type" : "string"
          },
          "runOnNodesResolved" : {
            "type" : "string"
          },
          "limitToNrOfNodesResolved" : {
            "type" : "integer",
            "format" : "int32"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "Journal" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "occTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OCCTemplate"
            }
          },
          "accountOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "JournalEntry" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "accountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "amount" : {
            "type" : "number"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "analyticCode1" : {
            "type" : "string"
          },
          "analyticCode2" : {
            "type" : "string"
          },
          "analyticCode3" : {
            "type" : "string"
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sellerCode" : {
            "type" : "string"
          },
          "clientUniqueId" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "supportingDocumentRef" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "supportingDocumentType" : {
            "type" : "string"
          },
          "tradingCurrency" : {
            "type" : "string"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "auxiliaryAccountCode" : {
            "type" : "string"
          },
          "auxiliaryAccountLabel" : {
            "type" : "string"
          },
          "journalCode" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "ASSETS", "LIABILITIES", "EQUITY", "REVENUE", "EXPENSE" ]
          },
          "account" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "customerCode" : {
            "type" : "string"
          },
          "customerName" : {
            "type" : "string"
          },
          "sellerName" : {
            "type" : "string"
          },
          "reference" : {
            "type" : "string"
          },
          "documentType" : {
            "type" : "string"
          },
          "matchingCode" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Language" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "languageCode" : {
            "maxLength" : 3,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionEn" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "LinkedInvoice" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "linkedInvoiceValue" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "amount" : {
            "type" : "number"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ADJUSTMENT", "ADVANCEMENT_PAYMENT" ]
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          }
        }
      },
      "MatchingAmount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "matchingCode" : {
            "$ref" : "#/components/schemas/MatchingCode"
          },
          "accountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "MatchingCode" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "matchingType" : {
            "type" : "string",
            "enum" : [ "A", "M", "A_TIP", "A_DERICT_DEBIT" ]
          },
          "matchingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "matchingAmounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MatchingAmount"
            }
          },
          "matchingAmountCredit" : {
            "type" : "number"
          },
          "matchingAmountDebit" : {
            "type" : "number"
          },
          "transactionalMatchingAmountCredit" : {
            "type" : "number"
          },
          "transactionalMatchingAmountDebit" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Media" : {
        "required" : [ "code", "label", "main", "mediaName", "mediaType", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "mediaName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "main" : {
            "type" : "boolean"
          },
          "mediaType" : {
            "type" : "string",
            "enum" : [ "IMAGE", "VIDEO", "PDF" ]
          },
          "mediaPath" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "templateCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageVariableValue"
            }
          },
          "campaign" : {
            "$ref" : "#/components/schemas/Campaign"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "media" : {
            "type" : "string",
            "enum" : [ "POSTAL_MAIL", "EMAIL", "SMS", "IM", "FAX", "VOICE", "WEBSERVICE", "QUEUE", "FTP_FILE", "CFT_FILE", "DATABASE", "DUNNING_MEDIA" ]
          },
          "subMedia" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "priority" : {
            "type" : "string",
            "enum" : [ "SLOW", "NORMAL", "URGENT" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "WAITING", "PROCESSING", "TREATED", "REJECTED", "CANCELED" ]
          },
          "rejectionReason" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "MessageVariableValue" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "message" : {
            "$ref" : "#/components/schemas/Message"
          },
          "value" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "MeveoInstance" : {
        "required" : [ "code", "url" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "productName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "productVersion" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "owner" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "md5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "PARENT", "CHILD", "PARTNER" ]
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "keyEntreprise" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "macAddress" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "machineVendor" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "installationMode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "nbCores" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "memory" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "hdSize" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "osName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "osVersion" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "osArch" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "javaVmVersion" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "javaVmName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "javaVendor" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "javaVersion" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "asVendor" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "asVersion" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "url" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "authUsername" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "authPasswordDB" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "clientId" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "clientSecret" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "authenticationType" : {
            "type" : "string",
            "enum" : [ "BASIC_AUTHENTICATION", "OAUTH2" ]
          },
          "authPassword" : {
            "type" : "string"
          },
          "authPasswordKS" : {
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "MeveoModule" : {
        "required" : [ "code", "disabled", "license" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "license" : {
            "type" : "string",
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "installed" : {
            "type" : "boolean"
          },
          "moduleSource" : {
            "type" : "string"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "downloaded" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "MeveoModuleItem" : {
        "required" : [ "itemClass", "itemCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "meveoModule" : {
            "$ref" : "#/components/schemas/MeveoModule"
          },
          "appliesTo" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "itemClass" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "itemCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "itemEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "itemClassSimpleName" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Name" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "$ref" : "#/components/schemas/Title"
          },
          "firstName" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "fullName" : {
            "type" : "string"
          }
        }
      },
      "NameInfo" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "$ref" : "#/components/schemas/Title"
          },
          "firstName" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "fullName" : {
            "type" : "string"
          }
        }
      },
      "OCCTemplate" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "occCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "accountingScheme" : {
            "$ref" : "#/components/schemas/AccountingScheme"
          },
          "contraAccountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "contraAccountingCode2" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "manualCreationEnabled" : {
            "type" : "boolean"
          },
          "balances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerBalance"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OfferAmount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "amount" : {
            "type" : "number"
          },
          "billingRunReport" : {
            "$ref" : "#/components/schemas/BillingRunReport"
          },
          "ratedTransactionCount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OfferComponent" : {
        "required" : [ "offerTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "quantityMin" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quantityMax" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quantityDefault" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagsList" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "display" : {
            "type" : "boolean"
          },
          "productSet" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OfferProductTemplate" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "object"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "productTemplate" : {
            "$ref" : "#/components/schemas/ProductTemplate"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OfferServiceTemplate" : {
        "required" : [ "offerTemplate", "serviceTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "incompatibleServices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceTemplate"
            }
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OfferTemplate" : {
        "required" : [ "code", "disabled", "display", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategory"
            }
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "imagePath" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "attachments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DigitalResource"
            }
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "businessAccountModels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BusinessAccountModel"
            }
          },
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Channel"
            }
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "globalRatingScriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "sellers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Seller"
            }
          },
          "customerCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategory"
            }
          },
          "businessOfferModel" : {
            "$ref" : "#/components/schemas/BusinessOfferModel"
          },
          "offerServiceTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferServiceTemplate"
            }
          },
          "offerProductTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferProductTemplate"
            }
          },
          "offerComponents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferComponent"
            }
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "allowedDiscountPlans" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlan"
            }
          },
          "minimumInvoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "subscriptionRenewal" : {
            "$ref" : "#/components/schemas/SubscriptionRenewal"
          },
          "prefix" : {
            "type" : "string"
          },
          "productTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductTemplate"
            }
          },
          "transientCode" : {
            "type" : "string"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "medias" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Media"
            }
          },
          "commercialRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeader"
            }
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "isOfferChangeRestricted" : {
            "type" : "boolean"
          },
          "allowedOffersChange" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplate"
            }
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isModel" : {
            "type" : "boolean"
          },
          "offerModel" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "generateQuoteEdrPerProduct" : {
            "type" : "boolean"
          },
          "display" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "document" : {
            "$ref" : "#/components/schemas/Document"
          },
          "arr" : {
            "type" : "number"
          },
          "offerAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateAttribute"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "nameOrCode" : {
            "type" : "string"
          },
          "longDescriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "OfferTemplateAttribute" : {
        "required" : [ "attribute", "display", "mandatory", "offerTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "mandatoryWithEl" : {
            "type" : "string"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "display" : {
            "type" : "boolean"
          },
          "readOnly" : {
            "type" : "boolean"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "validationType" : {
            "type" : "string",
            "enum" : [ "REGEX", "EL" ]
          },
          "validationPattern" : {
            "type" : "string"
          },
          "validationLabel" : {
            "type" : "string"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OfferTemplateCategory" : {
        "required" : [ "code", "disabled", "name", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "offerTemplateCategory" : {
            "$ref" : "#/components/schemas/OfferTemplateCategory"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategory"
            }
          },
          "productOffering" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOffering"
            }
          },
          "orderLevel" : {
            "type" : "integer",
            "format" : "int32"
          },
          "imagePath" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "parentCategoryCode" : {
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "assignedToProductOffering" : {
            "type" : "boolean"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "OneShotChargeTemplate" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "productCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplateMapping"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "chargeType" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "amountEditable" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "edrTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEDRTemplate"
            }
          },
          "inputUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "inputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "outputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRule" : {
            "$ref" : "#/components/schemas/RevenueRecognitionRule"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "taxClassEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "dropZeroWo" : {
            "type" : "boolean"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            }
          },
          "pricePlans" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrix"
            }
          },
          "roundingValuesComputed" : {
            "type" : "boolean"
          },
          "roundingUnityNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "roundingEdrNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "internalNote" : {
            "type" : "string"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter1Description" : {
            "type" : "string"
          },
          "parameter2Description" : {
            "type" : "string"
          },
          "parameter3Description" : {
            "type" : "string"
          },
          "parameterExtraDescription" : {
            "type" : "string"
          },
          "parameter1Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean"
          },
          "parameter1IsHidden" : {
            "type" : "boolean"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean"
          },
          "parameter2IsHidden" : {
            "type" : "boolean"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean"
          },
          "parameter3IsHidden" : {
            "type" : "boolean"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean"
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "businessKeyDescription" : {
            "type" : "string"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean"
          },
          "quantityAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean"
          },
          "oneShotChargeTemplateType" : {
            "type" : "string",
            "enum" : [ "oneShotChargeTemplateTypeEnum.subscription", "oneShotChargeTemplateTypeEnum.termination", "oneShotChargeTemplateTypeEnum.other", "oneShotChargeTemplateTypeEnum.invoicing_plan" ]
          },
          "immediateInvoicing" : {
            "type" : "boolean"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "priority" : {
            "type" : "integer",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "Order status lifecycle",
            "enum" : [ "IN_CREATION", "ACKNOWLEDGED", "IN_PROGRESS", "CANCELLED", "COMPLETED", "REJECTED", "PENDING", "HELD", "FAILED", "WAITING", "DEFERRED", "PARTIAL" ]
          },
          "code" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethod"
          },
          "requestedProcessingStartDate" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "orderItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderItem"
            }
          },
          "billingCycle" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "deliveryInstructions" : {
            "type" : "string"
          },
          "requestedCompletionDate" : {
            "type" : "string"
          },
          "expectedCompletionDate" : {
            "type" : "string"
          },
          "orderDate" : {
            "type" : "string"
          },
          "statusMessage" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "OrderArticleLine" : {
        "required" : [ "accountingArticle", "code", "order", "quantity", "quantityService" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "order" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "orderCustomerService" : {
            "$ref" : "#/components/schemas/OrderLot"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "quantity" : {
            "type" : "number"
          },
          "quantityService" : {
            "type" : "number"
          },
          "orderProduct" : {
            "$ref" : "#/components/schemas/OrderProduct"
          },
          "orderArticleItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderPrice"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OrderAttribute" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "parentAttributeValue" : {
            "$ref" : "#/components/schemas/OrderAttribute"
          },
          "assignedAttributeValue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderAttribute"
            }
          },
          "stringValue" : {
            "type" : "string"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "booleanValue" : {
            "type" : "boolean"
          },
          "commercialOrder" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "orderLot" : {
            "$ref" : "#/components/schemas/OrderLot"
          },
          "orderProduct" : {
            "$ref" : "#/components/schemas/OrderProduct"
          },
          "accessPoint" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "orderOffer" : {
            "$ref" : "#/components/schemas/OrderOffer"
          },
          "value" : {
            "type" : "object"
          },
          "realValue" : {
            "type" : "object"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "OrderHistory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orderItem" : {
            "$ref" : "#/components/schemas/OrderItem"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "ADD", "MODIFY", "DELETE" ]
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OrderInfo" : {
        "type" : "object",
        "properties" : {
          "order" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "productVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "orderLot" : {
            "$ref" : "#/components/schemas/OrderLot"
          },
          "orderProduct" : {
            "$ref" : "#/components/schemas/OrderProduct"
          },
          "orderOffer" : {
            "$ref" : "#/components/schemas/OrderOffer"
          }
        }
      },
      "OrderItem" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Order status lifecycle",
            "enum" : [ "IN_CREATION", "ACKNOWLEDGED", "IN_PROGRESS", "CANCELLED", "COMPLETED", "REJECTED", "PENDING", "HELD", "FAILED", "WAITING", "DEFERRED", "PARTIAL" ]
          },
          "action" : {
            "type" : "string",
            "description" : "Action requested on a product or product offer",
            "enum" : [ "ADD", "MODIFY", "DELETE" ]
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "productInstance" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductInstance"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "itemId" : {
            "type" : "string"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "OrderItemProductOffering" : {
        "required" : [ "itemOrder", "orderItem", "productOffering" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "object"
          },
          "orderItem" : {
            "$ref" : "#/components/schemas/OrderItem"
          },
          "productOffering" : {
            "$ref" : "#/components/schemas/ProductOffering"
          },
          "itemOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OrderLot" : {
        "required" : [ "code", "order", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "name" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "quoteLot" : {
            "$ref" : "#/components/schemas/QuoteLot"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "OrderOffer" : {
        "required" : [ "code", "offerTemplate", "order", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderProduct"
            }
          },
          "orderAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderAttribute"
            }
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "quoteOffer" : {
            "$ref" : "#/components/schemas/QuoteOffer"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "orderLineType" : {
            "type" : "string",
            "enum" : [ "CREATE", "AMEND", "TERMINATE", "APPLY_ONE_SHOT" ]
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "$ref" : "#/components/schemas/SubscriptionTerminationReason"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "productswithoutDuplication" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderProduct"
            }
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "OrderPrice" : {
        "required" : [ "code", "order" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "orderArticleLine" : {
            "$ref" : "#/components/schemas/OrderArticleLine"
          },
          "order" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "priceLevelEnum" : {
            "type" : "string",
            "enum" : [ "ORDER", "PRODUCT", "QUOTE", "OFFER" ]
          },
          "priceTypeEnum" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONE_SHOT_SUBSCRIPTION", "ONE_SHOT_TERMINATION", "ONE_SHOT_OTHER", "ONE_SHOT_INVOICING_PLAN", "USAGE", "FIXED_DISCOUNT" ]
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "unitPriceWithoutTax" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithoutTaxWithDiscount" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "taxRate" : {
            "type" : "number"
          },
          "priceOverCharged" : {
            "type" : "boolean"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "recurrenceDuration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recurrencePeriodicity" : {
            "type" : "string"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "orderOffer" : {
            "$ref" : "#/components/schemas/OrderOffer"
          },
          "quantity" : {
            "type" : "number"
          },
          "discountedOrderPrice" : {
            "$ref" : "#/components/schemas/OrderPrice"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "discountedAmount" : {
            "type" : "number"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OrderProduct" : {
        "required" : [ "order", "quantity", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/CommercialOrder"
          },
          "orderServiceCommercial" : {
            "$ref" : "#/components/schemas/OrderLot"
          },
          "orderOffer" : {
            "$ref" : "#/components/schemas/OrderOffer"
          },
          "productVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "quantity" : {
            "type" : "number"
          },
          "orderAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderAttribute"
            }
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "quoteProduct" : {
            "$ref" : "#/components/schemas/QuoteProduct"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "productActionType" : {
            "type" : "string",
            "enum" : [ "CREATE", "ACTIVATE", "SUSPEND", "TERMINATE", "MODIFY" ]
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "$ref" : "#/components/schemas/SubscriptionTerminationReason"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "orderArticleLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderArticleLine"
            }
          },
          "mrr" : {
            "type" : "number"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "OrderType" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "OtherTransaction" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "generalLedger" : {
            "$ref" : "#/components/schemas/GeneralLedger"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "occCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "occDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo7" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "paymentVentilations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentVentilation"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PDPStatusEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "transmittedFormatEnum" : {
            "type" : "string",
            "enum" : [ "UBL", "XML", "PDF" ]
          },
          "origin" : {
            "type" : "string"
          },
          "returnCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "label" : {
            "type" : "string"
          },
          "invoiceIdentifier" : {
            "type" : "string"
          },
          "invoiceNumber" : {
            "type" : "string"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DEPOSITED", "CASHED", "RECTIFICATIVE", "REJECTED", "DISPUTED" ]
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "pdpStatusHistories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PDPStatusHistory"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PDPStatusHistory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "pdpStatus" : {
            "type" : "string",
            "enum" : [ "DEPOSITED", "CASHED", "RECTIFICATIVE", "REJECTED", "DISPUTED" ]
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "origin" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Payment" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "dunningDocument" : {
            "$ref" : "#/components/schemas/DunningDocument"
          },
          "paymentOrder" : {
            "type" : "string"
          },
          "fees" : {
            "type" : "number"
          },
          "transactionalFees" : {
            "type" : "number"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "isManualPayment" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentGateway" : {
        "required" : [ "code", "disabled", "type", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CUSTOM", "NATIF" ]
          },
          "paymentMethodType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "implementationClassName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "applicationEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "cardType" : {
            "type" : "string",
            "enum" : [ "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "CB" ]
          },
          "nbTries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "replayCause" : {
            "type" : "string",
            "enum" : [ "ERROR", "REJECT" ]
          },
          "errorsToReplay" : {
            "type" : "string"
          },
          "marchandId" : {
            "type" : "string"
          },
          "secretKeyDB" : {
            "type" : "string"
          },
          "apiKey" : {
            "type" : "string"
          },
          "webhooksKeyId" : {
            "type" : "string"
          },
          "webhooksSecretKey" : {
            "type" : "string"
          },
          "profile" : {
            "type" : "string"
          },
          "rumSequence" : {
            "$ref" : "#/components/schemas/PaymentGatewayRumSequence"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinates"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentRejectionCodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentRejectionCode"
            }
          },
          "secretKeyKS" : {
            "type" : "string"
          },
          "secretKey" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentGatewayRumSequence" : {
        "required" : [ "code", "paymentGateway" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "genericSequence" : {
            "$ref" : "#/components/schemas/GenericSequence"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PaymentHistory" : {
        "required" : [ "amountCts", "customerAccountCode", "operationCategory", "operationDate", "syncStatus" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "customerAccountName" : {
            "type" : "string"
          },
          "sellerCode" : {
            "type" : "string"
          },
          "customerCode" : {
            "type" : "string"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountCts" : {
            "type" : "integer",
            "format" : "int64"
          },
          "syncStatus" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "asyncStatus" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "externalPaymentId" : {
            "type" : "string"
          },
          "errorCode" : {
            "type" : "string"
          },
          "errorMessage" : {
            "type" : "string"
          },
          "errorType" : {
            "type" : "string",
            "enum" : [ "ERROR", "REJECT" ]
          },
          "paymentGatewayCode" : {
            "type" : "string"
          },
          "paymentMethodType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentMethodName" : {
            "type" : "string"
          },
          "operationCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "refund" : {
            "$ref" : "#/components/schemas/Refund"
          },
          "listAoPaid" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PaymentMethod" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Payment Method types",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "PaymentPlan" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "amountToRecover" : {
            "type" : "number"
          },
          "amountPerInstallment" : {
            "type" : "number"
          },
          "remainingAmount" : {
            "type" : "number"
          },
          "actionOnRemainingAmount" : {
            "type" : "string",
            "enum" : [ "FIRST", "LAST", "ADDITIONAL" ]
          },
          "numberOfInstallments" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "recurringUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "COMPLETED" ]
          },
          "createdAos" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "targetedAos" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PaymentPlanPolicy" : {
        "required" : [ "defaultInterestRate" ],
        "type" : "object",
        "properties" : {
          "minAllowedReceivableAmount" : {
            "type" : "number"
          },
          "maxAllowedReceivableAmount" : {
            "type" : "number"
          },
          "minInstallmentAmount" : {
            "type" : "number"
          },
          "theresHoldForApproval" : {
            "type" : "number"
          },
          "maxPaymentPlanDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultInstallmentCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultFeePerInstallmentPlan" : {
            "type" : "integer",
            "format" : "int32"
          },
          "installmentAmountRounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "splitEvenly" : {
            "type" : "boolean"
          },
          "allowCustomInstallmentPlan" : {
            "type" : "boolean"
          },
          "addInterestRate" : {
            "type" : "boolean"
          },
          "addInstallmentFee" : {
            "type" : "boolean"
          },
          "defaultBlockPayments" : {
            "type" : "boolean"
          },
          "requireInternalApproval" : {
            "type" : "boolean"
          },
          "defaultInterestRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultRecurrenceUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY" ]
          },
          "actionOnRemainingAmount" : {
            "type" : "string",
            "enum" : [ "FIRST", "LAST", "ADDITIONAL" ]
          },
          "clearingPriority" : {
            "type" : "string",
            "enum" : [ "NEWEST", "OLDEST", "SMALLEST", "BIGGEST" ]
          },
          "defaultStartingDateOfPlan" : {
            "type" : "string",
            "enum" : [ "TODAY", "LAST_DAY_OF_CURRENT_MONTH", "FIRST_DAY_OF_NEXT_MONTH" ]
          },
          "allowedPaymentMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
            }
          },
          "dunningDefaultPauseReason" : {
            "$ref" : "#/components/schemas/DunningPauseReason"
          },
          "allowedCreditCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreditCategory"
            }
          }
        }
      },
      "PaymentRejectionAction" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "paymentRejectionCodesGroup" : {
            "$ref" : "#/components/schemas/PaymentRejectionCodesGroup"
          },
          "scriptParameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "rejectionActionReports" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentRejectionActionReport"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentRejectionActionReport" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "action" : {
            "$ref" : "#/components/schemas/PaymentRejectionAction"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELED" ]
          },
          "report" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "actionScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentRejectionCode" : {
        "required" : [ "code", "paymentGateway", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "paymentRejectionCodesGroup" : {
            "$ref" : "#/components/schemas/PaymentRejectionCodesGroup"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentRejectionCodesGroup" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "paymentRejectionCodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentRejectionCode"
            }
          },
          "paymentRejectionActions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentRejectionAction"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentScheduleInstance" : {
        "required" : [ "amount", "calendar", "code", "disabled", "endDate", "paymentDayInMonth", "paymentScheduleTemplate", "serviceInstance", "startDate", "status", "statusDate", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "IN_PROGRESS", "OBSOLETE", "DONE", "CANCELLED", "TERMINATED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentScheduleTemplate" : {
            "$ref" : "#/components/schemas/PaymentScheduleTemplate"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "amount" : {
            "type" : "number"
          },
          "calendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "paymentDayInMonth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paymentScheduleInstanceItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentScheduleInstanceItem"
            }
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentScheduleInstanceItem" : {
        "required" : [ "disabled", "dueDate", "last", "paymentScheduleInstance", "requestPaymentDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "disabled" : {
            "type" : "boolean"
          },
          "paymentScheduleInstance" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstance"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requestPaymentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoice"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "last" : {
            "type" : "boolean"
          },
          "amount" : {
            "type" : "number"
          },
          "paid" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PaymentScheduleTemplate" : {
        "required" : [ "advancePaymentInvoiceSubCategory", "advancePaymentInvoiceType", "amount", "calendar", "code", "disabled", "doPayment", "generateAdvancePaymentInvoice", "paymentDayInMonth", "paymentLabel", "serviceTemplate", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "paymentLabel" : {
            "type" : "string"
          },
          "paymentDayInMonth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "amount" : {
            "type" : "number"
          },
          "calendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "advancePaymentInvoiceType" : {
            "$ref" : "#/components/schemas/InvoiceType"
          },
          "generateAdvancePaymentInvoice" : {
            "type" : "boolean"
          },
          "advancePaymentInvoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "doPayment" : {
            "type" : "boolean"
          },
          "paymentScheduleInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentScheduleInstance"
            }
          },
          "applyAgreement" : {
            "type" : "boolean"
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "amountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "filterEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "paymentDayInMonthEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "useBankingCalendar" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PaymentVentilation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "originalOT" : {
            "$ref" : "#/components/schemas/OtherTransaction"
          },
          "accountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "newOT" : {
            "$ref" : "#/components/schemas/OtherTransaction"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "ventilationAmount" : {
            "type" : "number"
          },
          "ventilationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "ventilationActionStatus" : {
            "type" : "string",
            "enum" : [ "V", "U" ]
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PaypalPaymentMethod" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "alias" : {
            "type" : "string"
          },
          "preferred" : {
            "type" : "boolean"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "userId" : {
            "type" : "string"
          },
          "info1" : {
            "type" : "string"
          },
          "info2" : {
            "type" : "string"
          },
          "info3" : {
            "type" : "string"
          },
          "info4" : {
            "type" : "string"
          },
          "info5" : {
            "type" : "string"
          },
          "tokenId" : {
            "type" : "string"
          },
          "token3DsId" : {
            "type" : "string"
          },
          "referenceDocument" : {
            "$ref" : "#/components/schemas/Document"
          },
          "paymentMeans" : {
            "$ref" : "#/components/schemas/UntdidPaymentMeans"
          },
          "mandateChangeAction" : {
            "type" : "string",
            "enum" : [ "NONE", "TO_ADVERTISE", "ADVERTISED" ]
          },
          "action" : {
            "type" : "string"
          },
          "expired" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PriceList" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validUntil" : {
            "type" : "string",
            "format" : "date-time"
          },
          "applicationStartDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "applicationEndDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "CLOSED", "ARCHIVED" ]
          },
          "lines" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PriceListLine"
            }
          },
          "brands" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerBrand"
            }
          },
          "customerCategories" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategory"
            }
          },
          "creditCategories" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreditCategory"
            }
          },
          "countries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Country"
            }
          },
          "currencies" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Currency"
            }
          },
          "legalEntities" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Title"
            }
          },
          "paymentMethods" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
            }
          },
          "sellers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Seller"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PriceListLine" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "rate" : {
            "type" : "number"
          },
          "amount" : {
            "type" : "number"
          },
          "priceList" : {
            "$ref" : "#/components/schemas/PriceList"
          },
          "offerCategory" : {
            "$ref" : "#/components/schemas/OfferTemplateCategory"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductLine"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "pricePlan" : {
            "$ref" : "#/components/schemas/PricePlanMatrix"
          },
          "priceListType" : {
            "type" : "string",
            "enum" : [ "FIXED", "PERCENTAGE" ]
          },
          "applicationEl" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PricePlanMatrix" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixVersion"
            }
          },
          "startSubscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endSubscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startRatingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endRatingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "minQuantity" : {
            "type" : "number"
          },
          "maxQuantity" : {
            "type" : "number"
          },
          "minSubscriptionAgeInMonth" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxSubscriptionAgeInMonth" : {
            "type" : "integer",
            "format" : "int64"
          },
          "criteria1Value" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2Value" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3Value" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteriaEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountWithoutTaxEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "amountWithTaxEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "validityCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int64"
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "woDescriptionEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "totalAmountEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumAmountEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "invoiceSubCategoryEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "validityFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "parameter1El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter2El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter3El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeTemplates" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChargeTemplate"
            }
          },
          "contractItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContractItem"
            }
          },
          "discountPlanItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanItem"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PricePlanMatrixColumn" : {
        "required" : [ "code", "position", "pricePlanMatrixVersion", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "pricePlanMatrixVersion" : {
            "$ref" : "#/components/schemas/PricePlanMatrixVersion"
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "String", "Long", "Double", "Range_Date", "Range_Numeric", "Boolean" ]
          },
          "elValue" : {
            "type" : "string"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "pricePlanMatrixValues" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixValue"
            }
          },
          "range" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PricePlanMatrixLine" : {
        "required" : [ "priority", "ratingAccuracy", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "pricePlanMatrixVersion" : {
            "$ref" : "#/components/schemas/PricePlanMatrixVersion"
          },
          "description" : {
            "type" : "string"
          },
          "valueEL" : {
            "type" : "string"
          },
          "priceWithoutTax" : {
            "type" : "number"
          },
          "value" : {
            "type" : "number"
          },
          "pricePlanMatrixValues" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixValue"
            }
          },
          "tradingPricePlanMatrixLines" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TradingPricePlanMatrixLine"
            }
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ratingAccuracy" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "PricePlanMatrixValue" : {
        "required" : [ "pricePlanMatrixColumn", "pricePlanMatrixLine" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pricePlanMatrixColumn" : {
            "$ref" : "#/components/schemas/PricePlanMatrixColumn"
          },
          "pricePlanMatrixLine" : {
            "$ref" : "#/components/schemas/PricePlanMatrixLine"
          },
          "longValue" : {
            "type" : "integer",
            "format" : "int64"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "stringValue" : {
            "type" : "string"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fromDateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "toDateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fromDoubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "toDoubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "booleanValue" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PricePlanMatrixVersion" : {
        "required" : [ "pricePlanMatrix", "priceVersionType", "status", "statusDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "pricePlanMatrix" : {
            "$ref" : "#/components/schemas/PricePlanMatrix"
          },
          "currentVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "label" : {
            "type" : "string"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "price" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "priceEL" : {
            "type" : "string"
          },
          "lines" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixLine"
            }
          },
          "columns" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixColumn"
            }
          },
          "tradingPricePlanVersions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TradingPricePlanVersion"
            }
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "priceVersionType" : {
            "type" : "string",
            "enum" : [ "FIXED", "PERCENTAGE" ]
          },
          "tradingPricesEL" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "statusChangeLog" : {
            "type" : "string"
          },
          "matrix" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "longDescription" : {
            "type" : "string"
          },
          "validTo" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "imageUrl" : {
            "type" : "string"
          },
          "image64" : {
            "type" : "string"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "lifeCycleStatus" : {
            "type" : "string"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "price" : {
            "type" : "number"
          },
          "productChargeTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "businessProductModel" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "sellers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "validFrom" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "disabled" : {
            "type" : "boolean"
          }
        }
      },
      "ProductAmount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "amount" : {
            "type" : "number"
          },
          "billingRunReport" : {
            "$ref" : "#/components/schemas/BillingRunReport"
          },
          "ratedTransactionCount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ProductChargeInstance" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeType" : {
            "maxLength" : 1,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "chargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "walletOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperation"
            }
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "currency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "country" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "walletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "prepaidWalletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulatorCounterInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "taxClassResolved" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "productChargeTemplate" : {
            "$ref" : "#/components/schemas/ProductChargeTemplate"
          },
          "productInstance" : {
            "$ref" : "#/components/schemas/ProductInstance"
          },
          "quantity" : {
            "type" : "number"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "walletOperationsSorted" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperation"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ProductChargeTemplate" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "chargeType" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "amountEditable" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "edrTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEDRTemplate"
            }
          },
          "inputUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "inputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "outputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRule" : {
            "$ref" : "#/components/schemas/RevenueRecognitionRule"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "taxClassEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "dropZeroWo" : {
            "type" : "boolean"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "roundingValuesComputed" : {
            "type" : "boolean"
          },
          "roundingUnityNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "roundingEdrNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "internalNote" : {
            "type" : "string"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter1Description" : {
            "type" : "string"
          },
          "parameter2Description" : {
            "type" : "string"
          },
          "parameter3Description" : {
            "type" : "string"
          },
          "parameterExtraDescription" : {
            "type" : "string"
          },
          "parameter1Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean"
          },
          "parameter1IsHidden" : {
            "type" : "boolean"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean"
          },
          "parameter2IsHidden" : {
            "type" : "boolean"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean"
          },
          "parameter3IsHidden" : {
            "type" : "boolean"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean"
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "businessKeyDescription" : {
            "type" : "string"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean"
          },
          "quantityAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean"
          },
          "productTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductTemplate"
            }
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ProductChargeTemplateMapping" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplate"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplate"
            }
          },
          "accumulatorCounterTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterTemplate"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ProductInstance" : {
        "type" : "object",
        "properties" : {
          "seller" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "code" : {
            "type" : "string"
          },
          "productPrice" : {
            "type" : "number",
            "format" : "double"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "product" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ProductLine" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "longDescription" : {
            "type" : "string"
          },
          "parentLine" : {
            "$ref" : "#/components/schemas/ProductLine"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ProductOffering" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "imagePath" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "attachments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DigitalResource"
            }
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "businessAccountModels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BusinessAccountModel"
            }
          },
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Channel"
            }
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "globalRatingScriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "sellers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Seller"
            }
          },
          "customerCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategory"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "nameOrCode" : {
            "type" : "string"
          },
          "longDescriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ProductTemplate" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "imagePath" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "businessAccountModels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BusinessAccountModel"
            }
          },
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Channel"
            }
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "globalRatingScriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "customerCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategory"
            }
          },
          "productChargeTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplate"
            }
          },
          "businessProductModel" : {
            "$ref" : "#/components/schemas/BusinessProductModel"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplate"
            }
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "nameOrCode" : {
            "type" : "string"
          },
          "longDescriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ProductVersion" : {
        "required" : [ "product", "shortDescription", "status", "statusDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "currentVersion" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "shortDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "longDescription" : {
            "type" : "string"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttribute"
            }
          },
          "groupedAttributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GroupedAttributes"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ProductVersionAttribute" : {
        "required" : [ "attribute", "display", "mandatory", "productVersion" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "mandatoryWithEl" : {
            "type" : "string"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "display" : {
            "type" : "boolean"
          },
          "readOnly" : {
            "type" : "boolean"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "validationType" : {
            "type" : "string",
            "enum" : [ "REGEX", "EL" ]
          },
          "validationPattern" : {
            "type" : "string"
          },
          "validationLabel" : {
            "type" : "string"
          },
          "productVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Provider" : {
        "required" : [ "code", "disabled", "invoiceRounding", "invoiceRoundingMode", "rounding", "roundingMode", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "code" : {
            "maxLength" : 60,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "multicountryFlag" : {
            "type" : "boolean"
          },
          "multicurrencyFlag" : {
            "type" : "boolean"
          },
          "multilanguageFlag" : {
            "type" : "boolean"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
            }
          },
          "allowedManualRefundMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
            }
          },
          "rounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "invoiceRounding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maximumDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentMatchingCode" : {
            "type" : "string"
          },
          "icdId" : {
            "$ref" : "#/components/schemas/IsoIcd"
          },
          "maximumDeferralPerInvoice" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoiceRoundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinates"
          },
          "paymentPlanPolicy" : {
            "$ref" : "#/components/schemas/PaymentPlanPolicy"
          },
          "entreprise" : {
            "type" : "boolean"
          },
          "automaticInvoicing" : {
            "type" : "boolean"
          },
          "interBankTitle" : {
            "$ref" : "#/components/schemas/InterBankTitle"
          },
          "amountValidation" : {
            "type" : "boolean"
          },
          "levelDuplication" : {
            "type" : "boolean"
          },
          "email" : {
            "maxLength" : 100,
            "minLength" : 0,
            "pattern" : ".+@.+\\..{2,4}",
            "type" : "string"
          },
          "displayFreeTransacInInvoice" : {
            "type" : "boolean"
          },
          "discountAccountingCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "prepaidReservationExpirationDelayinMillisec" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceConfiguration" : {
            "$ref" : "#/components/schemas/InvoiceConfiguration"
          },
          "recognizeRevenue" : {
            "type" : "boolean"
          },
          "gdprConfiguration" : {
            "$ref" : "#/components/schemas/GdprConfiguration"
          },
          "paymentDeferral" : {
            "type" : "boolean"
          },
          "paymentPlan" : {
            "type" : "boolean"
          },
          "rumSequence" : {
            "$ref" : "#/components/schemas/GenericSequence"
          },
          "customerNoSequence" : {
            "$ref" : "#/components/schemas/GenericSequence"
          },
          "cdrDeduplicationKeyEL" : {
            "maxLength" : 500,
            "minLength" : 0,
            "type" : "string"
          },
          "functionalCurrencyFlag" : {
            "type" : "boolean"
          },
          "activateCascadingDiscounts" : {
            "type" : "boolean"
          },
          "portalMessage" : {
            "maxLength" : 500,
            "minLength" : 0,
            "type" : "string"
          },
          "orderLineTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CREATE", "AMEND", "TERMINATE", "APPLY_ONE_SHOT" ]
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "invoiceConfigurationOrDefault" : {
            "$ref" : "#/components/schemas/InvoiceConfiguration"
          },
          "gdprConfigurationNullSafe" : {
            "$ref" : "#/components/schemas/GdprConfiguration"
          },
          "currentProvider" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ProviderContact" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "firstName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "email" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "phone" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "mobile" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "fax" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "genericMail" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "PurchaseOrder" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "number" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountLevel" : {
            "type" : "string",
            "enum" : [ "SELLER", "CUSTOMER", "CUSTOMER_ACCOUNT", "BILLING_ACCOUNT" ]
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "subscriptions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Subscription"
            }
          },
          "invoices" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "QueryScheduler" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "fileFormat" : {
            "type" : "string"
          },
          "usersToNotify" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "emailsToNotify" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "queryTimer" : {
            "$ref" : "#/components/schemas/QueryTimer"
          },
          "reportQuery" : {
            "$ref" : "#/components/schemas/ReportQuery"
          },
          "jobInstance" : {
            "$ref" : "#/components/schemas/JobInstance"
          },
          "isQueryScheduler" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "QueryTimer" : {
        "required" : [ "everyDayOfMonth", "everyDayOfWeek", "everyHour", "everyMinute", "everyMonth", "everySecond" ],
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "string"
          },
          "month" : {
            "type" : "string"
          },
          "everyMonth" : {
            "type" : "boolean"
          },
          "dayOfMonth" : {
            "type" : "string"
          },
          "everyDayOfMonth" : {
            "type" : "boolean"
          },
          "dayOfWeek" : {
            "type" : "string"
          },
          "everyDayOfWeek" : {
            "type" : "boolean"
          },
          "hour" : {
            "type" : "string"
          },
          "everyHour" : {
            "type" : "boolean"
          },
          "minute" : {
            "type" : "string"
          },
          "everyMinute" : {
            "type" : "boolean"
          },
          "second" : {
            "type" : "string"
          },
          "everySecond" : {
            "type" : "boolean"
          }
        }
      },
      "Quote" : {
        "required" : [ "code", "quoteDate", "status", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalId" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "quoteVersion" : {
            "maxLength" : 10,
            "minLength" : 0,
            "type" : "string"
          },
          "notificationContact" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "quoteDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "requestedCompletionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fulfillmentStartDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "category" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "IN_PROGRESS", "PENDING", "CANCELLED", "APPROVED", "ACCEPTED", "REJECTED" ]
          },
          "statusMessage" : {
            "type" : "string"
          },
          "quoteItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteItem"
            }
          },
          "routedToUserGroup" : {
            "type" : "string"
          },
          "receivedFromApp" : {
            "type" : "string"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          },
          "generatePdf" : {
            "type" : "boolean"
          },
          "virtual" : {
            "type" : "boolean"
          },
          "userAccounts" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAccount"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "QuoteArticleLine" : {
        "required" : [ "accountingArticle", "billableAccount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "quoteProduct" : {
            "$ref" : "#/components/schemas/QuoteProduct"
          },
          "billableAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "quoteLot" : {
            "$ref" : "#/components/schemas/QuoteLot"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "quantity" : {
            "type" : "number"
          },
          "serviceQuantity" : {
            "type" : "number"
          },
          "quotePrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuotePrice"
            }
          },
          "quoteVersion" : {
            "$ref" : "#/components/schemas/QuoteVersion"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "QuoteAttribute" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "parentAttributeValue" : {
            "$ref" : "#/components/schemas/QuoteAttribute"
          },
          "assignedAttributeValue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteAttribute"
            }
          },
          "stringValue" : {
            "type" : "string"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "booleanValue" : {
            "type" : "boolean"
          },
          "quoteProduct" : {
            "$ref" : "#/components/schemas/QuoteProduct"
          },
          "quoteOffer" : {
            "$ref" : "#/components/schemas/QuoteOffer"
          },
          "value" : {
            "type" : "object"
          },
          "realValue" : {
            "type" : "object"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "QuoteItem" : {
        "required" : [ "itemId", "quote", "status", "userAccount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quote" : {
            "$ref" : "#/components/schemas/Quote"
          },
          "itemId" : {
            "type" : "string"
          },
          "quoteItemProductOfferings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteItemProductOffering"
            }
          },
          "source" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "IN_PROGRESS", "PENDING", "CANCELLED", "APPROVED", "ACCEPTED", "REJECTED" ]
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "quoteItemDto" : {
            "type" : "object"
          },
          "mainOffering" : {
            "$ref" : "#/components/schemas/ProductOffering"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "QuoteItemProductOffering" : {
        "required" : [ "itemOrder", "productOffering", "quoteItem" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "object"
          },
          "quoteItem" : {
            "$ref" : "#/components/schemas/QuoteItem"
          },
          "productOffering" : {
            "$ref" : "#/components/schemas/ProductOffering"
          },
          "itemOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "QuoteLot" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "QuoteOffer" : {
        "required" : [ "code", "offerTemplate", "quoteVersion", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "billableAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "quoteVersion" : {
            "$ref" : "#/components/schemas/QuoteVersion"
          },
          "quoteLot" : {
            "$ref" : "#/components/schemas/QuoteLot"
          },
          "quoteProduct" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteProduct"
            }
          },
          "quoteAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteAttribute"
            }
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quotePrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuotePrice"
            }
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "quoteLineType" : {
            "type" : "string",
            "enum" : [ "CREATE", "AMEND", "TERMINATE", "APPLY_ONE_SHOT" ]
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "QuotePrice" : {
        "required" : [ "quoteVersion" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "quoteArticleLine" : {
            "$ref" : "#/components/schemas/QuoteArticleLine"
          },
          "quoteVersion" : {
            "$ref" : "#/components/schemas/QuoteVersion"
          },
          "priceLevelEnum" : {
            "type" : "string",
            "enum" : [ "ORDER", "PRODUCT", "QUOTE", "OFFER" ]
          },
          "priceTypeEnum" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONE_SHOT_SUBSCRIPTION", "ONE_SHOT_TERMINATION", "ONE_SHOT_OTHER", "ONE_SHOT_INVOICING_PLAN", "USAGE", "FIXED_DISCOUNT" ]
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "unitPriceWithoutTax" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithoutTaxWithoutDiscount" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "taxRate" : {
            "type" : "number"
          },
          "priceOverCharged" : {
            "type" : "boolean"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "recurrenceDuration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recurrencePeriodicity" : {
            "type" : "string"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "quoteOffer" : {
            "$ref" : "#/components/schemas/QuoteOffer"
          },
          "quantity" : {
            "type" : "number"
          },
          "discountedQuotePrice" : {
            "$ref" : "#/components/schemas/QuotePrice"
          },
          "uuid" : {
            "type" : "string"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "discountedAmount" : {
            "type" : "number"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pricePlanMatrixVersion" : {
            "$ref" : "#/components/schemas/PricePlanMatrixVersion"
          },
          "pricePlanMatrixLine" : {
            "$ref" : "#/components/schemas/PricePlanMatrixLine"
          },
          "contractItem" : {
            "$ref" : "#/components/schemas/ContractItem"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "QuoteProduct" : {
        "required" : [ "productVersion", "quantity", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "quote" : {
            "$ref" : "#/components/schemas/CpqQuote"
          },
          "quoteVersion" : {
            "$ref" : "#/components/schemas/QuoteVersion"
          },
          "productVersion" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "quantity" : {
            "type" : "number"
          },
          "quoteOffer" : {
            "$ref" : "#/components/schemas/QuoteOffer"
          },
          "quoteAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteAttribute"
            }
          },
          "quoteArticleLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteArticleLine"
            }
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "productActionType" : {
            "type" : "string",
            "enum" : [ "CREATE", "ACTIVATE", "SUSPEND", "TERMINATE", "MODIFY" ]
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "$ref" : "#/components/schemas/SubscriptionTerminationReason"
          },
          "mrr" : {
            "type" : "number"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "QuoteVersion" : {
        "required" : [ "quote", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "quote" : {
            "$ref" : "#/components/schemas/CpqQuote"
          },
          "quoteProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteProduct"
            }
          },
          "quoteVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoicingPlan" : {
            "$ref" : "#/components/schemas/InvoicingPlan"
          },
          "shortDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "quoteOffers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteOffer"
            }
          },
          "quoteArticleLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteArticleLine"
            }
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "xmlFilename" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "pdfFilename" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "comment" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "medias" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Media"
            }
          },
          "quotePrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuotePrice"
            }
          },
          "priceList" : {
            "$ref" : "#/components/schemas/PriceList"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "RatedTransaction" : {
        "required" : [ "billingAccount", "seller", "status", "tax", "taxPercent", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creator" : {
            "type" : "string"
          },
          "wallet" : {
            "$ref" : "#/components/schemas/WalletInstance"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "originBillingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "usageDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "rejectReason" : {
            "maxLength" : 4000,
            "minLength" : 0,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 4000,
            "minLength" : 0,
            "type" : "string"
          },
          "unityDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "unitAmountWithTax" : {
            "type" : "number"
          },
          "unitAmountTax" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "doNotTriggerInvoicing" : {
            "type" : "boolean"
          },
          "parameter1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "parameterExtra" : {
            "maxLength" : 4000,
            "minLength" : 0,
            "type" : "string"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "priceplan" : {
            "$ref" : "#/components/schemas/PricePlanMatrix"
          },
          "edr" : {
            "$ref" : "#/components/schemas/EDR"
          },
          "adjustedRatedTx" : {
            "$ref" : "#/components/schemas/RatedTransaction"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "chargeInstance" : {
            "$ref" : "#/components/schemas/ChargeInstance"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "taxPercent" : {
            "type" : "number"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "invoiceAgregateF" : {
            "$ref" : "#/components/schemas/SubCategoryInvoiceAgregate"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "BILLED", "REJECTED", "RERATED", "CANCELED", "PROCESSED" ]
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "inputQuantity" : {
            "type" : "number"
          },
          "rawAmountWithoutTax" : {
            "type" : "number"
          },
          "rawAmountWithTax" : {
            "type" : "number"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "taxRecalculated" : {
            "type" : "boolean"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "REGULAR", "MINIMUM", "AGGREGATED", "MANUAL" ]
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "invoicingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "orderInfo" : {
            "$ref" : "#/components/schemas/OrderInfo"
          },
          "invoiceLine" : {
            "$ref" : "#/components/schemas/InvoiceLine"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "discountedRatedTransaction" : {
            "type" : "integer",
            "format" : "int64"
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "discountedAmount" : {
            "type" : "number"
          },
          "rulesContract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "originRatedTransaction" : {
            "$ref" : "#/components/schemas/RatedTransaction"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountWithTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountTax" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "businessKey" : {
            "type" : "string"
          },
          "updater" : {
            "type" : "string"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "contractLine" : {
            "$ref" : "#/components/schemas/ContractItem"
          },
          "subscriptionId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "walletId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceSubCategoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "billingAccountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAccountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sellerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxOverriden" : {
            "type" : "boolean"
          },
          "taxClassId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "RecordedInvoice" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "paymentHistories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistory"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "productionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "netToPay" : {
            "type" : "number"
          },
          "transactionalNetToPay" : {
            "type" : "number"
          },
          "recordedInvoiceCatAgregates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecordedInvoiceCatAgregate"
            }
          },
          "paymentScheduleInstanceItem" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstanceItem"
          },
          "dunningDocument" : {
            "$ref" : "#/components/schemas/DunningDocument"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "paymentRequests" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "RecordedInvoiceCatAgregate" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "productionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "netToPay" : {
            "type" : "number"
          },
          "transactionalNetToPay" : {
            "type" : "number"
          },
          "paymentScheduleInstanceItem" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstanceItem"
          },
          "dunningDocument" : {
            "$ref" : "#/components/schemas/DunningDocument"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "paymentRequests" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recordedInvoice" : {
            "$ref" : "#/components/schemas/RecordedInvoice"
          },
          "categoryInvoiceAgregate" : {
            "$ref" : "#/components/schemas/CategoryInvoiceAgregate"
          },
          "subCategoryInvoiceAgregate" : {
            "$ref" : "#/components/schemas/SubCategoryInvoiceAgregate"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "RecurringChargeInstance" : {
        "required" : [ "code", "quantity", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeType" : {
            "maxLength" : 1,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "chargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "currency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "country" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "walletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "prepaidWalletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulatorCounterInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "taxClassResolved" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "recurringChargeTemplate" : {
            "$ref" : "#/components/schemas/RecurringChargeTemplate"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "nextChargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargedToDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "quantity" : {
            "type" : "number"
          },
          "calendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "applyInAdvance" : {
            "type" : "boolean"
          },
          "chargeToDateOnTermination" : {
            "type" : "string",
            "format" : "date-time"
          },
          "anticipateEndOfSubscription" : {
            "type" : "boolean"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "RecurringChargeTemplate" : {
        "required" : [ "code", "disabled", "prorataOnPriceChange", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "chargeType" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "amountEditable" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "edrTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEDRTemplate"
            }
          },
          "inputUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "inputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "outputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRule" : {
            "$ref" : "#/components/schemas/RevenueRecognitionRule"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "taxClassEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "dropZeroWo" : {
            "type" : "boolean"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            }
          },
          "pricePlans" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrix"
            }
          },
          "roundingValuesComputed" : {
            "type" : "boolean"
          },
          "roundingUnityNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "roundingEdrNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "internalNote" : {
            "type" : "string"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter1Description" : {
            "type" : "string"
          },
          "parameter2Description" : {
            "type" : "string"
          },
          "parameter3Description" : {
            "type" : "string"
          },
          "parameterExtraDescription" : {
            "type" : "string"
          },
          "parameter1Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean"
          },
          "parameter1IsHidden" : {
            "type" : "boolean"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean"
          },
          "parameter2IsHidden" : {
            "type" : "boolean"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean"
          },
          "parameter3IsHidden" : {
            "type" : "boolean"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean"
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "businessKeyDescription" : {
            "type" : "string"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean"
          },
          "quantityAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean"
          },
          "recurrenceType" : {
            "type" : "string",
            "enum" : [ "CALENDAR", "PERIOD" ]
          },
          "calendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "durationTermInMonth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subscriptionProrata" : {
            "type" : "boolean"
          },
          "terminationProrata" : {
            "type" : "boolean"
          },
          "prorataOnPriceChange" : {
            "type" : "boolean"
          },
          "applyInAdvance" : {
            "type" : "boolean"
          },
          "shareLevel" : {
            "type" : "string",
            "enum" : [ "PROVIDER", "SELLER", "CUSTOMER", "CUSTOMER_ACCOUNT", "BILLING_ACCOUNT", "USER_ACCOUNT" ]
          },
          "subscriptionProrataEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "terminationProrataEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "applyInAdvanceEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "durationTermInMonthEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "calendarCodeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "applyTerminatedChargeToDateEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributeDuration" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "attributeCalendar" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "anticipateEndOfSubscription" : {
            "type" : "boolean"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "Refund" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "refundedPayment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "RegistrationNumber" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "registrationNo" : {
            "type" : "string"
          },
          "isoIcd" : {
            "$ref" : "#/components/schemas/IsoIcd"
          },
          "accountEntity" : {
            "$ref" : "#/components/schemas/AccountEntity"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "RejectedBillingAccount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "rejectCause" : {
            "maxLength" : 3000,
            "minLength" : 0,
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "RejectedPayment" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "operationAction" : {
            "type" : "string",
            "enum" : [ "TO_REFUND", "NONE" ]
          },
          "reference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "accountCodeClientSide" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "unMatchingAmount" : {
            "type" : "number"
          },
          "transactionalAmount" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalTaxAmount" : {
            "type" : "number"
          },
          "transactionalMatchingAmount" : {
            "type" : "number"
          },
          "transactionalUnMatchingAmount" : {
            "type" : "number"
          },
          "transactionalCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          },
          "matchingAmounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MatchingAmount"
            }
          },
          "orderNumber" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "bankReference" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "paymentInfo" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo5" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentInfo6" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "billingAccountName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "ddRequestItem" : {
            "$ref" : "#/components/schemas/DDRequestItem"
          },
          "rejectedPayment" : {
            "$ref" : "#/components/schemas/RejectedPayment"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "paymentVentilation" : {
            "$ref" : "#/components/schemas/PaymentVentilation"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "paymentHistories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistory"
            }
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "journal" : {
            "$ref" : "#/components/schemas/Journal"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "REJECTED", "FORCED", "CLOSED_PERIOD" ]
          },
          "paymentAction" : {
            "type" : "string",
            "enum" : [ "PENDING_PAYMENT" ]
          },
          "paymentDeferralCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountingExportFile" : {
            "type" : "string"
          },
          "accountingSchemeEntries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalEntry"
            }
          },
          "operationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "appliedRate" : {
            "type" : "number"
          },
          "appliedRateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountForUnmatching" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "errorDetail" : {
            "type" : "string"
          },
          "litigationReason" : {
            "type" : "string"
          },
          "sourceAccountOperation" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originCallPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "originPayment" : {
            "$ref" : "#/components/schemas/AccountOperation"
          },
          "excludeFromDefaultBalance" : {
            "type" : "boolean"
          },
          "rejectedType" : {
            "type" : "string",
            "enum" : [ "AUTOMATIC", "MANUAL" ]
          },
          "rejectedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "rejectedDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "rejectedCode" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "listAaccountOperationSupposedPaid" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperation"
            }
          },
          "rejectionActionsStatus" : {
            "type" : "string",
            "enum" : [ "PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELED", "NO_ACTION" ]
          },
          "paymentRejectionActionReports" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentRejectionActionReport"
            }
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/PaymentGateway"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ReportQuery" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "targetEntity" : {
            "type" : "string"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE", "PROTECTED" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "generatedQuery" : {
            "type" : "string"
          },
          "sortBy" : {
            "type" : "string"
          },
          "sortOrder" : {
            "type" : "string",
            "enum" : [ "DESCENDING", "ASCENDING" ]
          },
          "queryParameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "aliases" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "advancedQuery" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "RevenueRecognitionRule" : {
        "required" : [ "code", "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "startDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startUnit" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionDelayUnitEnum.MONTH", "revenueRecognitionDelayUnitEnum.DAY" ]
          },
          "startEvent" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionEvent.SUBSCRIPTION_START", "revenueRecognitionEvent.SUBSCRIPTION_STOP", "revenueRecognitionEvent.INVOICE_DATE", "revenueRecognitionEvent.INVOICE_DUE_DATE", "revenueRecognitionEvent.SERVICE_PERIOD_START", "revenueRecognitionEvent.SERVICE_PERIOD_STOP" ]
          },
          "stopDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stopUnit" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionDelayUnitEnum.MONTH", "revenueRecognitionDelayUnitEnum.DAY" ]
          },
          "stopEvent" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionEvent.SUBSCRIPTION_START", "revenueRecognitionEvent.SUBSCRIPTION_STOP", "revenueRecognitionEvent.INVOICE_DATE", "revenueRecognitionEvent.INVOICE_DUE_DATE", "revenueRecognitionEvent.SERVICE_PERIOD_START", "revenueRecognitionEvent.SERVICE_PERIOD_STOP" ]
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Role" : {
        "required" : [ "name", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "clientRole" : {
            "type" : "boolean"
          },
          "parentRole" : {
            "$ref" : "#/components/schemas/Role"
          },
          "roles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "replicateInKc" : {
            "type" : "boolean"
          },
          "descriptionOrName" : {
            "type" : "string"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ScriptInstance" : {
        "required" : [ "code", "disabled", "error" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "script" : {
            "type" : "string"
          },
          "sourceTypeEnum" : {
            "type" : "string",
            "enum" : [ "JAVA", "JAVA_CLASS" ]
          },
          "scriptErrors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ScriptInstanceError"
            }
          },
          "error" : {
            "type" : "boolean"
          },
          "scriptInstanceCategory" : {
            "$ref" : "#/components/schemas/ScriptInstanceCategory"
          },
          "executionRoles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sourcingRoles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "scriptParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ScriptParameter"
            }
          },
          "pool" : {
            "$ref" : "#/components/schemas/ScriptPool"
          },
          "usePool" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ScriptInstanceCategory" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ScriptInstanceError" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "lineNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "columnNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sourceFile" : {
            "type" : "string"
          }
        }
      },
      "ScriptParameter" : {
        "required" : [ "className", "scriptInstance" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "className" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "defaultValue" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "allowedValues" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "valuesSeparator" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "collection" : {
            "type" : "boolean"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ScriptPool" : {
        "type" : "object",
        "properties" : {
          "usePool" : {
            "type" : "boolean"
          },
          "min" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxIdleTime" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Seller" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "defaultLevel" : {
            "type" : "boolean"
          },
          "providerContact" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModel"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "vatStatus" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "VALID", "INVALID" ]
          },
          "registrationNo" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "legalText" : {
            "type" : "string"
          },
          "legalType" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "invoiceTypeSequence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceTypeSellerSequence"
            }
          },
          "customerSequences" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerSequence"
            }
          },
          "paymentGateways" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentGateway"
            }
          },
          "generalLedger" : {
            "$ref" : "#/components/schemas/GeneralLedger"
          },
          "contracts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contract"
            }
          },
          "medias" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Media"
            }
          },
          "registrationNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumber"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "accountType" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ServiceCharge" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "serviceSubscriptionCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateSubscription"
            }
          },
          "serviceUsageCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateUsage"
            }
          },
          "serviceRecurringCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateRecurring"
            }
          },
          "serviceTerminationCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateTermination"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "ServiceChargeTemplateRecurring" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/RecurringChargeTemplate"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplate"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplate"
            }
          },
          "accumulatorCounterTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterTemplate"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ServiceChargeTemplateSubscription" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplate"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplate"
            }
          },
          "accumulatorCounterTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterTemplate"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ServiceChargeTemplateTermination" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplate"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplate"
            }
          },
          "accumulatorCounterTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterTemplate"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ServiceChargeTemplateUsage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplate"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/UsageChargeTemplate"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplate"
          },
          "walletTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplate"
            }
          },
          "accumulatorCounterTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterTemplate"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "ServiceInstance" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ServiceTemplate" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "serviceRecurringCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateRecurring"
            }
          },
          "serviceSubscriptionCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateSubscription"
            }
          },
          "serviceTerminationCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateTermination"
            }
          },
          "serviceUsageCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateUsage"
            }
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "businessServiceModel" : {
            "$ref" : "#/components/schemas/BusinessServiceModel"
          },
          "longDescription" : {
            "type" : "string"
          },
          "imagePath" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumInvoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "serviceRenewal" : {
            "$ref" : "#/components/schemas/SubscriptionRenewal"
          },
          "selected" : {
            "type" : "boolean"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "instantiatedFromBSM" : {
            "type" : "boolean"
          },
          "descriptionOverride" : {
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "StripePaymentMethod" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "alias" : {
            "type" : "string"
          },
          "preferred" : {
            "type" : "boolean"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "userId" : {
            "type" : "string"
          },
          "info1" : {
            "type" : "string"
          },
          "info2" : {
            "type" : "string"
          },
          "info3" : {
            "type" : "string"
          },
          "info4" : {
            "type" : "string"
          },
          "info5" : {
            "type" : "string"
          },
          "tokenId" : {
            "type" : "string"
          },
          "token3DsId" : {
            "type" : "string"
          },
          "referenceDocument" : {
            "$ref" : "#/components/schemas/Document"
          },
          "paymentMeans" : {
            "$ref" : "#/components/schemas/UntdidPaymentMeans"
          },
          "mandateChangeAction" : {
            "type" : "string",
            "enum" : [ "NONE", "TO_ADVERTISE", "ADVERTISED" ]
          },
          "action" : {
            "type" : "string"
          },
          "expired" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "SubCategoryInvoiceAgregate" : {
        "required" : [ "discountAggregate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "billingRun" : {
            "$ref" : "#/components/schemas/BillingRun"
          },
          "itemNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "tradingCountry" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "tradingLanguage" : {
            "$ref" : "#/components/schemas/TradingLanguage"
          },
          "prDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "conversionFromBillingCurrency" : {
            "type" : "boolean"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "categoryInvoiceAgregate" : {
            "$ref" : "#/components/schemas/CategoryInvoiceAgregate"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "wallet" : {
            "$ref" : "#/components/schemas/WalletInstance"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "discountPlanCode" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "discountPlanItemCode" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "discountPercent" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "discount" : {
            "type" : "number"
          },
          "discountAggregate" : {
            "type" : "boolean"
          },
          "oldAmountWithoutTax" : {
            "type" : "number"
          },
          "oldAmountWithTax" : {
            "type" : "number"
          },
          "invoiceablesToAssociate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IInvoiceable"
            }
          },
          "amountsByTax" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SubcategoryInvoiceAgregateAmount"
            }
          },
          "ilIDs" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "amountByTaxAsList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Amounts"
            }
          },
          "categoryAggKey" : {
            "type" : "string"
          },
          "descriminatorValue" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "SubcategoryInvoiceAgregateAmount" : {
        "type" : "object",
        "properties" : {
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          }
        }
      },
      "Subscription" : {
        "type" : "object",
        "properties" : {
          "seller" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "code" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "endAgreementDate" : {
            "type" : "string"
          },
          "serviceInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceInstance"
            }
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SubscriptionAmount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "amount" : {
            "type" : "number"
          },
          "billingRunReport" : {
            "$ref" : "#/components/schemas/BillingRunReport"
          },
          "ratedTransactionCount" : {
            "type" : "number"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "SubscriptionChargeInstance" : {
        "required" : [ "code", "quantity", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeType" : {
            "maxLength" : 1,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "chargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "currency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "country" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "walletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "prepaidWalletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulatorCounterInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "taxClassResolved" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "quantity" : {
            "type" : "number"
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "SubscriptionRenewal" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "autoRenew" : {
            "type" : "boolean"
          },
          "autoRenewDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "daysNotifyRenewal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "endOfTermAction" : {
            "type" : "string",
            "enum" : [ "SUSPEND", "TERMINATE" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "applyAgreement" : {
            "type" : "boolean"
          },
          "invoiceAgreementImmediately" : {
            "type" : "boolean"
          },
          "applyReimbursment" : {
            "type" : "boolean"
          },
          "applyTerminationCharges" : {
            "type" : "boolean"
          },
          "overrideProrata" : {
            "type" : "string",
            "enum" : [ "NO_OVERRIDE", "PRORATA", "NO_PRORATA" ]
          },
          "reimburseOneshots" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "initialyActiveForUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY" ]
          },
          "initialyActiveFor" : {
            "type" : "integer",
            "format" : "int32"
          },
          "calendarInitialyActiveFor" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "extendAgreementPeriodToSubscribedTillDate" : {
            "type" : "boolean"
          },
          "renewForUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY" ]
          },
          "renewFor" : {
            "type" : "integer",
            "format" : "int32"
          },
          "calendarRenewFor" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "initialTermType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "CALENDAR", "FIXED" ]
          },
          "renewalTermType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "CALENDAR" ]
          }
        }
      },
      "SubscriptionTerminationReason" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "applyAgreement" : {
            "type" : "boolean"
          },
          "invoiceAgreementImmediately" : {
            "type" : "boolean"
          },
          "applyReimbursment" : {
            "type" : "boolean"
          },
          "applyTerminationCharges" : {
            "type" : "boolean"
          },
          "overrideProrata" : {
            "type" : "string",
            "enum" : [ "NO_OVERRIDE", "PRORATA", "NO_PRORATA" ]
          },
          "reimburseOneshots" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Tag" : {
        "required" : [ "code", "name", "tagType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "name" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "tagType" : {
            "$ref" : "#/components/schemas/TagType"
          },
          "parentTag" : {
            "$ref" : "#/components/schemas/Tag"
          },
          "filterEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TagType" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Tax" : {
        "required" : [ "code", "percent", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "percent" : {
            "type" : "number"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "composite" : {
            "type" : "boolean"
          },
          "mainTaxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tax"
            }
          },
          "subTaxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tax"
            }
          },
          "untdidTaxationCategory" : {
            "$ref" : "#/components/schemas/UntdidTaxationCategory"
          },
          "untdidVatex" : {
            "$ref" : "#/components/schemas/UntdidVatex"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "idOrCode" : {
            "type" : "string"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "TaxCategory" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "untdidTaxationCategory" : {
            "$ref" : "#/components/schemas/UntdidTaxationCategory"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "TaxClass" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "TerminationChargeInstance" : {
        "required" : [ "code", "quantity", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeType" : {
            "maxLength" : 1,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "chargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "currency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "country" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "walletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "prepaidWalletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulatorCounterInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "taxClassResolved" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "quantity" : {
            "type" : "number"
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "TimerEntity" : {
        "required" : [ "code", "dayOfMonth", "dayOfWeek", "disabled", "hour", "minute", "month", "second", "year" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "year" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "month" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "dayOfMonth" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "dayOfWeek" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "hour" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "minute" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "second" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "start" : {
            "type" : "string",
            "format" : "date-time"
          },
          "end" : {
            "type" : "string",
            "format" : "date-time"
          },
          "jobInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobInstance"
            }
          },
          "timerSchedule" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "Title" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "descriptionNotNull" : {
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TradingContractItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "tradingValue" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "rate" : {
            "type" : "number"
          },
          "contractItem" : {
            "$ref" : "#/components/schemas/ContractItem"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TradingCountry" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "countryCode" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "TradingCurrency" : {
        "required" : [ "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "disabled" : {
            "type" : "boolean"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "prDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "prCurrencyToThis" : {
            "type" : "number"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "symbol" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentRate" : {
            "type" : "number"
          },
          "currentRateFromDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "currentRateUpdater" : {
            "type" : "string"
          },
          "exchangeRates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExchangeRate"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TradingDiscountPlanItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "tradingDiscountValue" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "rate" : {
            "type" : "number"
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TradingLanguage" : {
        "required" : [ "disabled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "disabled" : {
            "type" : "boolean"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "prDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "languageCode" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TradingPricePlanMatrixLine" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "tradingValue" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "rate" : {
            "type" : "number"
          },
          "useForBillingAccounts" : {
            "type" : "boolean"
          },
          "pricePlanMatrixLine" : {
            "$ref" : "#/components/schemas/PricePlanMatrixLine"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TradingPricePlanVersion" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "tradingPrice" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "rate" : {
            "type" : "number"
          },
          "useForBillingAccounts" : {
            "type" : "boolean"
          },
          "pricePlanMatrixVersion" : {
            "$ref" : "#/components/schemas/PricePlanMatrixVersion"
          },
          "tradingPriceEl" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "TriggeredEDRTemplate" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "subscriptionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "meveoInstance" : {
            "$ref" : "#/components/schemas/MeveoInstance"
          },
          "conditionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "quantityEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "param1El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "param2El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "param3El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "param4El" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "opencellInstanceEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "triggeredEdrScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "UnitOfMeasure" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "symbol" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "multiplicator" : {
            "type" : "integer",
            "format" : "int64"
          },
          "parentUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "baseUnit" : {
            "type" : "boolean"
          },
          "descriptionNotNull" : {
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "UntdidAllowanceCode" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UntdidInvoiceCodeType" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "code" : {
            "type" : "string"
          },
          "interpretation16931" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UntdidPaymentMeans" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "code" : {
            "type" : "string"
          },
          "codeName" : {
            "type" : "string"
          },
          "usageEN16931" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UntdidTaxationCategory" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "code" : {
            "type" : "string"
          },
          "semanticModel" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UntdidVatPaymentOption" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value2475" : {
            "type" : "string"
          },
          "code2005" : {
            "type" : "string"
          },
          "value2005" : {
            "type" : "string"
          },
          "code2475" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UntdidVatex" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "remark" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "codeName" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UrlReferenceWrapper" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "regexp" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "length" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "UsageChargeInstance" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "chargeType" : {
            "maxLength" : 1,
            "minLength" : 0,
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reactivationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplate"
          },
          "invoicingCalendar" : {
            "$ref" : "#/components/schemas/Calendar"
          },
          "chargeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "criteria1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "criteria3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "currency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "country" : {
            "$ref" : "#/components/schemas/TradingCountry"
          },
          "walletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "prepaidWalletInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "accumulatorCounterInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "taxClassResolved" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "ratingUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "usageChargeTemplate" : {
            "$ref" : "#/components/schemas/UsageChargeTemplate"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "walletOperationsSorted" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperation"
            }
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "UsageChargeTemplate" : {
        "required" : [ "code", "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "chargeType" : {
            "maxLength" : 5,
            "minLength" : 0,
            "type" : "string"
          },
          "amountEditable" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "edrTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEDRTemplate"
            }
          },
          "inputUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "inputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "outputUnitEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRule" : {
            "$ref" : "#/components/schemas/RevenueRecognitionRule"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "taxClassEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingScript" : {
            "$ref" : "#/components/schemas/ScriptInstance"
          },
          "dropZeroWo" : {
            "type" : "boolean"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "roundingValuesComputed" : {
            "type" : "boolean"
          },
          "roundingUnityNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "roundingEdrNbDecimal" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "internalNote" : {
            "type" : "string"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter1Description" : {
            "type" : "string"
          },
          "parameter2Description" : {
            "type" : "string"
          },
          "parameter3Description" : {
            "type" : "string"
          },
          "parameterExtraDescription" : {
            "type" : "string"
          },
          "parameter1Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3Format" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean"
          },
          "parameter1IsHidden" : {
            "type" : "boolean"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean"
          },
          "parameter2IsHidden" : {
            "type" : "boolean"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean"
          },
          "parameter3IsHidden" : {
            "type" : "boolean"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean"
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "businessKeyDescription" : {
            "type" : "string"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean"
          },
          "quantityAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean"
          },
          "filterParam1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "filterParam2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "filterParam3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "filterParam4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "triggerNextCharge" : {
            "type" : "boolean"
          },
          "triggerNextChargeEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "usageQuantityAttribute" : {
            "$ref" : "#/components/schemas/Attribute"
          },
          "chargeMainType" : {
            "type" : "string",
            "enum" : [ "RECURRING", "ONESHOT", "USAGE", "PRODUCT" ]
          },
          "priorityChanged" : {
            "type" : "boolean"
          },
          "descriptionI18nNullSafe" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "User" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameInfo"
          },
          "userName" : {
            "maxLength" : 50,
            "minLength" : 3,
            "type" : "string"
          },
          "email" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "rolesByClient" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "userRoles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "userLevel" : {
            "type" : "string"
          },
          "attributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "roles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "realmLevelRoles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "clientLevelRoles" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "nameOrUsername" : {
            "type" : "string"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        },
        "description" : "Users to notify"
      },
      "UserAccount" : {
        "required" : [ "code", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalRef2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "defaultLevel" : {
            "type" : "boolean"
          },
          "providerContact" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "primaryContact" : {
            "$ref" : "#/components/schemas/ProviderContact"
          },
          "businessAccountModel" : {
            "$ref" : "#/components/schemas/BusinessAccountModel"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "vatNo" : {
            "type" : "string"
          },
          "vatStatus" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "VALID", "INVALID" ]
          },
          "registrationNo" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumLabelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplate"
          },
          "minimumArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "isCompany" : {
            "type" : "boolean"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/Title"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CANCELED", "TERMINATED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "parentUserAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "userAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserAccount"
            }
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "subscriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Subscription"
            }
          },
          "wallet" : {
            "$ref" : "#/components/schemas/WalletInstance"
          },
          "prepaidWallets" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/WalletInstance"
            }
          },
          "counters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CounterInstance"
            }
          },
          "terminationReason" : {
            "$ref" : "#/components/schemas/SubscriptionTerminationReason"
          },
          "isConsumer" : {
            "type" : "boolean"
          },
          "registrationNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegistrationNumber"
            }
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "contactInformationNullSafe" : {
            "$ref" : "#/components/schemas/ContactInformation"
          },
          "accountType" : {
            "type" : "string"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "WFAction" : {
        "required" : [ "actionEl", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "actionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "conditionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "wfTransition" : {
            "$ref" : "#/components/schemas/WFTransition"
          },
          "userGroupCode" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "WFDecisionRule" : {
        "required" : [ "conditionEl", "name", "type", "value" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "value" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "STRING", "DATE", "NUMBER", "RANGE_STRING", "RANGE_DATE", "RANGE_NUMBER" ]
          },
          "conditionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "model" : {
            "type" : "boolean"
          },
          "wfTransitions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WFTransition"
            }
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "WFTransition" : {
        "required" : [ "description", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "fromStatus" : {
            "type" : "string"
          },
          "toStatus" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "workflow" : {
            "$ref" : "#/components/schemas/Workflow"
          },
          "wfDecisionRules" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WFDecisionRule"
            }
          },
          "wfActions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WFAction"
            }
          },
          "conditionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "combinedEl" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "WalletInstance" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "walletTemplate" : {
            "$ref" : "#/components/schemas/WalletTemplate"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "creditExpiryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "nextMatchingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lowBalanceLevel" : {
            "type" : "number"
          },
          "rejectLevel" : {
            "type" : "number"
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperation"
            }
          },
          "ratedTransactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RatedTransaction"
            }
          },
          "prepaid" : {
            "type" : "boolean"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "WalletOperation" : {
        "required" : [ "billingAccount", "quantity", "tax", "taxPercent", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "wallet" : {
            "$ref" : "#/components/schemas/WalletInstance"
          },
          "oldWallet" : {
            "$ref" : "#/components/schemas/WalletInstance"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoicingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "chargeInstance" : {
            "$ref" : "#/components/schemas/ChargeInstance"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "taxPercent" : {
            "type" : "number"
          },
          "taxClass" : {
            "$ref" : "#/components/schemas/TaxClass"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "unitAmountWithTax" : {
            "type" : "number"
          },
          "unitAmountTax" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "counter" : {
            "$ref" : "#/components/schemas/CounterInstance"
          },
          "parameter1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameter3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "parameterExtra" : {
            "maxLength" : 4000,
            "minLength" : 0,
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "offerCode" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "priceplan" : {
            "$ref" : "#/components/schemas/PricePlanMatrix"
          },
          "reratedWalletOperation" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "refundsWalletOperation" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "inputUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "inputUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "ratingUnitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasure"
          },
          "inputQuantity" : {
            "type" : "number"
          },
          "edr" : {
            "$ref" : "#/components/schemas/EDR"
          },
          "orderNumber" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "rawAmountWithoutTax" : {
            "type" : "number"
          },
          "rawAmountWithTax" : {
            "type" : "number"
          },
          "invoiceSubCategory" : {
            "$ref" : "#/components/schemas/InvoiceSubCategory"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Subscription"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstance"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccount"
          },
          "userAccount" : {
            "$ref" : "#/components/schemas/UserAccount"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplate"
          },
          "ratedTransaction" : {
            "$ref" : "#/components/schemas/RatedTransaction"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "TREATED", "CANCELED", "RESERVED", "F_TO_RERATE", "TO_RERATE", "RERATED", "SCHEDULED", "REJECTED" ]
          },
          "accountingCode" : {
            "$ref" : "#/components/schemas/AccountingCode"
          },
          "fullRatingPeriod" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "chargeMode" : {
            "type" : "string",
            "enum" : [ "ChargeApplicationModeEnum.SUBSCRIPTION", "ChargeApplicationModeEnum.AGREEMENT", "ChargeApplicationModeEnum.REIMBURSMENT", "ChargeApplicationModeEnum.RERATING", "ChargeApplicationModeEnum.RERATING_REIMBURSEMENT" ]
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rejectReason" : {
            "type" : "string"
          },
          "orderInfo" : {
            "$ref" : "#/components/schemas/OrderInfo"
          },
          "accountingArticle" : {
            "$ref" : "#/components/schemas/AccountingArticle"
          },
          "discountedWalletOperation" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlan"
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItem"
          },
          "discountedAmount" : {
            "type" : "number"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "overrodePrice" : {
            "type" : "boolean"
          },
          "rulesContract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "pricePlanMatrixVersion" : {
            "$ref" : "#/components/schemas/PricePlanMatrixVersion"
          },
          "pricePlanMatrixLine" : {
            "$ref" : "#/components/schemas/PricePlanMatrixLine"
          },
          "contract" : {
            "$ref" : "#/components/schemas/Contract"
          },
          "contractLine" : {
            "$ref" : "#/components/schemas/ContractItem"
          },
          "useSpecificPriceConversion" : {
            "type" : "boolean"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountWithTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountTax" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrency"
          },
          "priceListLine" : {
            "$ref" : "#/components/schemas/PriceListLine"
          },
          "creator" : {
            "type" : "string"
          },
          "updater" : {
            "type" : "string"
          },
          "businessKey" : {
            "type" : "string"
          },
          "reratingBatch" : {
            "$ref" : "#/components/schemas/BatchEntity"
          },
          "rerateFromInvoice" : {
            "type" : "boolean"
          },
          "clone" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "unratedClone" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "applyInAdvance" : {
            "type" : "boolean"
          },
          "discountedWO" : {
            "$ref" : "#/components/schemas/WalletOperation"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "WalletOperationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "accountingArticleCode" : {
            "type" : "string"
          },
          "accountingArticleLabel" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "userAccount" : {
            "type" : "string"
          },
          "subscription" : {
            "type" : "string"
          },
          "walletTemplate" : {
            "type" : "string"
          },
          "seller" : {
            "type" : "string"
          },
          "chargeInstance" : {
            "type" : "string"
          },
          "chargeInstanceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currency" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "TREATED", "CANCELED", "RESERVED", "F_TO_RERATE", "TO_RERATE", "RERATED", "SCHEDULED", "REJECTED" ]
          },
          "ratingUnitDescription" : {
            "type" : "string"
          },
          "pricePlanCode" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "taxPercent" : {
            "type" : "number"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "unitAmountWithTax" : {
            "type" : "number"
          },
          "unitAmountTax" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "parameterExtra" : {
            "type" : "string"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "offerCode" : {
            "type" : "string"
          },
          "rawAmountWithoutTax" : {
            "type" : "number"
          },
          "rawAmountWithTax" : {
            "type" : "number"
          },
          "ratedTransaction" : {
            "$ref" : "#/components/schemas/WoRatedTransactionDto"
          },
          "walletId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "taxClassCode" : {
            "type" : "string"
          },
          "sortIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "transactionalUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountWithTax" : {
            "type" : "number"
          },
          "transactionalUnitAmountTax" : {
            "type" : "number"
          },
          "transactionalAmountWithoutTax" : {
            "type" : "number"
          },
          "transactionalAmountWithTax" : {
            "type" : "number"
          },
          "transactionalAmountTax" : {
            "type" : "number"
          },
          "businessKey" : {
            "type" : "string"
          },
          "orderInfo" : {
            "$ref" : "#/components/schemas/OrderInfo"
          }
        },
        "xml" : {
          "name" : "WalletOperation"
        }
      },
      "WalletTemplate" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "walletType" : {
            "type" : "string",
            "enum" : [ "POSTPAID", "PREPAID" ]
          },
          "consumptionAlertSet" : {
            "type" : "boolean"
          },
          "fastRatingLevel" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lowBalanceLevel" : {
            "type" : "number"
          },
          "rejectLevel" : {
            "type" : "number"
          },
          "lowBalanceLevelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "rejectLevelEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "WirePaymentMethod" : {
        "required" : [ "disabled", "uuid" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "uuid" : {
            "maxLength" : 60,
            "minLength" : 0,
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "alias" : {
            "type" : "string"
          },
          "preferred" : {
            "type" : "boolean"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "userId" : {
            "type" : "string"
          },
          "info1" : {
            "type" : "string"
          },
          "info2" : {
            "type" : "string"
          },
          "info3" : {
            "type" : "string"
          },
          "info4" : {
            "type" : "string"
          },
          "info5" : {
            "type" : "string"
          },
          "tokenId" : {
            "type" : "string"
          },
          "token3DsId" : {
            "type" : "string"
          },
          "referenceDocument" : {
            "$ref" : "#/components/schemas/Document"
          },
          "paymentMeans" : {
            "$ref" : "#/components/schemas/UntdidPaymentMeans"
          },
          "mandateChangeAction" : {
            "type" : "string",
            "enum" : [ "NONE", "TO_ADVERTISE", "ADVERTISED" ]
          },
          "action" : {
            "type" : "string"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinates"
          },
          "mandateIdentification" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "mandateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expired" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "cfValuesNullSafe" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "parentCFEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICustomFieldEntity"
            }
          },
          "cfValuesAsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dirtyCF" : {
            "type" : "boolean"
          },
          "cfvaluesCopy" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          },
          "transient" : {
            "type" : "boolean"
          },
          "cfValues" : {
            "$ref" : "#/components/schemas/CustomFieldValues"
          }
        }
      },
      "WoRatedTransactionDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "BILLED", "REJECTED", "RERATED", "CANCELED", "PROCESSED" ]
          }
        },
        "xml" : {
          "name" : "ratedTransaction"
        }
      },
      "Workflow" : {
        "required" : [ "code", "disabled", "wfType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditable" : {
            "$ref" : "#/components/schemas/Auditable"
          },
          "historized" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          },
          "auditableFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditableFieldHistory"
            }
          },
          "code" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "appendGeneratedCode" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "wfType" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "transitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WFTransition"
            }
          },
          "enableHistory" : {
            "type" : "boolean"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentEntity" : {
            "$ref" : "#/components/schemas/BusinessEntity"
          },
          "descriptionOrCode" : {
            "type" : "string"
          },
          "descriptionAndCode" : {
            "type" : "string"
          },
          "codeChanged" : {
            "type" : "boolean"
          },
          "referenceCode" : {
            "type" : "string"
          },
          "referenceDescription" : {
            "type" : "string"
          },
          "transient" : {
            "type" : "boolean"
          }
        }
      },
      "CdrDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quantity" : {
            "type" : "number"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "parameter4" : {
            "type" : "string"
          },
          "parameter5" : {
            "type" : "string"
          },
          "parameter6" : {
            "type" : "string"
          },
          "parameter7" : {
            "type" : "string"
          },
          "parameter8" : {
            "type" : "string"
          },
          "parameter9" : {
            "type" : "string"
          },
          "dateParam1" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam2" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam3" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam4" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam5" : {
            "type" : "string",
            "format" : "date-time"
          },
          "decimalParam1" : {
            "type" : "number"
          },
          "decimalParam2" : {
            "type" : "number"
          },
          "decimalParam3" : {
            "type" : "number"
          },
          "decimalParam4" : {
            "type" : "number"
          },
          "decimalParam5" : {
            "type" : "number"
          },
          "accessCode" : {
            "type" : "string"
          },
          "headerEDRId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "extraParam" : {
            "type" : "string"
          },
          "rejectReason" : {
            "type" : "string"
          }
        }
      },
      "CdrListDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "cdr" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ipAddress" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "CdrList"
        }
      },
      "ProcessCDRResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "listProcessCdrDto" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProcessCdrDto"
            }
          }
        },
        "xml" : {
          "name" : "ProcessCDRResponseDto"
        }
      },
      "ProcessCdrDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "cdrId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "PROCESSED", "CLOSED", "DISCARDED", "ERROR", "TO_REPROCESS" ]
          },
          "rejectReason" : {
            "type" : "string"
          },
          "edrId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "CdrReservationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "availableQuantity" : {
            "type" : "number",
            "format" : "double"
          },
          "reservationId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "CdrReservationResponse"
        }
      },
      "AccountLevel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PurchaseOrderDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "number" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "accountLevel" : {
            "type" : "string",
            "enum" : [ "SELLER", "CUSTOMER", "CUSTOMER_ACCOUNT", "BILLING_ACCOUNT" ]
          },
          "seller" : {
            "$ref" : "#/components/schemas/AccountLevel"
          },
          "customer" : {
            "$ref" : "#/components/schemas/AccountLevel"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/AccountLevel"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/AccountLevel"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "RatedTransactionListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "ratedTransactions" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RatedTransactionDto"
            }
          }
        },
        "xml" : {
          "name" : "RatedTransactionListResponse"
        }
      },
      "ActivateSubscriptionRequestDto" : {
        "required" : [ "subscriptionCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ActivateSubscriptionRequest"
        }
      },
      "SubscriptionForCustomerResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "subscriptionEndDate" : {
            "type" : "string"
          }
        }
      },
      "SubscriptionForCustomerRequestDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscriptionClientId" : {
            "type" : "string"
          }
        }
      },
      "ActivateServicesRequestDto" : {
        "required" : [ "subscription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscription" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "servicesToActivateDto" : {
            "$ref" : "#/components/schemas/ServicesToActivateDto"
          }
        },
        "xml" : {
          "name" : "ActivateServicesRequest"
        }
      },
      "ChargeInstanceOverrideDto" : {
        "type" : "object",
        "properties" : {
          "chargeInstanceCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "ChargeInstanceOverridesDto" : {
        "type" : "object",
        "properties" : {
          "chargeInstanceOverride" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChargeInstanceOverrideDto"
            }
          }
        }
      },
      "ServiceToActivateDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "overrideCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "quantity" : {
            "type" : "number"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeInstanceOverrides" : {
            "$ref" : "#/components/schemas/ChargeInstanceOverridesDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "rateUntilDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountPS" : {
            "type" : "number"
          },
          "calendarPSCode" : {
            "type" : "string"
          },
          "paymentDayInMonthPS" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "type" : "string"
          },
          "subscribedTillDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "serviceRenewal" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          }
        },
        "xml" : {
          "name" : "ServiceToActivate"
        }
      },
      "ServicesToActivateDto" : {
        "required" : [ "service" ],
        "type" : "object",
        "properties" : {
          "service" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceToActivateDto"
            }
          }
        },
        "xml" : {
          "name" : "ServicesToActivate"
        }
      },
      "ApplyOneShotChargeInstanceRequestDto" : {
        "required" : [ "oneShotCharge", "operationDate", "subscription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "oneShotCharge" : {
            "type" : "string"
          },
          "subscription" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "productInstanceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeInstanceDto"
            }
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "wallet" : {
            "type" : "string"
          },
          "createWallet" : {
            "type" : "boolean"
          },
          "generateRTs" : {
            "type" : "boolean"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quantity" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "criteria1" : {
            "type" : "string"
          },
          "criteria2" : {
            "type" : "string"
          },
          "criteria3" : {
            "type" : "string"
          },
          "commercialOrderId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "orderProductId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "businessKey" : {
            "type" : "string"
          }
        },
        "description" : "The list of one shot charges to apply",
        "xml" : {
          "name" : "ApplyOneShotChargeInstanceRequest"
        }
      },
      "ServiceInstanceToDelete" : {
        "required" : [ "ids" ],
        "type" : "object",
        "properties" : {
          "ids" : {
            "type" : "array",
            "description" : "List of Service instance to delete",
            "items" : {
              "type" : "integer",
              "description" : "List of Service instance to delete",
              "format" : "int64"
            }
          }
        }
      },
      "SubscriptionsListDto" : {
        "type" : "object",
        "properties" : {
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subscription" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionDto"
            }
          }
        }
      },
      "SubscriptionsListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "subscriptions" : {
            "$ref" : "#/components/schemas/SubscriptionsListDto"
          }
        },
        "xml" : {
          "name" : "SubscriptionsListResponse"
        }
      },
      "DueDateDelayDto" : {
        "type" : "object",
        "properties" : {
          "delayOrigin" : {
            "type" : "string",
            "enum" : [ "ORDER", "CA", "BC" ]
          },
          "computedDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "delayEL" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "DueDateDelay"
        }
      },
      "GetDueDateDelayResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dueDateDelay" : {
            "$ref" : "#/components/schemas/DueDateDelayDto"
          }
        }
      },
      "GetServiceInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/ServiceInstanceDto"
          }
        },
        "xml" : {
          "name" : "GetServiceInstanceResponse"
        }
      },
      "GetSubscriptionResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/SubscriptionDto"
          }
        },
        "xml" : {
          "name" : "GetSubscriptionResponse"
        }
      },
      "AttributeDTO" : {
        "required" : [ "attributeType", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "attributeType" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code",
            "example" : "possible value are : INFO, LIST_TEXT, LIST_MULTIPLE_TEXT, LIST_NUMERIC, LIST_MULTIPLE_NUMERIC, TEXT, NUMERIC, INTEGER, DATE, CALENDAR, EMAIL, PHONE, TOTAL, COUNT, EXPRESSION_LANGUAGE",
            "enum" : [ "INFO", "LIST_TEXT", "LIST_MULTIPLE_TEXT", "LIST_NUMERIC", "LIST_MULTIPLE_NUMERIC", "TEXT", "NUMERIC", "INTEGER", "DATE", "CALENDAR", "EMAIL", "PHONE", "TOTAL", "COUNT", "EXPRESSION_LANGUAGE", "BOOLEAN" ]
          },
          "allowedValues" : {
            "type" : "array",
            "description" : "Corresponding to predefined allowed values",
            "items" : {
              "type" : "string",
              "description" : "Corresponding to predefined allowed values"
            }
          },
          "priority" : {
            "type" : "integer",
            "description" : "The lower number, the higher the priority is",
            "format" : "int32"
          },
          "selectable" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is selectable"
          },
          "ruled" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is ruled"
          },
          "chargeTemplateCodes" : {
            "type" : "array",
            "description" : "list of charge template code",
            "example" : "chargeTemplateCodes : [CODE_1, CODE_2,..]",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of charge template code",
              "example" : "chargeTemplateCodes : [CODE_1, CODE_2,..]",
              "xml" : {
                "name" : "chargeTemplateCodes"
              }
            }
          },
          "commercialRuleCodes" : {
            "type" : "array",
            "description" : "list of commercial rule code",
            "example" : "commercialRuleCodes : [CODE_1, CODE_2,..]",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of commercial rule code",
              "example" : "commercialRuleCodes : [CODE_1, CODE_2,..]",
              "xml" : {
                "name" : "commercialRuleCodes"
              }
            }
          },
          "mediaCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of media code",
            "example" : "mediaCodes : [CODE_1, CODE_2,..]",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of media code",
              "example" : "mediaCodes : [CODE_1, CODE_2,..]",
              "xml" : {
                "name" : "mediaCodes"
              }
            }
          },
          "tagCodes" : {
            "type" : "array",
            "description" : "list of tag code",
            "example" : "tags : [CODE_1, CODE_2,..]",
            "xml" : {
              "name" : "tags",
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of tag code",
              "example" : "tags : [CODE_1, CODE_2,..]",
              "xml" : {
                "name" : "tags"
              }
            }
          },
          "assignedAttributeCodes" : {
            "type" : "array",
            "description" : "list of assigned attribute code",
            "example" : "assignedAttributeCodes : [CODE_1, CODE_2,..]",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of assigned attribute code",
              "example" : "assignedAttributeCodes : [CODE_1, CODE_2,..]",
              "xml" : {
                "name" : "assignedAttributeCodes"
              }
            }
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "number of decimal for attribute if the type of attribute is a NUMBER",
            "format" : "int32"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "groupedAttributes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/GroupedAttributeDto"
            }
          },
          "assignedValue" : {
            "type" : "object",
            "description" : "replaced value"
          },
          "elValue" : {
            "type" : "string",
            "description" : "indicate if the type of attribute is EL then this may contain the EL value"
          }
        },
        "xml" : {
          "name" : "AttributeDTO"
        }
      },
      "BusinessProductModelDto" : {
        "required" : [ "code", "productTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "license" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "type" : "string"
          },
          "logoPictureFile" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          },
          "moduleItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BaseEntityDto"
            }
          },
          "productTemplate" : {
            "$ref" : "#/components/schemas/ProductTemplateDto"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "BusinessProductModel"
        }
      },
      "ChannelDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "Channel"
        }
      },
      "CommercialRuleHeaderDTO" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "ruleType" : {
            "type" : "string",
            "description" : "rule type",
            "example" : "possible value are : PRE_REQUISITE, INCOMPATIBILITY, REPLACEMENT",
            "enum" : [ "PRE_REQUISITE", "INCOMPATIBILITY", "REPLACEMENT" ]
          },
          "ruleEl" : {
            "type" : "string",
            "description" : "rule expression language"
          },
          "offerCode" : {
            "type" : "string",
            "description" : "code offer of template"
          },
          "productCode" : {
            "type" : "string",
            "description" : "code product"
          },
          "productVersion" : {
            "type" : "integer",
            "description" : "product version",
            "format" : "int32"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "code of attribute"
          },
          "scope" : {
            "type" : "string",
            "description" : "commercial rule scope",
            "enum" : [ "QUOTE", "QUOTE_OFFER" ]
          },
          "tagCode" : {
            "type" : "string",
            "description" : "code tag"
          },
          "groupedAttributeCode" : {
            "type" : "string",
            "description" : "code of grouped attribute"
          },
          "targetAttributeValue" : {
            "type" : "string",
            "description" : "target attribute value"
          },
          "isTarget" : {
            "type" : "boolean",
            "description" : "is commercial rule header is the target, default value is True"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "is commercial rule disabled, default value is false"
          },
          "commercialRuleItems" : {
            "type" : "array",
            "description" : "list of commercial rule item",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleItemDTO"
            }
          }
        },
        "xml" : {
          "name" : "CommercialRuleHeaderDTO"
        }
      },
      "CommercialRuleItemDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "operator" : {
            "type" : "string",
            "description" : "operator for commercial rule, default value is AND",
            "example" : "AND, OR",
            "enum" : [ "AND", "OR" ]
          },
          "ruleItemEl" : {
            "type" : "string",
            "description" : "rule item expression language"
          },
          "commercialRuleLines" : {
            "type" : "array",
            "description" : "list of commercial rule line",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleLineDTO"
            }
          }
        },
        "description" : "list of commercial rule item",
        "xml" : {
          "name" : "CommercialRuleItemDTO"
        }
      },
      "CommercialRuleLineDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "offerCode" : {
            "type" : "string",
            "description" : "offer code associated to commercial rule line"
          },
          "productCode" : {
            "type" : "string",
            "description" : "product code"
          },
          "productVersion" : {
            "type" : "integer",
            "description" : "product version",
            "format" : "int32"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "attribute code"
          },
          "groupedAttributeCode" : {
            "type" : "string",
            "description" : "grouped attribute code"
          },
          "attributeValue" : {
            "type" : "string",
            "description" : "value of the attribute"
          },
          "groupedAttributeValue" : {
            "type" : "string",
            "description" : "value of grouped attribute"
          },
          "tagCode" : {
            "type" : "string",
            "description" : "tag code"
          },
          "operator" : {
            "type" : "string",
            "description" : "operator for commercial rule line",
            "example" : "possible value are : GREATER_THAN, LESS_THAN, EQUAL, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, NOT_EQUAL, EXISTS",
            "enum" : [ "GREATER_THAN", "LESS_THAN", "EQUAL", "GREATER_THAN_OR_EQUAL", "LESS_THAN_OR_EQUAL", "NOT_EQUAL", "EXISTS", "CONTAINS", "NOT_CONTAINS" ]
          }
        },
        "description" : "list of commercial rule line",
        "xml" : {
          "name" : "CommercialRuleLineDTO"
        }
      },
      "CounterTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "counterTemplate" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DigitalResourceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "uri" : {
            "type" : "string"
          },
          "mimeType" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "DigitalResource"
        }
      },
      "GetOneShotChargesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "oneshotCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
            }
          },
          "oneshotChargeInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OneShotChargeInstanceDto"
            }
          }
        }
      },
      "GroupedAttributeDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "id of the grouped attribute",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "code of groupped attribute"
          },
          "description" : {
            "type" : "string",
            "description" : "description of the groupped attribute"
          },
          "attributes" : {
            "type" : "array",
            "description" : "list of attributes to display",
            "items" : {
              "$ref" : "#/components/schemas/AttributeDTO"
            }
          },
          "attributeCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of code of attribute for adding to a groupped attribute",
            "items" : {
              "type" : "string",
              "description" : "list of code of attribute for adding to a groupped attribute"
            }
          },
          "display" : {
            "type" : "boolean",
            "description" : "indicate if the groupped attribute should display"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "indicate if the groupped attribute should be disable"
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "indicate if the groupped attribute should be mandatory"
          },
          "selectable" : {
            "type" : "boolean",
            "description" : "indicate if the groupped attribute is selectable, the default value is true"
          },
          "ruled" : {
            "type" : "boolean",
            "description" : "indicate if the groupped attribute is ruled, the default value is false"
          },
          "commercialRuleCodes" : {
            "type" : "array",
            "description" : "list of code of commercial rule",
            "items" : {
              "type" : "string",
              "description" : "list of code of commercial rule"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "description" : "grouped attributes"
      },
      "MediaDto" : {
        "required" : [ "label", "main", "mediaName", "mediaType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "id of media",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the media"
          },
          "description" : {
            "type" : "string",
            "description" : "description"
          },
          "mediaName" : {
            "type" : "string",
            "description" : "name of the media"
          },
          "label" : {
            "type" : "string",
            "description" : "label of the media"
          },
          "main" : {
            "type" : "boolean",
            "description" : "indicate that the media is main"
          },
          "mediaType" : {
            "type" : "string",
            "description" : "type of the media",
            "example" : "possible value are : IMAGE, VIDEO",
            "enum" : [ "IMAGE", "VIDEO", "PDF" ]
          },
          "mediaPath" : {
            "type" : "string",
            "description" : "the path of the media"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        }
      },
      "OfferProductTemplateDto" : {
        "type" : "object",
        "properties" : {
          "productTemplate" : {
            "$ref" : "#/components/schemas/ProductTemplateDto"
          },
          "mandatory" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "OfferProductTemplate"
        }
      },
      "OfferProductsDto" : {
        "required" : [ "offerTemplateCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "offerTemplateCode" : {
            "type" : "string",
            "description" : "code of offer template"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductDto"
          },
          "allowedDiscountPlans" : {
            "type" : "array",
            "description" : "list of allowed discount plan",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "commercialRules" : {
            "type" : "array",
            "description" : "list of commercial rules",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
            }
          },
          "selectable" : {
            "type" : "boolean",
            "description" : "indicate if offer product is selectable",
            "default" : true
          },
          "sequence" : {
            "type" : "integer",
            "description" : "sequence",
            "format" : "int32"
          },
          "ruled" : {
            "type" : "boolean",
            "description" : "indicated if offer product is ruled",
            "default" : false
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "indicate of the offer product is mandatory",
            "default" : false
          },
          "display" : {
            "type" : "boolean",
            "description" : "indicate if the offer product can be displayed",
            "default" : true
          },
          "quantityMin" : {
            "type" : "integer",
            "description" : "minimun quantity",
            "format" : "int32"
          },
          "quantityMax" : {
            "type" : "integer",
            "description" : "maximun quantity",
            "format" : "int32"
          },
          "quantityDefault" : {
            "type" : "integer",
            "description" : "default quantity",
            "format" : "int32"
          },
          "productSet" : {
            "type" : "string",
            "description" : "product set regroup product in the pack"
          }
        },
        "description" : "list of The offer component"
      },
      "OfferServiceTemplateDto" : {
        "type" : "object",
        "properties" : {
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplateDto"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "incompatibleServices" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ServiceTemplateDto"
            }
          }
        },
        "description" : "list of the offer service templates",
        "xml" : {
          "name" : "OfferServiceTemplate"
        }
      },
      "OfferTemplateCategoryDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "offerTemplateCategoryCode" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "active" : {
            "type" : "boolean"
          },
          "parentId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "imagePath" : {
            "type" : "string"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "languageLabels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "OfferCategory"
        }
      },
      "OfferTemplateDto" : {
        "required" : [ "code", "lifeCycleStatus", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          },
          "channels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChannelDto"
            }
          },
          "attachments" : {
            "type" : "array",
            "xml" : {
              "name" : "digitalResources",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DigitalResourceDto"
            }
          },
          "modelCode" : {
            "type" : "string"
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "imagePath" : {
            "type" : "string"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "globalRatingScriptInstance" : {
            "type" : "string"
          },
          "sellers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "seller"
              }
            }
          },
          "customerCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategoryDto"
            }
          },
          "bomCode" : {
            "type" : "string",
            "description" : "the bom code"
          },
          "offerTemplateCategoryCode" : {
            "type" : "string"
          },
          "offerServiceTemplates" : {
            "type" : "array",
            "description" : "list of the offer service templates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferServiceTemplateDto"
            }
          },
          "offerProductTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferProductTemplateDto"
            }
          },
          "offerProducts" : {
            "type" : "array",
            "description" : "list of The offer component",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferProductsDto"
            }
          },
          "allowedDiscountPlans" : {
            "type" : "array",
            "description" : "list of The offer product template",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "offerAttributes" : {
            "type" : "array",
            "description" : "list of attributes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttributeDTO"
            }
          },
          "attributes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/AttributeDTO"
            }
          },
          "commercialRuleCodes" : {
            "type" : "array",
            "description" : "list of codes of commercial rules",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of codes of commercial rules",
              "xml" : {
                "name" : "commercialRuleCodes"
              }
            }
          },
          "mediaCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of the codes media",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of the codes media",
              "xml" : {
                "name" : "mediaCodes"
              }
            }
          },
          "allowedOfferChange" : {
            "type" : "array",
            "description" : "list of allowed offer change",
            "items" : {
              "type" : "string",
              "description" : "list of allowed offer change"
            }
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine labe value"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string",
            "description" : "Corresponding to minimum invoice subcategory"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean",
            "description" : "indicate end of engagement"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "tagCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of tag code",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of tag code",
              "xml" : {
                "name" : "tagCodes"
              }
            }
          },
          "statusDate" : {
            "type" : "string",
            "description" : "last update status datetime",
            "format" : "date-time"
          },
          "isModel" : {
            "type" : "boolean",
            "description" : "allowing to create,update and delete an offer from a model"
          },
          "offerModelCode" : {
            "type" : "string",
            "description" : "Offer template code"
          },
          "generateQuoteEdrPerProduct" : {
            "type" : "boolean",
            "description" : "allow to generate each edr per product"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "sequence of the Offer Template",
            "format" : "int32"
          },
          "documentCode" : {
            "type" : "string"
          },
          "display" : {
            "type" : "boolean",
            "description" : "display of the Offer Template"
          },
          "offerChangeRestricted" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "OfferTemplate"
        }
      },
      "OneShotChargeInstanceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "operationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          },
          "quantity" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "OneShotChargeTemplateDto" : {
        "required" : [ "code", "oneShotChargeTemplateType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "type" : "string",
            "description" : "The invoice sub category"
          },
          "amountEditable" : {
            "type" : "boolean",
            "description" : "The amount can be editable"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "inputUnitDescription" : {
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "inputUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of unit  measure"
          },
          "ratingUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of rating unit of measure"
          },
          "inputUnitEL" : {
            "type" : "string",
            "description" : "input unit expression language"
          },
          "outputUnitEL" : {
            "type" : "string",
            "description" : "output unit expression language"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "EDR and WO quantity field value precision",
            "format" : "int32"
          },
          "roundingModeDtoEnum" : {
            "type" : "string",
            "description" : "EDR and WO quantity field value rounding",
            "example" : "possible value are : NEAREST, DOWN, UP",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRuleCode" : {
            "type" : "string",
            "description" : "The revenue recognition rule code"
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The filter expression"
          },
          "taxClassCode" : {
            "type" : "string",
            "description" : "code of tax class"
          },
          "taxClassEl" : {
            "type" : "string",
            "description" : "Expression to determine tax class"
          },
          "ratingScriptCode" : {
            "type" : "string",
            "description" : "Code of a rating script"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "triggeredEdrs" : {
            "$ref" : "#/components/schemas/TriggeredEdrTemplatesDto"
          },
          "dropZeroWo" : {
            "type" : "boolean",
            "description" : "Enable/disable removing WO rated to 0"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Sorting index EL"
          },
          "status" : {
            "type" : "string",
            "description" : "ChargeTemplate status",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "linkedAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "internalNote" : {
            "type" : "string",
            "description" : "Internal Note"
          },
          "pricePlanCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pricePlanMatrixes" : {
            "type" : "array",
            "description" : "price plan matrixes",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "businessKeyEl" : {
            "type" : "string",
            "description" : "Business Key El"
          },
          "businessKeyDescription" : {
            "type" : "string",
            "description" : "Business Key Description"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "description" : "Format of Business Key",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Business Key Mandatory?"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean",
            "description" : "Is Business Key Hidden?"
          },
          "quantityAttribute" : {
            "type" : "string",
            "description" : "Code of quantity attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean",
            "description" : "indicate if rating script uses price versions"
          },
          "oneShotChargeTemplateType" : {
            "type" : "string",
            "description" : "The one shot charge template type",
            "example" : "possible value are : SUBSCRIPTION, TERMINATION, OTHER",
            "enum" : [ "oneShotChargeTemplateTypeEnum.subscription", "oneShotChargeTemplateTypeEnum.termination", "oneShotChargeTemplateTypeEnum.other", "oneShotChargeTemplateTypeEnum.invoicing_plan" ]
          },
          "immediateInvoicing" : {
            "type" : "boolean",
            "description" : "The immediate invoicing"
          }
        },
        "xml" : {
          "name" : "OneShotChargeTemplate"
        }
      },
      "PricePlanMatrixColumnDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Price plan matrix identifier",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The price plan matrix column code"
          },
          "pricePlanMatrixCode" : {
            "type" : "string",
            "description" : "The price plan matrix code"
          },
          "pricePlanMatrixVersion" : {
            "type" : "integer",
            "description" : "The price plan matrix version",
            "format" : "int32"
          },
          "productCode" : {
            "type" : "string",
            "description" : "The product code"
          },
          "offerTemplateCode" : {
            "type" : "string",
            "description" : "The offer template code"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "The attribute code"
          },
          "position" : {
            "type" : "integer",
            "description" : "The position of price plan column",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the price plan column",
            "enum" : [ "String", "Long", "Double", "Range_Date", "Range_Numeric", "Boolean" ]
          },
          "elValue" : {
            "type" : "string",
            "description" : "The el value of price plan matrix column"
          },
          "range" : {
            "type" : "boolean"
          }
        }
      },
      "PricePlanMatrixDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "eventCode" : {
            "type" : "string",
            "description" : "The event code"
          },
          "chargeTemplateCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "The Charge templates Codes",
            "items" : {
              "type" : "string",
              "description" : "The Charge templates Codes"
            }
          },
          "seller" : {
            "type" : "string",
            "description" : "The seller code"
          },
          "country" : {
            "type" : "string",
            "description" : "The country code"
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency code"
          },
          "minQuantity" : {
            "type" : "number",
            "description" : "The min quantity"
          },
          "maxQuantity" : {
            "type" : "number",
            "description" : "The max quantity"
          },
          "offerTemplate" : {
            "type" : "string",
            "description" : "The offer template code"
          },
          "offerTemplateVersion" : {
            "$ref" : "#/components/schemas/OfferTemplateDto"
          },
          "startSubscriptionDate" : {
            "type" : "string",
            "description" : "The start subscription date",
            "format" : "date-time"
          },
          "endSubscriptionDate" : {
            "type" : "string",
            "description" : "The end subscription date",
            "format" : "date-time"
          },
          "startRatingDate" : {
            "type" : "string",
            "description" : "The start rating date",
            "format" : "date-time"
          },
          "endRatingDate" : {
            "type" : "string",
            "description" : "The end rating date",
            "format" : "date-time"
          },
          "minSubscriptionAgeInMonth" : {
            "type" : "integer",
            "description" : "The min subscription age in month",
            "format" : "int64"
          },
          "maxSubscriptionAgeInMonth" : {
            "type" : "integer",
            "description" : "The max subscription age in month",
            "format" : "int64"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "amountWithoutTaxEL" : {
            "type" : "string",
            "description" : "The amount without tax EL"
          },
          "amountWithTaxEL" : {
            "type" : "string",
            "description" : "The amount with tax EL"
          },
          "minimumAmountWithoutTaxEl" : {
            "type" : "string",
            "description" : "The minimum amount without tax el"
          },
          "minimumAmountWithTaxEl" : {
            "type" : "string",
            "description" : "The minimum amount with tax el"
          },
          "priority" : {
            "type" : "integer",
            "description" : "The priority",
            "format" : "int32"
          },
          "criteria1" : {
            "type" : "string",
            "description" : "The criteria 1"
          },
          "criteria2" : {
            "type" : "string",
            "description" : "The criteria 2"
          },
          "criteria3" : {
            "type" : "string",
            "description" : "The criteria 3"
          },
          "criteriaEL" : {
            "type" : "string",
            "description" : "The criteria EL"
          },
          "validityCalendarCode" : {
            "type" : "string",
            "description" : "The validity calendar code"
          },
          "scriptInstance" : {
            "type" : "string",
            "description" : "The script instance"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "woDescriptionEL" : {
            "type" : "string"
          },
          "ratingWithTaxEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "ratingWithoutTaxEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Expression to calculate price without tax"
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixVersionDto"
            }
          },
          "invoiceSubCategoryEL" : {
            "type" : "string",
            "description" : "Expression for getting the InvoiceSubCategory"
          },
          "totalAmountEL" : {
            "type" : "string",
            "description" : "Expression to calculate price with/without tax. It overrides quantity x unitPrice when set"
          },
          "minimumAmountEL" : {
            "type" : "string",
            "description" : "Minimum allowed amount for a walletOperation. If this amount is less than the walletOperation this amount is save and the old value is save in rawAmount"
          },
          "parameter1El" : {
            "type" : "string",
            "description" : "An El expression used to override wallet operation's parameter1El"
          },
          "parameter2El" : {
            "type" : "string",
            "description" : "An El expression used to override wallet operation's parameter2El"
          },
          "parameter3El" : {
            "type" : "string",
            "description" : "An El expression used to override wallet operation's parameter3El"
          }
        },
        "description" : "price plan matrixes",
        "xml" : {
          "name" : "PricePlan"
        }
      },
      "PricePlanMatrixLineDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "ppmLineId" : {
            "type" : "integer",
            "description" : "The price plan line id",
            "format" : "int64"
          },
          "priceWithoutTax" : {
            "type" : "number",
            "description" : "The price without tax",
            "writeOnly" : true
          },
          "value" : {
            "type" : "number",
            "description" : "The value of price without tax or a discount"
          },
          "pricePlanMatrixCode" : {
            "type" : "string",
            "description" : "The price plan matrix code"
          },
          "pricePlanMatrixVersion" : {
            "type" : "integer",
            "description" : "The price plan matrix version",
            "format" : "int32"
          },
          "description" : {
            "type" : "string",
            "description" : "The description price plan line"
          },
          "pricePlanMatrixValues" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixValueDto"
            }
          },
          "priority" : {
            "type" : "integer",
            "description" : "The priority",
            "format" : "int32"
          },
          "priceEL" : {
            "type" : "string",
            "description" : "The Price EL"
          },
          "valueEL" : {
            "type" : "string",
            "description" : "The EL Value"
          },
          "tradingPricePlanMatrixLines" : {
            "type" : "array",
            "description" : "list of trading price plan matrix line",
            "items" : {
              "$ref" : "#/components/schemas/TradingPricePlanMatrixLineDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        }
      },
      "PricePlanMatrixValueDto" : {
        "required" : [ "ppmColumnCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "ppmValueId" : {
            "type" : "integer",
            "description" : "The price plan matrix value id",
            "format" : "int64"
          },
          "ppmColumnCode" : {
            "type" : "string",
            "description" : "The price plan column code"
          },
          "longValue" : {
            "type" : "integer",
            "description" : "The long value",
            "format" : "int64"
          },
          "doubleValue" : {
            "type" : "number",
            "description" : "The double value",
            "format" : "double"
          },
          "stringValue" : {
            "type" : "string",
            "description" : "The string value"
          },
          "dateValue" : {
            "type" : "string",
            "description" : "The date value",
            "format" : "date-time"
          },
          "fromDateValue" : {
            "type" : "string",
            "description" : "The from date value",
            "format" : "date-time"
          },
          "toDateValue" : {
            "type" : "string",
            "description" : "The to date value",
            "format" : "date-time"
          },
          "fromDoubleValue" : {
            "type" : "number",
            "description" : "The from double value",
            "format" : "double"
          },
          "toDoubleValue" : {
            "type" : "number",
            "description" : "The to double value",
            "format" : "double"
          },
          "booleanValue" : {
            "type" : "boolean",
            "description" : "The boolean value"
          }
        }
      },
      "PricePlanMatrixVersionDto" : {
        "required" : [ "pricePlanMatrixCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The price plan matrix version id",
            "format" : "int64"
          },
          "pricePlanMatrixCode" : {
            "type" : "string",
            "description" : "The price plan matrix code"
          },
          "statusEnum" : {
            "type" : "string",
            "description" : "The status of price plan matrix version",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "version" : {
            "type" : "integer",
            "description" : "the current version of price plan matrix",
            "format" : "int32"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date. it set automatically when the status change",
            "format" : "date-time"
          },
          "label" : {
            "type" : "string",
            "description" : "The label of price plan matrix version"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "price" : {
            "type" : "number",
            "description" : "The price"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "amountWithoutTaxEL" : {
            "type" : "string",
            "description" : "The amount without tax EL"
          },
          "amountWithTaxEL" : {
            "type" : "string",
            "description" : "The amount with tax EL"
          },
          "priceEL" : {
            "type" : "string",
            "description" : "The Price EL"
          },
          "priority" : {
            "type" : "integer",
            "description" : "The priority",
            "format" : "int32"
          },
          "priceVersionType" : {
            "type" : "string",
            "description" : "The price version type, can be PERCENTAGE or FIXED.",
            "enum" : [ "FIXED", "PERCENTAGE" ]
          },
          "columns" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixColumnDto"
            }
          },
          "lines" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixLineDto"
            }
          },
          "tradingPricesEL" : {
            "type" : "array",
            "description" : "Trading prices EL",
            "items" : {
              "$ref" : "#/components/schemas/TradingPriceEL"
            }
          },
          "matrix" : {
            "type" : "boolean"
          }
        }
      },
      "ProductChargeTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "type" : "string",
            "description" : "The invoice sub category"
          },
          "amountEditable" : {
            "type" : "boolean",
            "description" : "The amount can be editable"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "inputUnitDescription" : {
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "inputUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of unit  measure"
          },
          "ratingUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of rating unit of measure"
          },
          "inputUnitEL" : {
            "type" : "string",
            "description" : "input unit expression language"
          },
          "outputUnitEL" : {
            "type" : "string",
            "description" : "output unit expression language"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "EDR and WO quantity field value precision",
            "format" : "int32"
          },
          "roundingModeDtoEnum" : {
            "type" : "string",
            "description" : "EDR and WO quantity field value rounding",
            "example" : "possible value are : NEAREST, DOWN, UP",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRuleCode" : {
            "type" : "string",
            "description" : "The revenue recognition rule code"
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The filter expression"
          },
          "taxClassCode" : {
            "type" : "string",
            "description" : "code of tax class"
          },
          "taxClassEl" : {
            "type" : "string",
            "description" : "Expression to determine tax class"
          },
          "ratingScriptCode" : {
            "type" : "string",
            "description" : "Code of a rating script"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "triggeredEdrs" : {
            "$ref" : "#/components/schemas/TriggeredEdrTemplatesDto"
          },
          "dropZeroWo" : {
            "type" : "boolean",
            "description" : "Enable/disable removing WO rated to 0"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Sorting index EL"
          },
          "status" : {
            "type" : "string",
            "description" : "ChargeTemplate status",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "linkedAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "internalNote" : {
            "type" : "string",
            "description" : "Internal Note"
          },
          "pricePlanCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "businessKeyEl" : {
            "type" : "string",
            "description" : "Business Key El"
          },
          "businessKeyDescription" : {
            "type" : "string",
            "description" : "Business Key Description"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "description" : "Format of Business Key",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Business Key Mandatory?"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean",
            "description" : "Is Business Key Hidden?"
          },
          "quantityAttribute" : {
            "type" : "string",
            "description" : "Code of quantity attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean",
            "description" : "indicate if rating script uses price versions"
          }
        },
        "xml" : {
          "name" : "ProductChargeTemplate"
        }
      },
      "ProductChargeTemplateMappingDto" : {
        "type" : "object",
        "properties" : {
          "chargeCode" : {
            "type" : "string",
            "description" : "The charge code"
          },
          "productCode" : {
            "type" : "string",
            "description" : "The product code"
          },
          "counterCode" : {
            "type" : "string",
            "description" : "The counter code"
          },
          "accumulatorCounterCodes" : {
            "type" : "array",
            "description" : "List of accumulator counter codes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of accumulator counter codes",
              "xml" : {
                "name" : "accumulatorCounterCodes"
              }
            }
          }
        },
        "description" : "List product charge template mapping",
        "xml" : {
          "name" : "ProductChargeTemplateMappingDto"
        }
      },
      "ProductTemplateDto" : {
        "required" : [ "code", "lifeCycleStatus", "name", "productChargeTemplates" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          },
          "channels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChannelDto"
            }
          },
          "attachments" : {
            "type" : "array",
            "xml" : {
              "name" : "digitalResources",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DigitalResourceDto"
            }
          },
          "modelCode" : {
            "type" : "string"
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "imagePath" : {
            "type" : "string"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "globalRatingScriptInstance" : {
            "type" : "string"
          },
          "sellers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "seller"
              }
            }
          },
          "customerCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategoryDto"
            }
          },
          "productChargeTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplateDto"
            }
          },
          "businessProductModel" : {
            "$ref" : "#/components/schemas/BusinessProductModelDto"
          },
          "walletTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplateDto"
            }
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "ProductTemplate"
        }
      },
      "ProductVersionAttributeDTO" : {
        "required" : [ "attributeCode", "mandatory" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "attribute id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "Code of attribute"
          },
          "description" : {
            "type" : "string",
            "description" : "description"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "description"
          },
          "attributeType" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code",
            "example" : "possible value are : INFO, LIST_TEXT, LIST_MULTIPLE_TEXT, LIST_NUMERIC, LIST_MULTIPLE_NUMERIC, TEXT, NUMERIC, INTEGER, DATE, CALENDAR, EMAIL, PHONE, TOTAL, COUNT, EXPRESSION_LANGUAGE",
            "enum" : [ "INFO", "LIST_TEXT", "LIST_MULTIPLE_TEXT", "LIST_NUMERIC", "LIST_MULTIPLE_NUMERIC", "TEXT", "NUMERIC", "INTEGER", "DATE", "CALENDAR", "EMAIL", "PHONE", "TOTAL", "COUNT", "EXPRESSION_LANGUAGE", "BOOLEAN" ]
          },
          "allowedValues" : {
            "type" : "array",
            "description" : "Corresponding to predefined allowed values",
            "items" : {
              "type" : "string",
              "description" : "Corresponding to predefined allowed values"
            }
          },
          "display" : {
            "type" : "boolean",
            "description" : "diplay the attribute"
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is mandatory"
          },
          "selectable" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is selectable"
          },
          "ruled" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is ruled"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "number of decimal for attribute if the type of attribute is a NUMBER",
            "format" : "int32"
          },
          "readOnly" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is read only"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "Code of attribute"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "attribute order in the GUI",
            "format" : "int32"
          },
          "mandatoryWithEl" : {
            "type" : "string",
            "description" : "Indicate if the attribute has a mandatory EL"
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "default value for attribute"
          },
          "validationType" : {
            "type" : "string",
            "description" : "Validation type",
            "example" : "Possible value are: EL, REGEX",
            "enum" : [ "REGEX", "EL" ]
          },
          "validationPattern" : {
            "type" : "string",
            "description" : "Validation pattern"
          },
          "validationLabel" : {
            "type" : "string",
            "description" : "Validation label"
          },
          "commercialRuleCodes" : {
            "type" : "array",
            "description" : "list of commercial rule code",
            "example" : "commercialRuleCodes : [CODE_1, CODE_2,..]",
            "items" : {
              "type" : "string",
              "description" : "list of commercial rule code",
              "example" : "commercialRuleCodes : [CODE_1, CODE_2,..]"
            }
          },
          "assignedValue" : {
            "type" : "object",
            "description" : "replaced value"
          },
          "chargeTemplateCodes" : {
            "type" : "array",
            "description" : "list of charge template code",
            "example" : "chargeTemplateCodes : [CODE_1, CODE_2,..]",
            "items" : {
              "type" : "string",
              "description" : "list of charge template code",
              "example" : "chargeTemplateCodes : [CODE_1, CODE_2,..]"
            }
          },
          "priority" : {
            "type" : "integer",
            "description" : "The lower number, the higher the priority is",
            "format" : "int32"
          },
          "mediaCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of media code",
            "example" : "mediaCodes : [CODE_1, CODE_2,..]",
            "items" : {
              "type" : "string",
              "description" : "list of media code",
              "example" : "mediaCodes : [CODE_1, CODE_2,..]"
            }
          },
          "tagCodes" : {
            "type" : "array",
            "description" : "list of tag code",
            "example" : "tags : [CODE_1, CODE_2,..]",
            "items" : {
              "type" : "string",
              "description" : "list of tag code",
              "example" : "tags : [CODE_1, CODE_2,..]"
            }
          },
          "assignedAttributeCodes" : {
            "type" : "array",
            "description" : "list of assigned attribute code",
            "example" : "assignedAttributeCodes : [CODE_1, CODE_2,..]",
            "items" : {
              "type" : "string",
              "description" : "list of assigned attribute code",
              "example" : "assignedAttributeCodes : [CODE_1, CODE_2,..]"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "groupedAttributes" : {
            "type" : "array",
            "description" : "grouped attributes",
            "items" : {
              "$ref" : "#/components/schemas/GroupedAttributeDto"
            }
          }
        },
        "description" : "list of attributes"
      },
      "ProductVersionDto" : {
        "required" : [ "currentVersion", "productCode", "shortDescription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "shortDescription" : {
            "type" : "string",
            "description" : "The short description of the product version",
            "xml" : {
              "attribute" : true
            }
          },
          "productCode" : {
            "type" : "string",
            "description" : "The product code"
          },
          "currentVersion" : {
            "type" : "integer",
            "description" : "The current version of the product",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the product version",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The statusDate : is set automatically when the status was changed",
            "format" : "date-time"
          },
          "longDescription" : {
            "type" : "string",
            "description" : "The long description"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "productAttributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of the attribute",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttributeDTO"
            }
          },
          "groupedAttributeCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of the grouped attribute codes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of the grouped attribute codes",
              "xml" : {
                "name" : "groupedAttributeCodes"
              }
            }
          },
          "tagCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of tag codes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "List of tag codes",
              "xml" : {
                "name" : "tagCodes"
              }
            }
          }
        },
        "description" : "Current product version for product"
      },
      "ServiceChargeTemplateRecurringDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "wallets" : {
            "$ref" : "#/components/schemas/WalletsDto"
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "accumulatorCounterTemplates" : {
            "$ref" : "#/components/schemas/CounterTemplatesDto"
          }
        }
      },
      "ServiceChargeTemplateRecurringsDto" : {
        "type" : "object",
        "properties" : {
          "serviceChargeTemplateRecurring" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateRecurringDto"
            }
          }
        }
      },
      "ServiceChargeTemplateSubscriptionDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "wallets" : {
            "$ref" : "#/components/schemas/WalletsDto"
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "accumulatorCounterTemplates" : {
            "$ref" : "#/components/schemas/CounterTemplatesDto"
          }
        }
      },
      "ServiceChargeTemplateSubscriptionsDto" : {
        "type" : "object",
        "properties" : {
          "serviceChargeTemplateSubscription" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateSubscriptionDto"
            }
          }
        }
      },
      "ServiceChargeTemplateTerminationDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "wallets" : {
            "$ref" : "#/components/schemas/WalletsDto"
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "accumulatorCounterTemplates" : {
            "$ref" : "#/components/schemas/CounterTemplatesDto"
          }
        }
      },
      "ServiceChargeTemplateTerminationsDto" : {
        "type" : "object",
        "properties" : {
          "serviceChargeTemplateTermination" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceChargeTemplateTerminationDto"
            }
          }
        }
      },
      "ServiceChargeTemplateUsagesDto" : {
        "type" : "object",
        "properties" : {
          "serviceChargeTemplateUsage" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceUsageChargeTemplateDto"
            }
          }
        }
      },
      "ServiceTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "longDescription" : {
            "type" : "string"
          },
          "invoicingCalendar" : {
            "type" : "string"
          },
          "serviceChargeTemplateRecurrings" : {
            "$ref" : "#/components/schemas/ServiceChargeTemplateRecurringsDto"
          },
          "serviceChargeTemplateSubscriptions" : {
            "$ref" : "#/components/schemas/ServiceChargeTemplateSubscriptionsDto"
          },
          "serviceChargeTemplateTerminations" : {
            "$ref" : "#/components/schemas/ServiceChargeTemplateTerminationsDto"
          },
          "serviceChargeTemplateUsages" : {
            "$ref" : "#/components/schemas/ServiceChargeTemplateUsagesDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "somCode" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "minimumChargeTemplate" : {
            "type" : "string"
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "groupedServiceCode" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "valueValidator" : {
            "type" : "string"
          },
          "serviceTypeCode" : {
            "type" : "string"
          },
          "display" : {
            "type" : "boolean"
          },
          "param" : {
            "type" : "string"
          },
          "medias" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/MediaDto"
            }
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "ServiceTemplate"
        }
      },
      "ServiceUsageChargeTemplateDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "wallets" : {
            "$ref" : "#/components/schemas/WalletsDto"
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "accumulatorCounterTemplates" : {
            "$ref" : "#/components/schemas/CounterTemplatesDto"
          }
        },
        "xml" : {
          "name" : "ServiceUsageChargeTemplate"
        }
      },
      "TradingCurrencyDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          }
        },
        "description" : "trading currency",
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "TradingPriceEL" : {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "description" : "Currency code"
          },
          "priceEL" : {
            "type" : "string",
            "description" : "Trading price EL"
          }
        },
        "description" : "Trading prices EL"
      },
      "TradingPricePlanMatrixLineDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "tradingValue" : {
            "type" : "number",
            "description" : "trading price value"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrencyDto"
          },
          "rate" : {
            "type" : "number",
            "description" : "the rate of trading currency"
          },
          "useForBillingAccounts" : {
            "type" : "boolean",
            "description" : "weither is will with billing account or not"
          }
        },
        "description" : "list of trading price plan matrix line"
      },
      "TriggeredEdrTemplateDto" : {
        "required" : [ "code", "quantityEl" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "subscriptionEl" : {
            "type" : "string"
          },
          "meveoInstanceCode" : {
            "type" : "string"
          },
          "conditionEl" : {
            "type" : "string"
          },
          "quantityEl" : {
            "type" : "string"
          },
          "param1El" : {
            "type" : "string"
          },
          "param2El" : {
            "type" : "string"
          },
          "param3El" : {
            "type" : "string"
          },
          "param4El" : {
            "type" : "string"
          },
          "opencellInstanceEL" : {
            "type" : "string"
          },
          "triggeredEdrScript" : {
            "type" : "string"
          }
        },
        "description" : "list triggered EDR",
        "xml" : {
          "name" : "TriggeredEdrTemplate"
        }
      },
      "TriggeredEdrTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "triggeredEdr" : {
            "type" : "array",
            "description" : "list triggered EDR",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
            }
          }
        },
        "description" : "The triggered edrs",
        "xml" : {
          "name" : "TriggeredEdrTemplates"
        }
      },
      "WalletTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "walletType" : {
            "type" : "string",
            "enum" : [ "POSTPAID", "PREPAID" ]
          },
          "consumptionAlertSet" : {
            "type" : "boolean"
          },
          "fastRatingLevel" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lowBalanceLevel" : {
            "type" : "number"
          },
          "rejectLevel" : {
            "type" : "number"
          },
          "rejectLevelEl" : {
            "type" : "string"
          },
          "lowBalanceLevelEl" : {
            "type" : "string"
          }
        }
      },
      "WalletsDto" : {
        "type" : "object",
        "properties" : {
          "wallet" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "InstantiateServicesRequestDto" : {
        "required" : [ "subscription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscription" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "servicesToInstantiate" : {
            "$ref" : "#/components/schemas/ServicesToInstantiateDto"
          }
        },
        "xml" : {
          "name" : "InstantiateServicesRequest"
        }
      },
      "ServiceToInstantiateDto" : {
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "overrideCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "quantity" : {
            "type" : "number"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeInstanceOverrides" : {
            "$ref" : "#/components/schemas/ChargeInstanceOverridesDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "attributeInstanceDtoList" : {
            "type" : "array",
            "xml" : {
              "name" : "attributeInstances",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/AttributeInstanceDto"
            }
          },
          "rateUntilDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountPS" : {
            "type" : "number"
          },
          "calendarPSCode" : {
            "type" : "string"
          },
          "serviceCharge" : {
            "$ref" : "#/components/schemas/ServiceCharge"
          }
        },
        "xml" : {
          "name" : "ServiceToInstantiate"
        }
      },
      "ServicesToInstantiateDto" : {
        "required" : [ "service" ],
        "type" : "object",
        "properties" : {
          "service" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceToInstantiateDto"
            }
          }
        },
        "xml" : {
          "name" : "ServicesToInstantiate"
        }
      },
      "GetListServiceInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "serviceInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceInstanceDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListServiceInstanceResponse"
        }
      },
      "SubscriptionPatchDto" : {
        "required" : [ "terminateOldSubscription" ],
        "type" : "object",
        "properties" : {
          "offerTemplate" : {
            "type" : "string"
          },
          "newSubscriptionCode" : {
            "type" : "string"
          },
          "terminateOldSubscription" : {
            "type" : "boolean"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "servicesToInstantiate" : {
            "$ref" : "#/components/schemas/ServicesToInstantiateDto"
          },
          "servicesToActivate" : {
            "$ref" : "#/components/schemas/ServicesToActivateDto"
          },
          "updateSubscriptionDate" : {
            "type" : "boolean"
          },
          "reengageCustomer" : {
            "type" : "boolean"
          },
          "resetRenewalTerms" : {
            "type" : "boolean"
          },
          "subscriptionCustomFieldsToCopy" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "priceListCode" : {
            "type" : "string"
          }
        }
      },
      "RateSubscriptionResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "totalRatedCharges" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ratedChargesResult" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "RateSubscriptionRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "rateUntilDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "OperationServicesRequestDto" : {
        "required" : [ "subscriptionCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "servicesToUpdate" : {
            "type" : "array",
            "xml" : {
              "name" : "ListServiceToUpdate",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ServiceToUpdateDto"
            }
          }
        },
        "xml" : {
          "name" : "OperationServicesRequestDto"
        }
      },
      "ServiceToUpdateDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "overrideCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "quantity" : {
            "type" : "number"
          },
          "actionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endAgreementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "serviceRenewal" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlanForTermination" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "priceVersionDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "xml" : {
          "name" : "ServiceToUpdate"
        }
      },
      "OperationSubscriptionRequestDto" : {
        "required" : [ "subscriptionCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "actionDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "xml" : {
          "name" : "OperationSubscriptionRequest"
        }
      },
      "OfferRollbackDto" : {
        "required" : [ "terminationReason" ],
        "type" : "object",
        "properties" : {
          "terminationReason" : {
            "type" : "string"
          }
        }
      },
      "SubscriptionAndProductsToInstantiateDto" : {
        "required" : [ "billingCycle", "code", "offerTemplate", "productToInstantiateDto", "seller", "subscriptionDate", "userAccount", "versionNumber" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "versionNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nextVersion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previousVersion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAccount" : {
            "type" : "string"
          },
          "offerTemplate" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endAgreementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CREATED", "ACTIVE", "CANCELED", "RESILIATED", "CLOSED", "SUSPENDED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "accesses" : {
            "$ref" : "#/components/schemas/AccessesDto"
          },
          "productsToInstantiate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductToInstantiateDto"
            }
          },
          "terminationReason" : {
            "type" : "string"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "type" : "string"
          },
          "subscribedTillDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewed" : {
            "type" : "boolean"
          },
          "renewalNotifiedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "billingCycle" : {
            "type" : "string"
          },
          "seller" : {
            "type" : "string",
            "description" : "Seller code"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "ratingGroup" : {
            "type" : "string"
          },
          "electronicBilling" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          },
          "mailingType" : {
            "type" : "string"
          },
          "emailTemplate" : {
            "type" : "string"
          },
          "ccedEmails" : {
            "type" : "string"
          },
          "priceListCode" : {
            "type" : "string"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "discountPlanInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstanceDto"
            }
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodDto"
          },
          "customerService" : {
            "type" : "string"
          },
          "salesPersonName" : {
            "type" : "string",
            "description" : "The sales person name"
          },
          "discountPlanInstancesToRemove" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanInstancesToRemove"
              }
            }
          },
          "contractCode" : {
            "type" : "string",
            "description" : "code of existing contract"
          },
          "purchaseOrders" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "productToInstantiateDto" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductToInstantiateDto"
            }
          }
        }
      },
      "SubscriptionAndServicesToActivateRequestDto" : {
        "required" : [ "billingCycle", "code", "offerTemplate", "seller", "subscriptionDate", "userAccount", "versionNumber" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "versionNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nextVersion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previousVersion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAccount" : {
            "type" : "string"
          },
          "offerTemplate" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endAgreementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CREATED", "ACTIVE", "CANCELED", "RESILIATED", "CLOSED", "SUSPENDED", "PENDING", "WAITING_MANDATORY" ]
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "validityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "accesses" : {
            "$ref" : "#/components/schemas/AccessesDto"
          },
          "services" : {
            "$ref" : "#/components/schemas/ServiceInstancesDto"
          },
          "products" : {
            "$ref" : "#/components/schemas/ProductsDto"
          },
          "productInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductInstanceDto"
            }
          },
          "productsToInstantiate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductToInstantiateDto"
            }
          },
          "terminationReason" : {
            "type" : "string"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string"
          },
          "minimumChargeTemplate" : {
            "type" : "string"
          },
          "subscribedTillDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewed" : {
            "type" : "boolean"
          },
          "renewalNotifiedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "billingCycle" : {
            "type" : "string"
          },
          "seller" : {
            "type" : "string",
            "description" : "Seller code"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "ratingGroup" : {
            "type" : "string"
          },
          "electronicBilling" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          },
          "mailingType" : {
            "type" : "string"
          },
          "emailTemplate" : {
            "type" : "string"
          },
          "ccedEmails" : {
            "type" : "string"
          },
          "priceListCode" : {
            "type" : "string"
          },
          "discountPlansForInstantiation" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "discountPlansForTermination" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanForTermination"
              }
            }
          },
          "discountPlanInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanInstanceDto"
            }
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodDto"
          },
          "customerService" : {
            "type" : "string"
          },
          "salesPersonName" : {
            "type" : "string",
            "description" : "The sales person name"
          },
          "discountPlanInstancesToRemove" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "discountPlanInstancesToRemove"
              }
            }
          },
          "contractCode" : {
            "type" : "string",
            "description" : "code of existing contract"
          },
          "purchaseOrders" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "servicesToActivateDto" : {
            "$ref" : "#/components/schemas/ServicesToActivateDto"
          }
        }
      },
      "TerminateSubscriptionServicesRequestDto" : {
        "required" : [ "subscriptionCode", "terminationDate", "terminationReason" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "services" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "serviceIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "action" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "ADD", "MODIFY", "DELETE" ]
          }
        },
        "xml" : {
          "name" : "TerminateSubscriptionServicesRequest"
        }
      },
      "TerminateSubscriptionRequestDto" : {
        "required" : [ "subscriptionCode", "terminationDate", "terminationReason" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationReason" : {
            "type" : "string"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "xml" : {
          "name" : "TerminateSubscriptionRequest"
        }
      },
      "UpdateServicesRequestDto" : {
        "required" : [ "subscriptionCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "subscriptionValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "servicesToUpdate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ServiceToUpdateDto"
            }
          },
          "autoEndOfEngagement" : {
            "type" : "boolean"
          },
          "rateUntilDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "minimumAmountEl" : {
            "type" : "string"
          },
          "minimumLabelEl" : {
            "type" : "string"
          },
          "attributeInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeInstanceDto"
            }
          },
          "priceVersionDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "xml" : {
          "name" : "UpdateServicesRequest"
        }
      },
      "WalletReservationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "reservationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "providerCode" : {
            "type" : "string"
          },
          "sellerCode" : {
            "type" : "string"
          },
          "offerCode" : {
            "type" : "string"
          },
          "userAccountCode" : {
            "type" : "string"
          },
          "subscriptionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creditLimit" : {
            "type" : "number"
          },
          "param1" : {
            "type" : "string"
          },
          "param2" : {
            "type" : "string"
          },
          "param3" : {
            "type" : "string"
          },
          "amountWithTax" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "WalletReservation"
        }
      },
      "AmountsDto" : {
        "type" : "object",
        "properties" : {
          "amountWithTax" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          }
        }
      },
      "WalletBalanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "amounts" : {
            "$ref" : "#/components/schemas/AmountsDto"
          }
        },
        "xml" : {
          "name" : "WalletBalanceResponse"
        }
      },
      "WalletBalanceDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "sellerCode" : {
            "type" : "string"
          },
          "customerCode" : {
            "type" : "string"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "billingAccountCode" : {
            "type" : "string"
          },
          "userAccountCode" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "walletCode" : {
            "type" : "string"
          },
          "amountWithTax" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "WalletBalance"
        }
      },
      "FindWalletOperationsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "walletOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperationDto"
            }
          }
        },
        "xml" : {
          "name" : "FindWalletOperationsResponse"
        }
      },
      "FindWalletOperationsDto" : {
        "required" : [ "userAccount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "TREATED", "CANCELED", "RESERVED", "F_TO_RERATE", "TO_RERATE", "RERATED", "SCHEDULED", "REJECTED" ]
          },
          "walletTemplate" : {
            "type" : "string"
          },
          "userAccount" : {
            "type" : "string"
          },
          "fromDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "toDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeTemplateCode" : {
            "type" : "string"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "offerTemplateCode" : {
            "type" : "string"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "orderNumber" : {
            "type" : "string"
          }
        }
      },
      "GetWalletTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "walletTemplate" : {
            "$ref" : "#/components/schemas/WalletTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetWalletTemplateResponse"
        }
      },
      "BundleProductTemplateDto" : {
        "type" : "object",
        "properties" : {
          "productTemplate" : {
            "$ref" : "#/components/schemas/ProductTemplateDto"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "BundleProductTemplate"
        }
      },
      "BundleTemplateDto" : {
        "required" : [ "bundleProductTemplates", "code", "lifeCycleStatus", "name", "productChargeTemplates" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          },
          "channels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChannelDto"
            }
          },
          "attachments" : {
            "type" : "array",
            "xml" : {
              "name" : "digitalResources",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DigitalResourceDto"
            }
          },
          "modelCode" : {
            "type" : "string"
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "imagePath" : {
            "type" : "string"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "globalRatingScriptInstance" : {
            "type" : "string"
          },
          "sellers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "seller"
              }
            }
          },
          "customerCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategoryDto"
            }
          },
          "productChargeTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplateDto"
            }
          },
          "businessProductModel" : {
            "$ref" : "#/components/schemas/BusinessProductModelDto"
          },
          "walletTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/WalletTemplateDto"
            }
          },
          "bundleProductTemplates" : {
            "type" : "array",
            "xml" : {
              "name" : "bundleProducts",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BundleProductTemplateDto"
            }
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "BundleTemplate"
        }
      },
      "BusinessOfferModelDto" : {
        "required" : [ "code", "offerTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "license" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "type" : "string"
          },
          "logoPictureFile" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          },
          "moduleItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BaseEntityDto"
            }
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplateDto"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "BusinessOfferModel"
        }
      },
      "GetBusinessOfferModelResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "businessOfferModel" : {
            "$ref" : "#/components/schemas/BusinessOfferModelDto"
          }
        },
        "xml" : {
          "name" : "GetBusinessOfferModelResponse"
        }
      },
      "GetBusinessProductModelResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "businessProductModel" : {
            "$ref" : "#/components/schemas/BusinessProductModelDto"
          }
        },
        "xml" : {
          "name" : "GetBusinessProductModelResponse"
        }
      },
      "BusinessServiceModelDto" : {
        "required" : [ "code", "serviceTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "license" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "APACHE", "BSD3_N", "BSD3_R", "BSD2_S", "FREE_BSD", "GPL", "AGPL", "LGPL", "MIT", "MOZ", "CDDL", "EPL", "OPEN", "COM" ]
          },
          "logoPicture" : {
            "type" : "string"
          },
          "logoPictureFile" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          },
          "moduleItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BaseEntityDto"
            }
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplateDto"
          },
          "duplicateService" : {
            "type" : "boolean"
          },
          "duplicatePricePlan" : {
            "type" : "boolean"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "transient" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "BusinessServiceModel"
        }
      },
      "GetBusinessServiceModelResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "businessServiceModel" : {
            "$ref" : "#/components/schemas/BusinessServiceModelDto"
          }
        },
        "xml" : {
          "name" : "GetBusinessServiceModelResponse"
        }
      },
      "GetChannelResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDto"
          }
        },
        "xml" : {
          "name" : "GetChannelResponse"
        }
      },
      "GetListChannelsAndSegmentsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelDto"
            }
          },
          "segments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "GetChannelResponse"
        }
      },
      "ChargeTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "type" : "string",
            "description" : "The invoice sub category"
          },
          "amountEditable" : {
            "type" : "boolean",
            "description" : "The amount can be editable"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "inputUnitDescription" : {
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "inputUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of unit  measure"
          },
          "ratingUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of rating unit of measure"
          },
          "inputUnitEL" : {
            "type" : "string",
            "description" : "input unit expression language"
          },
          "outputUnitEL" : {
            "type" : "string",
            "description" : "output unit expression language"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "EDR and WO quantity field value precision",
            "format" : "int32"
          },
          "roundingModeDtoEnum" : {
            "type" : "string",
            "description" : "EDR and WO quantity field value rounding",
            "example" : "possible value are : NEAREST, DOWN, UP",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRuleCode" : {
            "type" : "string",
            "description" : "The revenue recognition rule code"
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The filter expression"
          },
          "taxClassCode" : {
            "type" : "string",
            "description" : "code of tax class"
          },
          "taxClassEl" : {
            "type" : "string",
            "description" : "Expression to determine tax class"
          },
          "ratingScriptCode" : {
            "type" : "string",
            "description" : "Code of a rating script"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "triggeredEdrs" : {
            "$ref" : "#/components/schemas/TriggeredEdrTemplatesDto"
          },
          "dropZeroWo" : {
            "type" : "boolean",
            "description" : "Enable/disable removing WO rated to 0"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Sorting index EL"
          },
          "status" : {
            "type" : "string",
            "description" : "ChargeTemplate status",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "linkedAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "internalNote" : {
            "type" : "string",
            "description" : "Internal Note"
          },
          "pricePlanCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pricePlanMatrixes" : {
            "type" : "array",
            "description" : "price plan matrixes",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "businessKeyEl" : {
            "type" : "string",
            "description" : "Business Key El"
          },
          "businessKeyDescription" : {
            "type" : "string",
            "description" : "Business Key Description"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "description" : "Format of Business Key",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Business Key Mandatory?"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean",
            "description" : "Is Business Key Hidden?"
          },
          "quantityAttribute" : {
            "type" : "string",
            "description" : "Code of quantity attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean",
            "description" : "indicate if rating script uses price versions"
          }
        },
        "xml" : {
          "name" : "ChargeTemplate"
        }
      },
      "GetChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "chargeTemplate" : {
            "$ref" : "#/components/schemas/ChargeTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetChargeTemplateResponse"
        }
      },
      "CounterTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "calendar" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "calendarCodeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "unity" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "USAGE", "NOTIFICATION", "USAGE_AMOUNT" ]
          },
          "ceiling" : {
            "type" : "number"
          },
          "counterLevel" : {
            "type" : "string",
            "enum" : [ "SI", "SU", "UA", "BA", "CA", "CUST" ]
          },
          "ceilingExpressionEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "notificationLevels" : {
            "type" : "string"
          },
          "accumulator" : {
            "type" : "boolean"
          },
          "accumulatorType" : {
            "type" : "string",
            "enum" : [ "MULTI_VALUE", "SINGLE_VALUE" ]
          },
          "filterEl" : {
            "type" : "string"
          },
          "keyEl" : {
            "type" : "string"
          },
          "valueEl" : {
            "type" : "string"
          },
          "managedByApp" : {
            "type" : "boolean"
          },
          "sharedCounter" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "CounterTemplate"
        }
      },
      "GetCounterTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "counterTemplate" : {
            "$ref" : "#/components/schemas/CounterTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetCounterTemplateResponse"
        }
      },
      "CounterTemplatesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "counterTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "CounterTemplatesResponse"
        }
      },
      "TradingDiscountPlanItemDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "discountPlanItemId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tradingDiscountValue" : {
            "type" : "number"
          },
          "rate" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/CurrencyDto"
          }
        }
      },
      "DiscountPlanItemResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "discountPlanItem" : {
            "$ref" : "#/components/schemas/DiscountPlanItemDto"
          }
        },
        "xml" : {
          "name" : "DiscountPlanItemResponse"
        }
      },
      "DiscountPlanItemsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "discountPlanItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanItemDto"
            }
          }
        },
        "xml" : {
          "name" : "DiscountPlanItemsResponse"
        }
      },
      "DiscountPlansDto" : {
        "type" : "object",
        "properties" : {
          "discountPlan" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          }
        }
      },
      "GetDiscountPlansResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "discountPlan" : {
            "$ref" : "#/components/schemas/DiscountPlansDto"
          }
        },
        "xml" : {
          "name" : "GetDiscountPlansResponse"
        }
      },
      "GetDiscountPlanResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "discountPlanDto" : {
            "$ref" : "#/components/schemas/DiscountPlanDto"
          }
        },
        "xml" : {
          "name" : "GetDiscountPlanResponse"
        }
      },
      "GetOfferTemplateCategoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "offerTemplateCategory" : {
            "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
          }
        },
        "xml" : {
          "name" : "GetOfferTemplateResponse"
        }
      },
      "OfferTemplateCategoriesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "OfferTemplateCategoriesResponse"
        }
      },
      "GetOfferTemplateResponseDto" : {
        "required" : [ "code", "lifeCycleStatus", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "newValidTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string"
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          },
          "channels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChannelDto"
            }
          },
          "attachments" : {
            "type" : "array",
            "xml" : {
              "name" : "digitalResources",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DigitalResourceDto"
            }
          },
          "modelCode" : {
            "type" : "string"
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "imagePath" : {
            "type" : "string"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "globalRatingScriptInstance" : {
            "type" : "string"
          },
          "sellers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "seller"
              }
            }
          },
          "customerCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomerCategoryDto"
            }
          },
          "bomCode" : {
            "type" : "string",
            "description" : "the bom code"
          },
          "offerTemplateCategoryCode" : {
            "type" : "string"
          },
          "offerServiceTemplates" : {
            "type" : "array",
            "description" : "list of the offer service templates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferServiceTemplateDto"
            }
          },
          "offerProductTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferProductTemplateDto"
            }
          },
          "offerProducts" : {
            "type" : "array",
            "description" : "list of The offer component",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferProductsDto"
            }
          },
          "allowedDiscountPlans" : {
            "type" : "array",
            "description" : "list of The offer product template",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "offerAttributes" : {
            "type" : "array",
            "description" : "list of attributes",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttributeDTO"
            }
          },
          "attributes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/AttributeDTO"
            }
          },
          "commercialRuleCodes" : {
            "type" : "array",
            "description" : "list of codes of commercial rules",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "description" : "list of codes of commercial rules",
              "xml" : {
                "name" : "commercialRuleCodes"
              }
            }
          },
          "allowedOfferChange" : {
            "type" : "array",
            "description" : "list of allowed offer change",
            "items" : {
              "type" : "string",
              "description" : "list of allowed offer change"
            }
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "minimumAmountEl" : {
            "type" : "string",
            "description" : "Expression to determine minimum amount value"
          },
          "minimumLabelEl" : {
            "type" : "string",
            "description" : "Expression to determine labe value"
          },
          "minimumInvoiceSubCategory" : {
            "type" : "string",
            "description" : "Corresponding to minimum invoice subcategory"
          },
          "autoEndOfEngagement" : {
            "type" : "boolean",
            "description" : "indicate end of engagement"
          },
          "minimumChargeTemplate" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "last update status datetime",
            "format" : "date-time"
          },
          "isModel" : {
            "type" : "boolean",
            "description" : "allowing to create,update and delete an offer from a model"
          },
          "offerModelCode" : {
            "type" : "string",
            "description" : "Offer template code"
          },
          "generateQuoteEdrPerProduct" : {
            "type" : "boolean",
            "description" : "allow to generate each edr per product"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "sequence of the Offer Template",
            "format" : "int32"
          },
          "documentCode" : {
            "type" : "string"
          },
          "display" : {
            "type" : "boolean",
            "description" : "display of the Offer Template"
          },
          "offerTemplate" : {
            "$ref" : "#/components/schemas/OfferTemplateDto"
          },
          "tags" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TagDto"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "offerChangeRestricted" : {
            "type" : "boolean"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "GetOfferTemplateResponse"
        }
      },
      "MissingParameterException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "EntityDoesNotExistsException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "BusinessException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "ProductOfferTemplateDto" : {
        "required" : [ "code", "products" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "products" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferProductsDto"
            }
          }
        },
        "xml" : {
          "name" : "ProductOfferTemplateDto"
        }
      },
      "EntityAlreadyExistsException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "InvalidParameterException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "InvalidImageData" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "GetListOfferTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "offerTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListOfferTemplateResponse"
        }
      },
      "CpqOfferDto" : {
        "required" : [ "code", "lifeCycleStatus", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "bomCode" : {
            "type" : "string"
          },
          "offerServiceTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferServiceTemplateDto"
            }
          },
          "offerProducts" : {
            "type" : "array",
            "xml" : {
              "name" : "offerComponents",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferProductsDto"
            }
          },
          "allowedDiscountPlans" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "tags" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TagDto"
            }
          },
          "attributes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttributeDTO"
            }
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string"
          },
          "attachments" : {
            "type" : "array",
            "xml" : {
              "name" : "digitalResources",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DigitalResourceDto"
            }
          },
          "lifeCycleStatus" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "CpqOfferDto"
        }
      },
      "GetListCpqOfferResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "offers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CpqOfferDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListCpqOfferResponseDto"
        }
      },
      "CustomerContextDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "The billing account code"
          },
          "sellerTags" : {
            "type" : "array",
            "description" : "The the seller tags",
            "items" : {
              "type" : "string",
              "description" : "The the seller tags"
            }
          },
          "customerTags" : {
            "type" : "array",
            "description" : "The customer tags",
            "items" : {
              "type" : "string",
              "description" : "The customer tags"
            }
          },
          "contractCode" : {
            "type" : "string",
            "description" : "The contract code"
          },
          "requestedTagTypes" : {
            "type" : "array",
            "description" : "requested tag types",
            "items" : {
              "type" : "string",
              "description" : "requested tag types"
            }
          },
          "pagingAndFiltering" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          }
        },
        "description" : "information for customer",
        "xml" : {
          "name" : "CustomerContextDTO"
        }
      },
      "EnableOfferTemplateDto" : {
        "type" : "object",
        "properties" : {
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Provided filters to filter Offer Template"
            },
            "description" : "Provided filters to filter Offer Template"
          }
        },
        "xml" : {
          "name" : "EnableOfferTemplateDto"
        }
      },
      "GetOneShotChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "oneShotChargeTemplate" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetOneShotChargeTemplateResponse"
        }
      },
      "OneShotChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "oneShotChargeTemplates" : {
            "$ref" : "#/components/schemas/OneShotChargeTemplatesDto"
          }
        }
      },
      "OneShotChargeTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "oneShotChargeTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OneShotChargeTemplateDto"
            }
          }
        }
      },
      "OneShotChargeTemplateWithPriceDto" : {
        "type" : "object",
        "properties" : {
          "chargeCode" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "unitPriceWithoutTax" : {
            "type" : "number",
            "format" : "double"
          },
          "taxPercent" : {
            "type" : "number",
            "format" : "double"
          },
          "taxCode" : {
            "type" : "string"
          },
          "taxDescription" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "OneShotChargeTemplate"
        }
      },
      "OneShotChargeTemplateWithPriceListDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "oneShotChargeTemplateDtos" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OneShotChargeTemplateWithPriceDto"
            }
          }
        },
        "xml" : {
          "name" : "OneShotChargeTemplateList"
        }
      },
      "GetPricePlanVersionResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "pricePlanVersion" : {
            "$ref" : "#/components/schemas/PricePlanMatrixVersionDto"
          }
        },
        "xml" : {
          "name" : "GetPricePlanVersionResponse"
        }
      },
      "PricePlanMatrixLinesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "pricePlanMatrixCode" : {
            "type" : "string",
            "description" : "The price plan matrix code"
          },
          "pricePlanMatrixVersion" : {
            "type" : "integer",
            "description" : "The price plan matrix version",
            "format" : "int32"
          },
          "pricePlanMatrixLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixLineDto"
            }
          },
          "pricePlanMatrixLineDto" : {
            "$ref" : "#/components/schemas/PricePlanMatrixLineDto"
          }
        },
        "xml" : {
          "name" : "PricePlanMatrixLinesDto"
        }
      },
      "TradingPricePlanVersionDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "pricePlanMatrixVersionId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tradingPrice" : {
            "type" : "number"
          },
          "rate" : {
            "type" : "number"
          },
          "useForBillingAccounts" : {
            "type" : "boolean"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/CurrencyDto"
          },
          "tradingPriceEl" : {
            "type" : "string"
          }
        }
      },
      "TradingPricePlanInputDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "pricePlanMatrixVersionId" : {
            "type" : "integer",
            "description" : "price plan matrix version id",
            "format" : "int64"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/TradingCurrencyDto"
          }
        }
      },
      "DatePeriodDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          }
        },
        "xml" : {
          "name" : "Validity"
        }
      },
      "GetPricePlanResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "pricePlan" : {
            "$ref" : "#/components/schemas/PricePlanMatrixDto"
          }
        },
        "xml" : {
          "name" : "GetPricePlanResponse"
        }
      },
      "GetPricePlanMatrixResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "chargeCode" : {
            "type" : "string",
            "description" : "The charge code"
          },
          "pricePlan" : {
            "$ref" : "#/components/schemas/PricePlanData"
          }
        },
        "description" : "Price plan matrix response"
      },
      "PricePlanData" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The price plan code"
          },
          "version" : {
            "type" : "integer",
            "description" : "The version number",
            "format" : "int32"
          },
          "price" : {
            "type" : "number",
            "description" : "The price value"
          },
          "priceEl" : {
            "type" : "string",
            "description" : "The price EL expression"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date of validity",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "End date of validity",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Version status",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "columns" : {
            "type" : "array",
            "description" : "List of column codes",
            "items" : {
              "type" : "string",
              "description" : "List of column codes"
            }
          },
          "matrix" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string",
                "description" : "Matrix data mapping line IDs to column values"
              },
              "description" : "Matrix data mapping line IDs to column values"
            },
            "description" : "Matrix data mapping line IDs to column values"
          }
        },
        "description" : "Price plan data"
      },
      "PricePlanMatrixesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "pricePlanMatrixes" : {
            "$ref" : "#/components/schemas/PricePlansDto"
          }
        },
        "xml" : {
          "name" : "PricePlanMatrixesResponse"
        }
      },
      "PricePlansDto" : {
        "type" : "object",
        "properties" : {
          "pricePlanMatrix" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixDto"
            }
          }
        }
      },
      "GetProductDtoResponse" : {
        "required" : [ "code", "label" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Id of the product",
            "format" : "int64"
          },
          "discountList" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountPlanDto"
            }
          },
          "code" : {
            "type" : "string",
            "description" : "Code of the product"
          },
          "label" : {
            "type" : "string",
            "description" : "Description of the product"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the product",
            "enum" : [ "DRAFT", "ACTIVE", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "Datetime of the status",
            "format" : "date-time"
          },
          "productLineCode" : {
            "type" : "string",
            "description" : "Product line code related to product"
          },
          "brandCode" : {
            "type" : "string",
            "description" : "Bran code related to product"
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference"
          },
          "model" : {
            "type" : "string",
            "description" : "The model of the product"
          },
          "modelChildren" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of model children",
            "items" : {
              "type" : "string",
              "description" : "List of model children"
            }
          },
          "discountFlag" : {
            "type" : "boolean",
            "description" : "Indicate if the discount is activate",
            "default" : false
          },
          "packageFlag" : {
            "type" : "boolean",
            "description" : "Indicate if the product packaged",
            "default" : false
          },
          "priceVersionDateSetting" : {
            "type" : "string",
            "description" : "Price version date setting",
            "enum" : [ "QUOTE", "DELIVERY", "RENEWAL", "EVENT", "MANUAL" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "currentProductVersion" : {
            "$ref" : "#/components/schemas/ProductVersionDto"
          },
          "productChargeTemplateMappingDto" : {
            "type" : "array",
            "description" : "List product charge template mapping",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplateMappingDto"
            }
          },
          "discountListCodes" : {
            "type" : "array",
            "description" : "List discount list code",
            "items" : {
              "type" : "string",
              "description" : "List discount list code"
            }
          },
          "isModel" : {
            "type" : "boolean",
            "description" : "allowing to create,update and delete an product from a model"
          },
          "productModelCode" : {
            "type" : "string",
            "description" : "product model code"
          },
          "agreementDateSetting" : {
            "type" : "string",
            "description" : "Agreeemnt date Setting",
            "enum" : [ "COPY", "INHERIT", "MANUAL" ]
          },
          "productVersions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProductVersionResponse"
            }
          },
          "chargeTemplates" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChargeTemplateDto"
            }
          },
          "commercialHeaderRules" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "name" : "commercialRules",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
            }
          },
          "medias" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/MediaDto"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          }
        },
        "xml" : {
          "name" : "GetProductDtoResponse"
        }
      },
      "GetProductVersionResponse" : {
        "required" : [ "currentVersion", "productCode", "shortDescription" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "shortDescription" : {
            "type" : "string",
            "description" : "The short description of the product version",
            "xml" : {
              "attribute" : true
            }
          },
          "productCode" : {
            "type" : "string",
            "description" : "The product code"
          },
          "currentVersion" : {
            "type" : "integer",
            "description" : "The current version of the product",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the product version",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The statusDate : is set automatically when the status was changed",
            "format" : "date-time"
          },
          "longDescription" : {
            "type" : "string",
            "description" : "The long description"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "productAttributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of the attribute",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttributeDTO"
            }
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/AttributeDTO"
            }
          },
          "tagList" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "name" : "tags",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TagDto"
            }
          },
          "groupedAttributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/GroupedAttributeDto"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          }
        },
        "xml" : {
          "name" : "GetProductVersionResponse"
        }
      },
      "GetProductLineDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "productLineDto" : {
            "$ref" : "#/components/schemas/ProductLineDto"
          }
        },
        "xml" : {
          "name" : "GetProductLineDtoResponse"
        }
      },
      "ProductLineDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "sellerCode" : {
            "type" : "string"
          },
          "longDescription" : {
            "type" : "string"
          },
          "parentLineCode" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "ProductLineDto"
        }
      },
      "GetListProductVersionsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "productVersions" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListProductVersionsResponseDto"
        }
      },
      "GetCpqOfferResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "cpqOfferDto" : {
            "$ref" : "#/components/schemas/CpqOfferDto"
          }
        },
        "xml" : {
          "name" : "GetCpqOfferResponseDto"
        }
      },
      "OfferContextConfigDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "loadAttributeTags" : {
            "type" : "boolean",
            "description" : "Load related Tag of Attribute"
          },
          "loadAttributeGroupedAttribute" : {
            "type" : "boolean",
            "description" : "Load related GroupedAttribute of Attribute"
          },
          "loadAttributeChargeTemplates" : {
            "type" : "boolean",
            "description" : "Load related ChargeTemplate of Attribute"
          },
          "loadAttributeAssignedAttr" : {
            "type" : "boolean",
            "description" : "Load related AssignedAttribute of Attribute"
          },
          "loadAttributeMedia" : {
            "type" : "boolean",
            "description" : "Load related Media of Attribute"
          }
        },
        "description" : "Context config",
        "xml" : {
          "name" : "OfferContextDTO"
        }
      },
      "OfferContextDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "offerCode" : {
            "type" : "string",
            "description" : "code of offer template"
          },
          "customerContextDTO" : {
            "$ref" : "#/components/schemas/CustomerContextDTO"
          },
          "quoteLotCode" : {
            "type" : "string",
            "description" : "code of quote lot"
          },
          "selectedProducts" : {
            "type" : "array",
            "description" : "The selected products in the quote",
            "items" : {
              "$ref" : "#/components/schemas/ProductContextDTO"
            }
          },
          "selectedOfferAttributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "The selected services in the quote with their values, DO NOT change to Map. Used LinkedHashMap to preserve the item order during read/write"
            },
            "description" : "The selected services in the quote with their values, DO NOT change to Map. Used LinkedHashMap to preserve the item order during read/write"
          },
          "config" : {
            "$ref" : "#/components/schemas/OfferContextConfigDTO"
          }
        },
        "xml" : {
          "name" : "OfferContextDTO"
        }
      },
      "ProductContextDTO" : {
        "required" : [ "producVersion", "productCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "productCode" : {
            "type" : "string",
            "description" : "The selected product code in the quote"
          },
          "producVersion" : {
            "type" : "integer",
            "description" : "The selected product version in the quote",
            "format" : "int32"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The product quantity",
            "format" : "int32"
          },
          "selectedAttributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "The selected services in the quote with their values, DO NOT change to Map. Used LinkedHashMap to preserve the item order during read/write"
            },
            "description" : "The selected services in the quote with their values, DO NOT change to Map. Used LinkedHashMap to preserve the item order during read/write"
          },
          "selectedGroupedAttributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "selected grouped attribute"
            },
            "description" : "selected grouped attribute"
          }
        },
        "description" : "The selected products in the quote",
        "xml" : {
          "name" : "ProductContextDTO"
        }
      },
      "GetListProductsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "products" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ProductDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListProductsResponseDto"
        }
      },
      "RecurringChargeTemplateDto" : {
        "required" : [ "calendar", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "type" : "string",
            "description" : "The invoice sub category"
          },
          "amountEditable" : {
            "type" : "boolean",
            "description" : "The amount can be editable"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "inputUnitDescription" : {
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "inputUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of unit  measure"
          },
          "ratingUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of rating unit of measure"
          },
          "inputUnitEL" : {
            "type" : "string",
            "description" : "input unit expression language"
          },
          "outputUnitEL" : {
            "type" : "string",
            "description" : "output unit expression language"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "EDR and WO quantity field value precision",
            "format" : "int32"
          },
          "roundingModeDtoEnum" : {
            "type" : "string",
            "description" : "EDR and WO quantity field value rounding",
            "example" : "possible value are : NEAREST, DOWN, UP",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRuleCode" : {
            "type" : "string",
            "description" : "The revenue recognition rule code"
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The filter expression"
          },
          "taxClassCode" : {
            "type" : "string",
            "description" : "code of tax class"
          },
          "taxClassEl" : {
            "type" : "string",
            "description" : "Expression to determine tax class"
          },
          "ratingScriptCode" : {
            "type" : "string",
            "description" : "Code of a rating script"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "triggeredEdrs" : {
            "$ref" : "#/components/schemas/TriggeredEdrTemplatesDto"
          },
          "dropZeroWo" : {
            "type" : "boolean",
            "description" : "Enable/disable removing WO rated to 0"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Sorting index EL"
          },
          "status" : {
            "type" : "string",
            "description" : "ChargeTemplate status",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "linkedAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "internalNote" : {
            "type" : "string",
            "description" : "Internal Note"
          },
          "pricePlanCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pricePlanMatrixes" : {
            "type" : "array",
            "description" : "price plan matrixes",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "businessKeyEl" : {
            "type" : "string",
            "description" : "Business Key El"
          },
          "businessKeyDescription" : {
            "type" : "string",
            "description" : "Business Key Description"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "description" : "Format of Business Key",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Business Key Mandatory?"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean",
            "description" : "Is Business Key Hidden?"
          },
          "quantityAttribute" : {
            "type" : "string",
            "description" : "Code of quantity attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean",
            "description" : "indicate if rating script uses price versions"
          },
          "calendar" : {
            "type" : "string",
            "description" : "the calendar"
          },
          "durationTermInMonth" : {
            "type" : "integer",
            "description" : "The duration term in month",
            "format" : "int32"
          },
          "subscriptionProrata" : {
            "type" : "boolean",
            "description" : "The subscription prorata"
          },
          "terminationProrata" : {
            "type" : "boolean",
            "description" : "The termination prorata"
          },
          "applyInAdvance" : {
            "type" : "boolean",
            "description" : "The apply in advance"
          },
          "shareLevel" : {
            "type" : "integer",
            "description" : "The share level",
            "format" : "int32"
          },
          "calendarCodeEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The calendar code expression language"
          },
          "durationTermInMonthEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The duration term in month on expression language"
          },
          "subscriptionProrataEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The subscription prorata on expression language"
          },
          "terminationProrataEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The termination prorata on expression language"
          },
          "applyInAdvanceEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The apply in advance on expression language"
          },
          "applyTerminatedChargeToDateEL" : {
            "type" : "string",
            "description" : "Expression to determine and override the date that recurring charge should be charged to upon charge/service termination"
          },
          "recurrenceType" : {
            "type" : "string",
            "description" : "recrrence type",
            "example" : "possible value are : CALENDAR, PERIOD",
            "default" : "CALENDAR",
            "enum" : [ "CALENDAR", "PERIOD" ]
          },
          "attributeDurationCode" : {
            "type" : "string",
            "description" : "code of attribute duration"
          },
          "attributeCalendarCode" : {
            "type" : "string",
            "description" : "code of attribute calendar"
          },
          "anticipateEndOfSubscription" : {
            "type" : "boolean",
            "description" : "The flag to anticipate the end of Subscription"
          }
        },
        "xml" : {
          "name" : "RecurringChargeTemplate"
        }
      },
      "GetRecurringChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "recurringChargeTemplate" : {
            "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetRecurringChargeTemplateResponse"
        }
      },
      "RecurringChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "recurringChargeTemplates" : {
            "$ref" : "#/components/schemas/RecurringChargeTemplatesDto"
          }
        },
        "xml" : {
          "name" : "RecurringChargeTemplateResponse"
        }
      },
      "RecurringChargeTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "recurringChargeTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecurringChargeTemplateDto"
            }
          }
        }
      },
      "GetServiceTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "serviceTemplate" : {
            "$ref" : "#/components/schemas/ServiceTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetServiceTemplateResponse"
        }
      },
      "GetListServiceTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "listServiceTemplate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListServiceTemplateResponse"
        }
      },
      "GetTriggeredEdrResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "triggeredEdrTemplate" : {
            "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetTriggeredEdrResponse"
        }
      },
      "TriggeredEdrsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "triggeredEdrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TriggeredEdrTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "TriggeredEdrsResponse"
        }
      },
      "UnitOfMeasureDto" : {
        "required" : [ "code", "symbol" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "symbol" : {
            "type" : "string"
          },
          "multiplicator" : {
            "type" : "integer",
            "format" : "int64"
          },
          "parentUOMCode" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "UnitOfMeasure"
        }
      },
      "GetUnitOfMeasureResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "unitOfMeasure" : {
            "$ref" : "#/components/schemas/UnitOfMeasureDto"
          }
        },
        "xml" : {
          "name" : "GetUnitOfMeasureResponse"
        }
      },
      "GetListUnitOfMeasureResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "listUnitOfMeasure" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UnitOfMeasureDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListUnitOfMeasureResponse"
        }
      },
      "UsageChargeTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "invoiceSubCategory" : {
            "type" : "string",
            "description" : "The invoice sub category"
          },
          "amountEditable" : {
            "type" : "boolean",
            "description" : "The amount can be editable"
          },
          "languageDescriptions" : {
            "type" : "array",
            "description" : "list of the language description",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "inputUnitDescription" : {
            "type" : "string"
          },
          "ratingUnitDescription" : {
            "type" : "string"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "inputUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of unit  measure"
          },
          "ratingUnitOfMeasureCode" : {
            "type" : "string",
            "description" : "code of rating unit of measure"
          },
          "inputUnitEL" : {
            "type" : "string",
            "description" : "input unit expression language"
          },
          "outputUnitEL" : {
            "type" : "string",
            "description" : "output unit expression language"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "EDR and WO quantity field value precision",
            "format" : "int32"
          },
          "roundingModeDtoEnum" : {
            "type" : "string",
            "description" : "EDR and WO quantity field value rounding",
            "example" : "possible value are : NEAREST, DOWN, UP",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "revenueRecognitionRuleCode" : {
            "type" : "string",
            "description" : "The revenue recognition rule code"
          },
          "filterExpression" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The filter expression"
          },
          "taxClassCode" : {
            "type" : "string",
            "description" : "code of tax class"
          },
          "taxClassEl" : {
            "type" : "string",
            "description" : "Expression to determine tax class"
          },
          "ratingScriptCode" : {
            "type" : "string",
            "description" : "Code of a rating script"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "triggeredEdrs" : {
            "$ref" : "#/components/schemas/TriggeredEdrTemplatesDto"
          },
          "dropZeroWo" : {
            "type" : "boolean",
            "description" : "Enable/disable removing WO rated to 0"
          },
          "sortIndexEl" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Sorting index EL"
          },
          "status" : {
            "type" : "string",
            "description" : "ChargeTemplate status",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "linkedAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "internalNote" : {
            "type" : "string",
            "description" : "Internal Note"
          },
          "pricePlanCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pricePlanMatrixes" : {
            "type" : "array",
            "description" : "price plan matrixes",
            "items" : {
              "$ref" : "#/components/schemas/PricePlanMatrixDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "businessKeyEl" : {
            "type" : "string",
            "description" : "Business Key El"
          },
          "businessKeyDescription" : {
            "type" : "string",
            "description" : "Business Key Description"
          },
          "businessKeyTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Business Key",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "businessKeyFormat" : {
            "type" : "string",
            "description" : "Format of Business Key",
            "enum" : [ "TEXT", "INTEGER" ]
          },
          "businessKeyIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Business Key Mandatory?"
          },
          "businessKeyIsHidden" : {
            "type" : "boolean",
            "description" : "Is Business Key Hidden?"
          },
          "quantityAttribute" : {
            "type" : "string",
            "description" : "Code of quantity attribute"
          },
          "ratingScriptUsesPriceVersions" : {
            "type" : "boolean",
            "description" : "indicate if rating script uses price versions"
          },
          "filterParam1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "first filter parameter"
          },
          "filterParam2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "second filter parameter"
          },
          "filterParam3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "third filter parameter"
          },
          "filterParam4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "fourth filter parameter"
          },
          "priority" : {
            "type" : "integer",
            "description" : "The priority",
            "format" : "int32"
          },
          "triggerNextCharge" : {
            "type" : "boolean",
            "description" : "If set to true and (charge has no counter associated) then the next matching charge with the full quantity of the EDR"
          },
          "triggerNextChargeEL" : {
            "type" : "string",
            "description" : "Overrides the triggerNextCharge switch"
          },
          "usageQuantityAttributeCode" : {
            "type" : "string",
            "description" : "code of usage attribute quantity"
          }
        },
        "xml" : {
          "name" : "UsageChargeTemplate"
        }
      },
      "GetUsageChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "usageChargeTemplate" : {
            "$ref" : "#/components/schemas/UsageChargeTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetUsageChargeTemplateResponse"
        }
      },
      "UsageChargeTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "usageChargeTemplates" : {
            "$ref" : "#/components/schemas/UsageChargeTemplatesDto"
          }
        },
        "xml" : {
          "name" : "UsageChargeTemplateResponse"
        }
      },
      "UsageChargeTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "usageChargeTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UsageChargeTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "UsageChargeTemplates"
        }
      },
      "CommunicationRequestDto" : {
        "required" : [ "macAddress", "meveoInstanceCode", "subject" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "meveoInstanceCode" : {
            "type" : "string"
          },
          "macAddress" : {
            "type" : "string"
          },
          "subject" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          },
          "additionnalInfo1" : {
            "type" : "string"
          },
          "additionnalInfo2" : {
            "type" : "string"
          },
          "additionnalInfo3" : {
            "type" : "string"
          },
          "additionnalInfo4" : {
            "type" : "string"
          },
          "vaild" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "CommunicationRequest"
        }
      },
      "EmailTemplateDto" : {
        "required" : [ "code", "subject" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "media" : {
            "type" : "string",
            "enum" : [ "POSTAL_MAIL", "EMAIL", "SMS", "IM", "FAX", "VOICE", "WEBSERVICE", "QUEUE", "FTP_FILE", "CFT_FILE", "DATABASE", "DUNNING_MEDIA" ]
          },
          "tagStartDelimiter" : {
            "type" : "string"
          },
          "tagEndDelimiter" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DUNNING", "INVOICE", "OTHER" ]
          },
          "textContent" : {
            "type" : "string"
          },
          "translatedTextContent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedTextContentDto"
            }
          },
          "subject" : {
            "type" : "string"
          },
          "htmlContent" : {
            "type" : "string"
          },
          "translatedHtmlContent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedHtmlContentDto"
            }
          },
          "translatedSubject" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedSubjectDto"
            }
          }
        },
        "xml" : {
          "name" : "EmailTemplate"
        }
      },
      "TranslatedHtmlContentDto" : {
        "type" : "object",
        "properties" : {
          "languageCode" : {
            "type" : "string",
            "description" : "The language code"
          },
          "htmlContent" : {
            "type" : "string",
            "description" : "Subject Translation"
          }
        }
      },
      "TranslatedSubjectDto" : {
        "type" : "object",
        "properties" : {
          "languageCode" : {
            "type" : "string",
            "description" : "The language code"
          },
          "subject" : {
            "type" : "string",
            "description" : "Subject Translation"
          },
          "textContent" : {
            "type" : "string",
            "writeOnly" : true
          }
        }
      },
      "TranslatedTextContentDto" : {
        "type" : "object",
        "properties" : {
          "languageCode" : {
            "type" : "string",
            "description" : "The language code"
          },
          "textContent" : {
            "type" : "string",
            "description" : "Text content translation"
          }
        }
      },
      "EmailTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "emailTemplate" : {
            "$ref" : "#/components/schemas/EmailTemplateDto"
          }
        },
        "xml" : {
          "name" : "EmailTemplateResponse"
        }
      },
      "EmailTemplatesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "emailTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/EmailTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "EmailTemplatesResponse"
        }
      },
      "MeveoInstanceDto" : {
        "required" : [ "code", "url" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "productName" : {
            "type" : "string"
          },
          "productVersion" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "md5" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "PARENT", "CHILD", "PARTNER" ]
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "keyEntreprise" : {
            "type" : "string"
          },
          "macAddress" : {
            "type" : "string"
          },
          "machineVendor" : {
            "type" : "string"
          },
          "installationMode" : {
            "type" : "string"
          },
          "nbCores" : {
            "type" : "string"
          },
          "memory" : {
            "type" : "string"
          },
          "hdSize" : {
            "type" : "string"
          },
          "osName" : {
            "type" : "string"
          },
          "osVersion" : {
            "type" : "string"
          },
          "osArch" : {
            "type" : "string"
          },
          "javaVmVersion" : {
            "type" : "string"
          },
          "javaVmName" : {
            "type" : "string"
          },
          "javaVendor" : {
            "type" : "string"
          },
          "javaVersion" : {
            "type" : "string"
          },
          "asVendor" : {
            "type" : "string"
          },
          "asVersion" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "authUsername" : {
            "type" : "string"
          },
          "authPassword" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "customer" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "MeveoInstance"
        }
      },
      "MeveoInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "meveoInstance" : {
            "$ref" : "#/components/schemas/MeveoInstanceDto"
          }
        },
        "xml" : {
          "name" : "MeveoInstanceResponse"
        }
      },
      "MeveoInstancesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "meveoInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/MeveoInstanceDto"
            }
          }
        },
        "xml" : {
          "name" : "MeveoInstancesResponse"
        }
      },
      "GetAttributeDtoResponse" : {
        "required" : [ "attributeCode", "mandatory" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "attribute id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "Code of attribute"
          },
          "description" : {
            "type" : "string",
            "description" : "description"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "description"
          },
          "attributeType" : {
            "type" : "string",
            "description" : "Corresponding to minimum one shot charge template code",
            "example" : "possible value are : INFO, LIST_TEXT, LIST_MULTIPLE_TEXT, LIST_NUMERIC, LIST_MULTIPLE_NUMERIC, TEXT, NUMERIC, INTEGER, DATE, CALENDAR, EMAIL, PHONE, TOTAL, COUNT, EXPRESSION_LANGUAGE",
            "enum" : [ "INFO", "LIST_TEXT", "LIST_MULTIPLE_TEXT", "LIST_NUMERIC", "LIST_MULTIPLE_NUMERIC", "TEXT", "NUMERIC", "INTEGER", "DATE", "CALENDAR", "EMAIL", "PHONE", "TOTAL", "COUNT", "EXPRESSION_LANGUAGE", "BOOLEAN" ]
          },
          "allowedValues" : {
            "type" : "array",
            "description" : "Corresponding to predefined allowed values",
            "items" : {
              "type" : "string",
              "description" : "Corresponding to predefined allowed values"
            }
          },
          "display" : {
            "type" : "boolean",
            "description" : "diplay the attribute"
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is mandatory"
          },
          "selectable" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is selectable"
          },
          "ruled" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is ruled"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "description" : "number of decimal for attribute if the type of attribute is a NUMBER",
            "format" : "int32"
          },
          "readOnly" : {
            "type" : "boolean",
            "description" : "indicate if the attribute is read only"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "Code of attribute"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "attribute order in the GUI",
            "format" : "int32"
          },
          "mandatoryWithEl" : {
            "type" : "string",
            "description" : "Indicate if the attribute has a mandatory EL"
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "default value for attribute"
          },
          "validationType" : {
            "type" : "string",
            "description" : "Validation type",
            "example" : "Possible value are: EL, REGEX",
            "enum" : [ "REGEX", "EL" ]
          },
          "validationPattern" : {
            "type" : "string",
            "description" : "Validation pattern"
          },
          "validationLabel" : {
            "type" : "string",
            "description" : "Validation label"
          },
          "assignedValue" : {
            "type" : "object",
            "description" : "replaced value"
          },
          "priority" : {
            "type" : "integer",
            "description" : "The lower number, the higher the priority is",
            "format" : "int32"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "groupedAttributes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/GroupedAttributeDto"
            }
          },
          "chargeTemplates" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ChargeTemplateDto"
            }
          },
          "commercialRules" : {
            "uniqueItems" : true,
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
            }
          },
          "tags" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TagDto"
            }
          },
          "assignedAttributes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/AttributeDTO"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          }
        },
        "xml" : {
          "name" : "GetAttributeDtoResponse"
        }
      },
      "AccountingArticlePricesDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "accountingArticleCode" : {
            "type" : "string"
          },
          "accountingArticleLabel" : {
            "type" : "string"
          },
          "accountingArticlePrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PriceDTO"
            }
          },
          "discountPlanItemCode" : {
            "type" : "string"
          },
          "discountValue" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "AccountingArticlePricesDTO"
        }
      },
      "BaseQuoteDTO" : {
        "required" : [ "applicantAccountCode", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "quoteDate" : {
            "type" : "string",
            "description" : "The date of the quote",
            "format" : "date-time"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the quote",
            "example" : "Possible value : IN_PROGRESS, PENDING, CANCELLED, APPROVED, ACCEPTED, REJECTED",
            "default" : "IN_PROGRESS"
          },
          "applicantAccountCode" : {
            "type" : "string",
            "description" : "The code of the billing account of the applicant"
          },
          "billableAccountCode" : {
            "type" : "string",
            "description" : "The code of the billing account of the billable"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "The delivery date of quote lot ",
            "format" : "date-time"
          },
          "quoteLotDuration" : {
            "type" : "integer",
            "description" : "Duration of the quote lot",
            "format" : "int32"
          },
          "opportunityRef" : {
            "type" : "string",
            "description" : "The opportunity ref"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "The code of the seller"
          },
          "sendDate" : {
            "type" : "string",
            "description" : "The send date",
            "format" : "date-time"
          },
          "quoteNumber" : {
            "type" : "string",
            "description" : "The quote number"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The external id"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date",
            "format" : "date-time"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The code of the user account"
          },
          "salesPersonName" : {
            "type" : "string",
            "description" : "The sales person name"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "Contract code"
          }
        },
        "xml" : {
          "name" : "BaseQuoteDTO"
        }
      },
      "GetQuoteDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "quoteDto" : {
            "$ref" : "#/components/schemas/BaseQuoteDTO"
          },
          "currentVersion" : {
            "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
          },
          "allQuoteVersions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetQuoteVersionDtoResponse"
            }
          }
        },
        "xml" : {
          "name" : "GetQuoteDtoResponse"
        }
      },
      "GetQuoteVersionDtoResponse" : {
        "required" : [ "quoteCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "shortDescription" : {
            "type" : "string",
            "description" : "The short description",
            "xml" : {
              "attribute" : true
            }
          },
          "quoteCode" : {
            "type" : "string",
            "description" : "The code quote"
          },
          "currentVersion" : {
            "type" : "integer",
            "description" : "The current version",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of quote version",
            "example" : "Possible value : DRAFT, PUBLISHED, CLOSED",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date, it set automaically when status is changed",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date",
            "format" : "date-time"
          },
          "billingPlanCode" : {
            "type" : "string",
            "description" : "The code of the billing plan"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "The code of the discount plan"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "The code of the contract"
          },
          "mediaCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "comment" : {
            "type" : "string",
            "description" : "The comment",
            "xml" : {
              "attribute" : true
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "priceListCode" : {
            "type" : "string",
            "description" : "The associated PriceList code"
          },
          "quoteItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteOfferDTO"
            }
          },
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxPricesDto"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          }
        },
        "xml" : {
          "name" : "GetProductDtoResponse"
        }
      },
      "PriceDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "priceType" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "RECURRING", "ONE_SHOT_SUBSCRIPTION", "ONE_SHOT_TERMINATION", "ONE_SHOT_OTHER", "ONE_SHOT_INVOICING_PLAN", "USAGE", "FIXED_DISCOUNT" ]
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "unitPriceWithoutTax" : {
            "type" : "number"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountWithoutTaxWithoutDiscount" : {
            "type" : "number"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "taxRate" : {
            "type" : "number"
          },
          "taxIndex" : {
            "type" : "string"
          },
          "priceOverCharged" : {
            "type" : "boolean"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "currencySymbol" : {
            "type" : "string"
          },
          "recurrenceDuration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recurrencePeriodicity" : {
            "type" : "string"
          },
          "chargeCode" : {
            "type" : "string"
          },
          "chargeLabel" : {
            "type" : "string"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "calendarType" : {
            "type" : "string"
          },
          "calendarCode" : {
            "type" : "string"
          },
          "taxCategory" : {
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "number"
          },
          "discountedQuotePrice" : {
            "$ref" : "#/components/schemas/PriceDTO"
          },
          "unitMultiplicator" : {
            "type" : "number"
          },
          "discountValue" : {
            "type" : "number"
          },
          "discountPlanType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "discountPlanItemCode" : {
            "type" : "string"
          },
          "discountPlanCode" : {
            "type" : "string"
          },
          "discountPlanItemDesc" : {
            "type" : "string"
          },
          "discountPlanDesc" : {
            "type" : "string"
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          },
          "overchargedUnitAmountWithoutTax" : {
            "type" : "number"
          },
          "discountedAmount" : {
            "type" : "number"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "contractCode" : {
            "type" : "string"
          },
          "contractDescription" : {
            "type" : "string"
          },
          "contractItemCode" : {
            "type" : "string"
          },
          "contractItemDescription" : {
            "type" : "string"
          },
          "contractType" : {
            "type" : "string"
          },
          "pricePlanMatrixCode" : {
            "type" : "string"
          },
          "pricePlanMatrixLabel" : {
            "type" : "string"
          },
          "pricePlanMatrixVersionId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pricePlanMatrixLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "contractItemRateType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "PriceDTO"
        }
      },
      "QuoteAttributeDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "quoteAttributeId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "quoteAttributeCode" : {
            "type" : "string"
          },
          "linkedQuoteAttribute" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteAttributeDTO"
            }
          },
          "stringValue" : {
            "type" : "string"
          },
          "doubleValue" : {
            "type" : "number",
            "format" : "double"
          },
          "dateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "display" : {
            "type" : "boolean"
          },
          "readOnly" : {
            "type" : "boolean"
          },
          "unitNbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "description" : "list of quote attribute",
        "example" : " \"offerAttributes\": [[<br/>        {[<br/>            \"quoteAttributeCode\": \"Attribute_code}}\",[<br/>            \"stringValue\": \"Monthly\",[<br/>            \"doubleValue\": 24,[<br/>            \"dateValue\": \"2021-02-22\"[<br/>        }[<br/>    ]",
        "xml" : {
          "name" : "QuoteAttributeDTO"
        }
      },
      "QuoteOfferDTO" : {
        "required" : [ "code", "offerId", "quoteVersion" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "quoteOfferId" : {
            "type" : "integer",
            "description" : "quote offer id, used for updating an existing quote offer",
            "format" : "int64"
          },
          "quoteCode" : {
            "type" : "string",
            "description" : "the code of the quote"
          },
          "quoteVersion" : {
            "type" : "integer",
            "description" : "the version of the quote, associated to the quote code to retrieve a quote",
            "format" : "int32"
          },
          "quoteLotCode" : {
            "type" : "string",
            "description" : "the code of the quote lot"
          },
          "offerId" : {
            "type" : "integer",
            "description" : "id of offer template",
            "format" : "int64"
          },
          "offerCode" : {
            "type" : "string",
            "description" : "the code of offer template"
          },
          "billableAccountCode" : {
            "type" : "string",
            "description" : "code of billing account"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "the code of contract "
          },
          "products" : {
            "type" : "array",
            "description" : "list of quote product",
            "example" : "\"products\": [[<br/>        {[<br/>            \"productCode\": \"product_Code\",[<br/>            \"quoteCode\": \"quote_Code\",[<br/>            \"productVersion\": product_Version,[<br/>            \"quoteVersion\": Quote_Version,[<br/>            \"quantity\": 1,[<br/>            \"productAttributes\": [[<br/>                {[<br/>                    \"quoteAttributeCode\": \"billing_Cycle_Attribute\",[<br/>                    \"stringValue\": \"Monthly\"[<br/>                },[<br/>                {[<br/>                    \"quoteAttributeCode\": \"engagement_Attribute_Code\",[<br/>                    \"doubleValue\": 24[<br/>                }[<br/>            ][<br/>        }[<br/>    ]",
            "items" : {
              "$ref" : "#/components/schemas/QuoteProductDTO"
            }
          },
          "offerAttributes" : {
            "type" : "array",
            "description" : "list of quote attribute",
            "example" : " \"offerAttributes\": [[<br/>        {[<br/>            \"quoteAttributeCode\": \"Attribute_code}}\",[<br/>            \"stringValue\": \"Monthly\",[<br/>            \"doubleValue\": 24,[<br/>            \"dateValue\": \"2021-02-22\"[<br/>        }[<br/>    ]",
            "items" : {
              "$ref" : "#/components/schemas/QuoteAttributeDTO"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "the code of the discount plan"
          },
          "prices" : {
            "type" : "array",
            "description" : "total amounts",
            "items" : {
              "$ref" : "#/components/schemas/TaxPricesDto"
            }
          },
          "sequence" : {
            "type" : "integer",
            "description" : "the position of the quote item in GUI",
            "format" : "int32"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "the delivery date",
            "format" : "date-time"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The code of the user account"
          },
          "quoteLineType" : {
            "type" : "string",
            "description" : "The quote line type",
            "enum" : [ "CREATE", "AMEND", "TERMINATE", "APPLY_ONE_SHOT" ]
          },
          "subscriptionCode" : {
            "type" : "string",
            "description" : "The code of the subscription"
          }
        },
        "xml" : {
          "name" : "QuoteOfferDTO"
        }
      },
      "QuoteProductDTO" : {
        "required" : [ "productCode", "productVersion", "quantity", "quoteCode", "quoteVersion" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "quoteProductId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "quoteCode" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "quoteVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "productVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quantity" : {
            "type" : "number"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "The code of the discount plan"
          },
          "productAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteAttributeDTO"
            }
          },
          "accountingArticlePrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingArticlePricesDTO"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "description" : "The termination date",
            "format" : "date-time"
          },
          "terminationReasonCode" : {
            "type" : "string",
            "description" : "The termination reason code"
          },
          "actionType" : {
            "type" : "string",
            "description" : "The action type",
            "enum" : [ "CREATE", "ACTIVATE", "SUSPEND", "TERMINATE", "MODIFY" ]
          }
        },
        "description" : "list of quote product",
        "example" : "\"products\": [[<br/>        {[<br/>            \"productCode\": \"product_Code\",[<br/>            \"quoteCode\": \"quote_Code\",[<br/>            \"productVersion\": product_Version,[<br/>            \"quoteVersion\": Quote_Version,[<br/>            \"quantity\": 1,[<br/>            \"productAttributes\": [[<br/>                {[<br/>                    \"quoteAttributeCode\": \"billing_Cycle_Attribute\",[<br/>                    \"stringValue\": \"Monthly\"[<br/>                },[<br/>                {[<br/>                    \"quoteAttributeCode\": \"engagement_Attribute_Code\",[<br/>                    \"doubleValue\": 24[<br/>                }[<br/>            ][<br/>        }[<br/>    ]",
        "xml" : {
          "name" : "QuoteProductDTO"
        }
      },
      "TaxPricesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "taxRate" : {
            "type" : "number"
          },
          "unitPriceAmountWithoutTax" : {
            "type" : "number"
          },
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PriceDTO"
            }
          }
        }
      },
      "BusinessApiException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "CommercialOrderDto" : {
        "required" : [ "billingAccountCode", "orderDate", "orderProgress", "progressDate", "sellerCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "id of the order",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the order"
          },
          "description" : {
            "type" : "string",
            "description" : "description of the order"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "code seller"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "order number of the order, it set automatically when the order is validated"
          },
          "label" : {
            "type" : "string",
            "description" : "description of the order"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "code of existing the billing account"
          },
          "quoteCode" : {
            "type" : "string",
            "description" : "code of existing quote"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "code of existing contract"
          },
          "orderTypeCode" : {
            "type" : "string",
            "description" : "code of existing order type, can be empty"
          },
          "invoicingPlanCode" : {
            "type" : "string",
            "description" : "code of existing invoicing plan"
          },
          "status" : {
            "type" : "string",
            "description" : "status of the order"
          },
          "orderProgress" : {
            "type" : "integer",
            "description" : "order progress for the order",
            "format" : "int32"
          },
          "progressDate" : {
            "type" : "string",
            "description" : "progress date of order, must not be empty",
            "format" : "date-time"
          },
          "orderDate" : {
            "type" : "string",
            "description" : "date of the order, must not be empty",
            "format" : "date-time"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "date of delivery of the order",
            "format" : "date-time"
          },
          "customerServiceBegin" : {
            "type" : "string",
            "description" : "date begin of the customer service",
            "format" : "date-time"
          },
          "customerServiceDuration" : {
            "type" : "integer",
            "description" : "duration customer service",
            "format" : "int32"
          },
          "externalReference" : {
            "type" : "string"
          },
          "orderParentCode" : {
            "type" : "string"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "code of the user account"
          },
          "accessDto" : {
            "$ref" : "#/components/schemas/AccessDto"
          },
          "orderLotCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of order lot's code",
            "items" : {
              "type" : "string",
              "description" : "list of order lot's code"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "The code of the discount plan"
          },
          "salesPersonName" : {
            "type" : "string",
            "description" : "The sales person name"
          },
          "billingCycleCode" : {
            "type" : "string",
            "description" : "Order billing cycle"
          },
          "priceListCode" : {
            "type" : "string",
            "description" : "The code of the PriceList to link to this order"
          }
        }
      },
      "GetOrderOfferDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "orderOfferDto" : {
            "$ref" : "#/components/schemas/OrderOfferDto"
          }
        },
        "xml" : {
          "name" : "GetOrderOfferDtoResponse"
        }
      },
      "OrderOfferDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "orderOfferId" : {
            "type" : "integer",
            "description" : "The id of the order offer",
            "format" : "int64"
          },
          "commercialOrderId" : {
            "type" : "integer",
            "description" : "The commercial order id",
            "format" : "int64"
          },
          "offerTemplateCode" : {
            "type" : "string",
            "description" : "The offer template code"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "The discountPlan code"
          },
          "orderProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderProductDto"
            }
          },
          "orderAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderAttributeDto"
            }
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "The delivery date",
            "format" : "date-time"
          },
          "userAccountCode" : {
            "type" : "string"
          },
          "subscriptionCode" : {
            "type" : "string",
            "description" : "The subscription code"
          },
          "orderLineType" : {
            "type" : "string",
            "description" : "The order line type",
            "enum" : [ "CREATE", "AMEND", "TERMINATE", "APPLY_ONE_SHOT" ]
          },
          "terminationDate" : {
            "type" : "string",
            "description" : "The termination date",
            "format" : "date-time"
          },
          "terminationReasonCode" : {
            "type" : "string",
            "description" : "The termination reason"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "code of existing contract"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        }
      },
      "OrderProductDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "orderProductId" : {
            "type" : "integer",
            "description" : "The order product id",
            "format" : "int64"
          },
          "commercialOrderId" : {
            "type" : "integer",
            "description" : "The commercial order id",
            "format" : "int64"
          },
          "orderLotCode" : {
            "type" : "string",
            "description" : "The order lot code"
          },
          "orderOfferId" : {
            "type" : "integer",
            "description" : "The order offer id",
            "format" : "int64"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "The discount plan code"
          },
          "productVersion" : {
            "type" : "integer",
            "description" : "The proudct version",
            "format" : "int32"
          },
          "productCode" : {
            "type" : "string",
            "description" : "The product code"
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "The delivery date",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "description" : "The termination date",
            "format" : "date-time"
          },
          "terminationReasonCode" : {
            "type" : "string",
            "description" : "The termination reason code"
          },
          "actionType" : {
            "type" : "string",
            "description" : "The action type",
            "enum" : [ "CREATE", "ACTIVATE", "SUSPEND", "TERMINATE", "MODIFY" ]
          },
          "serviceInstanceId" : {
            "type" : "integer",
            "description" : "The service instance id",
            "format" : "int64"
          },
          "orderAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderAttributeDto"
            }
          },
          "instanceStatus" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE", "CANCELED", "TERMINATED", "SUSPENDED", "CLOSED", "PENDING", "WAITING_MANDATORY" ]
          }
        },
        "xml" : {
          "name" : "OrderProductDto"
        }
      },
      "GetCommercialOrderDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "commercialOrderDto" : {
            "$ref" : "#/components/schemas/CommercialOrderDto"
          }
        },
        "xml" : {
          "name" : "GetCommercialOrderDtoResponse"
        }
      },
      "GetListCommercialOrderDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "commercialOrderDtos" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CommercialOrderDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListCommercialOrderDtoResponse"
        }
      },
      "GetCommercialRuleDtoResponse" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "ruleType" : {
            "type" : "string",
            "description" : "rule type",
            "example" : "possible value are : PRE_REQUISITE, INCOMPATIBILITY, REPLACEMENT",
            "enum" : [ "PRE_REQUISITE", "INCOMPATIBILITY", "REPLACEMENT" ]
          },
          "ruleEl" : {
            "type" : "string",
            "description" : "rule expression language"
          },
          "offerCode" : {
            "type" : "string",
            "description" : "code offer of template"
          },
          "productCode" : {
            "type" : "string",
            "description" : "code product"
          },
          "productVersion" : {
            "type" : "integer",
            "description" : "product version",
            "format" : "int32"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "code of attribute"
          },
          "scope" : {
            "type" : "string",
            "description" : "commercial rule scope",
            "enum" : [ "QUOTE", "QUOTE_OFFER" ]
          },
          "tagCode" : {
            "type" : "string",
            "description" : "code tag"
          },
          "groupedAttributeCode" : {
            "type" : "string",
            "description" : "code of grouped attribute"
          },
          "targetAttributeValue" : {
            "type" : "string",
            "description" : "target attribute value"
          },
          "isTarget" : {
            "type" : "boolean",
            "description" : "is commercial rule header is the target, default value is True"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "is commercial rule disabled, default value is false"
          },
          "commercialRuleItems" : {
            "type" : "array",
            "description" : "list of commercial rule item",
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleItemDTO"
            }
          },
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          }
        },
        "xml" : {
          "name" : "GetCommercialRuleDtoResponse"
        }
      },
      "GetListCommercialRulesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "commercialRules" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CommercialRuleHeaderDTO"
            }
          }
        },
        "xml" : {
          "name" : "GetListCommercialRulesResponseDto"
        }
      },
      "BillingRuleDto" : {
        "type" : "object",
        "properties" : {
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invoicedBACodeEL" : {
            "type" : "string",
            "description" : "Expression to provide the code of a billing account that will be invoiced this rated transaction."
          },
          "criteriaEL" : {
            "type" : "string",
            "description" : "Expression to tell OC if this rule should apply to the tested rated transaction"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ContractDto" : {
        "required" : [ "beginDate", "code", "contractDate", "endDate", "renewal" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "contractAccountLevel" : {
            "type" : "string",
            "description" : "contract account level, associate seller or customer or customer account or billing account to this contract",
            "example" : "possible value are : SELLER, CUSTOMER, CUSTOMER_ACCOUNT, BILLING_ACCOUNT",
            "enum" : [ "SELLER", "CUSTOMER", "CUSTOMER_ACCOUNT", "BILLING_ACCOUNT" ]
          },
          "accountCode" : {
            "type" : "string",
            "description" : "account code associated to contract depending the value of  contractAccountLevel"
          },
          "status" : {
            "type" : "string",
            "description" : "status of the contract",
            "example" : "possible value are : DRAFT, ACTIVE, CLOSED"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "date of the changement of the status, it set automatically",
            "format" : "date-time"
          },
          "contractDate" : {
            "type" : "string",
            "description" : "day of the contract",
            "format" : "date-time"
          },
          "beginDate" : {
            "type" : "string",
            "description" : "begin date of the contract",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "end date of the contract",
            "format" : "date-time"
          },
          "renewal" : {
            "type" : "boolean",
            "description" : "renwal a the contract"
          },
          "contractDuration" : {
            "type" : "integer",
            "description" : "duration of the contract",
            "format" : "int32"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "billingRules" : {
            "type" : "array",
            "description" : "list of billing rules",
            "items" : {
              "$ref" : "#/components/schemas/BillingRuleDto"
            }
          },
          "applicationEl" : {
            "type" : "string",
            "description" : "An expression to decide whether the contract should be applied or not"
          },
          "applicationEL" : {
            "type" : "string",
            "writeOnly" : true
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "ContractListDto" : {
        "type" : "object",
        "properties" : {
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "contracts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContractDto"
            }
          }
        }
      },
      "ContractListResponsDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "contracts" : {
            "$ref" : "#/components/schemas/ContractListDto"
          }
        },
        "xml" : {
          "name" : "ContractListResponsDto"
        }
      },
      "ContractItemDto" : {
        "required" : [ "code", "contractCode", "pricePlanCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "contract code"
          },
          "offerTemplateCode" : {
            "type" : "string",
            "description" : "code of the offer template"
          },
          "productCode" : {
            "type" : "string",
            "description" : "code of the product"
          },
          "pricePlanCode" : {
            "type" : "string",
            "description" : "code price plan"
          },
          "chargeTemplateCode" : {
            "type" : "string",
            "description" : "code of charge template"
          },
          "serviceTemplateCode" : {
            "type" : "string",
            "description" : "code of the service template"
          },
          "rate" : {
            "type" : "number",
            "description" : "rate of the contract",
            "format" : "double"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "amount without tax"
          },
          "seperateDiscountLine" : {
            "type" : "boolean",
            "description" : "separate discount"
          },
          "contractRateType" : {
            "type" : "string",
            "description" : "rate of contract type",
            "example" : "possible value are : PERCENTAGE, FIXED",
            "enum" : [ "PERCENTAGE", "FIXED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "applicationEl" : {
            "type" : "string",
            "description" : "Expression language to condition contract line application"
          },
          "applicableOnOverriddenPrice" : {
            "type" : "boolean",
            "description" : "If true then contract discount will apply to price overridden in quote."
          },
          "targetAccountingArticleCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "defind list of target article that can be applied",
            "items" : {
              "type" : "string",
              "description" : "defind list of target article that can be applied"
            }
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "TradingContractItemDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "contractItemId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tradingValue" : {
            "type" : "number"
          },
          "rate" : {
            "type" : "number"
          },
          "tradingCurrency" : {
            "$ref" : "#/components/schemas/CurrencyDto"
          }
        }
      },
      "GetContractDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "contract" : {
            "$ref" : "#/components/schemas/ContractDto"
          }
        },
        "xml" : {
          "name" : "GetContractDtoResponse"
        }
      },
      "GetListContractDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "contracts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContractDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListContractDtoResponse"
        }
      },
      "QuoteDTO" : {
        "required" : [ "applicantAccountCode", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "quoteDate" : {
            "type" : "string",
            "description" : "The date of the quote",
            "format" : "date-time"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the quote",
            "example" : "Possible value : IN_PROGRESS, PENDING, CANCELLED, APPROVED, ACCEPTED, REJECTED",
            "default" : "IN_PROGRESS"
          },
          "applicantAccountCode" : {
            "type" : "string",
            "description" : "The code of the billing account of the applicant"
          },
          "billableAccountCode" : {
            "type" : "string",
            "description" : "The code of the billing account of the billable"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "The delivery date of quote lot ",
            "format" : "date-time"
          },
          "quoteLotDuration" : {
            "type" : "integer",
            "description" : "Duration of the quote lot",
            "format" : "int32"
          },
          "opportunityRef" : {
            "type" : "string",
            "description" : "The opportunity ref"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "The code of the seller"
          },
          "sendDate" : {
            "type" : "string",
            "description" : "The send date",
            "format" : "date-time"
          },
          "quoteNumber" : {
            "type" : "string",
            "description" : "The quote number"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The external id"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date",
            "format" : "date-time"
          },
          "userAccountCode" : {
            "type" : "string",
            "description" : "The code of the user account"
          },
          "salesPersonName" : {
            "type" : "string",
            "description" : "The sales person name"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "Contract code"
          },
          "quoteVersion" : {
            "$ref" : "#/components/schemas/QuoteVersionDto"
          }
        },
        "xml" : {
          "name" : "QuoteDto"
        }
      },
      "QuoteVersionDto" : {
        "required" : [ "quoteCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "shortDescription" : {
            "type" : "string",
            "description" : "The short description",
            "xml" : {
              "attribute" : true
            }
          },
          "quoteCode" : {
            "type" : "string",
            "description" : "The code quote"
          },
          "currentVersion" : {
            "type" : "integer",
            "description" : "The current version",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of quote version",
            "example" : "Possible value : DRAFT, PUBLISHED, CLOSED",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "statusDate" : {
            "type" : "string",
            "description" : "The status date, it set automaically when status is changed",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date",
            "format" : "date-time"
          },
          "billingPlanCode" : {
            "type" : "string",
            "description" : "The code of the billing plan"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "The code of the discount plan"
          },
          "contractCode" : {
            "type" : "string",
            "description" : "The code of the contract"
          },
          "mediaCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "comment" : {
            "type" : "string",
            "description" : "The comment",
            "xml" : {
              "attribute" : true
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "priceListCode" : {
            "type" : "string",
            "description" : "The associated PriceList code"
          }
        }
      },
      "GetQuoteOfferDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "quoteOfferDto" : {
            "$ref" : "#/components/schemas/QuoteOfferDTO"
          }
        },
        "xml" : {
          "name" : "GetQuoteOfferDtoResponse"
        }
      },
      "CpqQuotesListDto" : {
        "type" : "object",
        "properties" : {
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quoteDtos" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteDTO"
            }
          }
        }
      },
      "CpqQuotesListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "quotes" : {
            "$ref" : "#/components/schemas/CpqQuotesListDto"
          }
        },
        "xml" : {
          "name" : "CpqQuotesListResponse"
        }
      },
      "GetPdfQuoteResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "pdfFileName" : {
            "type" : "string"
          },
          "xmlFileName" : {
            "type" : "string"
          },
          "pdfContent" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "xmlContent" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          }
        },
        "xml" : {
          "name" : "GetPdfQuoteResponse"
        }
      },
      "OverrideChargedPriceDto" : {
        "type" : "object",
        "properties" : {
          "offerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountingArticleCode" : {
            "type" : "string"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "priceOverCharged" : {
            "type" : "boolean"
          },
          "applyDiscountsOnOverridenPrice" : {
            "type" : "boolean"
          }
        }
      },
      "OverrideChargedPricesDto" : {
        "type" : "object",
        "properties" : {
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OverrideChargedPriceDto"
            }
          }
        }
      },
      "GetGroupedAttributesResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "groupedAttributeDto" : {
            "$ref" : "#/components/schemas/GroupedAttributeDto"
          }
        },
        "xml" : {
          "name" : "GetGroupedAttributesResponse"
        }
      },
      "GetMediaDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "mediaDto" : {
            "$ref" : "#/components/schemas/MediaDto"
          }
        },
        "xml" : {
          "name" : "GetMediaDtoResponse"
        }
      },
      "GetOrderTypeDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "orderTypeDto" : {
            "$ref" : "#/components/schemas/OrderTypeDto"
          }
        },
        "xml" : {
          "name" : "GetOrderTypeDtoResponse"
        }
      },
      "OrderTypeDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the order type",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "description of order type",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "GetListOrderTypeResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "orderTypes" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OrderTypeDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListOrderTypeResponseDto"
        }
      },
      "GetTagDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "tagDto" : {
            "$ref" : "#/components/schemas/TagDto"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "GetTagDtoResponse"
        }
      },
      "GetTagTypeDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "tagTypeDto" : {
            "$ref" : "#/components/schemas/TagTypeDto"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "GetTagTypeDtoResponse"
        }
      },
      "TagTypeDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "sellerCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "AddressBookContactDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "addressBook" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "position" : {
            "type" : "string"
          },
          "mainContact" : {
            "type" : "boolean"
          },
          "customer" : {
            "$ref" : "#/components/schemas/CustomerDto"
          }
        }
      },
      "AddressBookDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "contact" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactDto"
            }
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "ContactDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "externalRef1" : {
            "type" : "string",
            "description" : "The external ref 1"
          },
          "externalRef2" : {
            "type" : "string",
            "description" : "The external ref 2"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameDto"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          },
          "jobTitle" : {
            "type" : "string",
            "description" : "The job title"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "loaded" : {
            "type" : "boolean"
          },
          "vatNo" : {
            "type" : "string",
            "description" : "The vat no"
          },
          "registrationNo" : {
            "type" : "string",
            "description" : "The registration no"
          },
          "contactInformation" : {
            "$ref" : "#/components/schemas/ContactInformationDto"
          },
          "isCompany" : {
            "type" : "boolean",
            "description" : "indicate if this is a company"
          },
          "legalEntityType" : {
            "$ref" : "#/components/schemas/TitleDto"
          },
          "assistantName" : {
            "type" : "string"
          },
          "assistantPhone" : {
            "type" : "string"
          },
          "position" : {
            "type" : "string"
          },
          "company" : {
            "type" : "string"
          },
          "websiteUrl" : {
            "type" : "string"
          },
          "importedFrom" : {
            "type" : "string"
          },
          "importedBy" : {
            "type" : "string"
          },
          "socialIdentifier" : {
            "type" : "string"
          },
          "reference" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "agreedToUA" : {
            "type" : "boolean"
          },
          "contactPolicy" : {
            "$ref" : "#/components/schemas/CommunicationPolicy"
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "contactCategoryCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "addressBookContacts" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AddressBookContactDto"
            }
          },
          "vip" : {
            "type" : "boolean"
          },
          "prospect" : {
            "type" : "boolean"
          },
          "isVip" : {
            "type" : "boolean"
          },
          "isProspect" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "GetAddressBookResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "addressBook" : {
            "$ref" : "#/components/schemas/AddressBookDto"
          }
        }
      },
      "GetContactResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "contact" : {
            "$ref" : "#/components/schemas/ContactDto"
          }
        }
      },
      "ContactsDto" : {
        "type" : "object",
        "properties" : {
          "contact" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactDto"
            }
          },
          "totalNumberOfRecords" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ContactsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "contacts" : {
            "$ref" : "#/components/schemas/ContactsDto"
          }
        }
      },
      "CustomEntityInstanceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "cetCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "CustomEntityInstance"
        }
      },
      "CustomEntityInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customEntityInstance" : {
            "$ref" : "#/components/schemas/CustomEntityInstanceDto"
          }
        },
        "xml" : {
          "name" : "GetCustomEntityInstanceResponse"
        }
      },
      "CustomEntityInstancesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "customEntityInstances" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomEntityInstanceDto"
            }
          }
        },
        "xml" : {
          "name" : "GetCustomEntityInstancesResponse"
        }
      },
      "CustomFieldMatrixColumnDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "columnUse" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "USE_KEY", "USE_VALUE" ]
          },
          "position" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "code" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "keyType" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "LONG", "DOUBLE", "RON" ]
          }
        },
        "xml" : {
          "name" : "CustomFieldMatrixColumn"
        }
      },
      "CustomFieldTemplateDto" : {
        "required" : [ "code", "fieldType", "storageType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "fieldType" : {
            "type" : "string",
            "enum" : [ "STRING", "DATE", "LONG", "DOUBLE", "LIST", "CHECKBOX_LIST", "ENTITY", "TEXT_AREA", "CHILD_ENTITY", "MULTI_VALUE", "BOOLEAN", "CUSTOM_TABLE_WRAPPER", "URL" ]
          },
          "accountLevel" : {
            "type" : "string"
          },
          "appliesTo" : {
            "type" : "string"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "useInheritedAsDefaultValue" : {
            "type" : "boolean"
          },
          "storageType" : {
            "type" : "string",
            "enum" : [ "SINGLE", "LIST", "MAP", "MATRIX" ]
          },
          "valueRequired" : {
            "type" : "boolean"
          },
          "uniqueConstraint" : {
            "type" : "boolean"
          },
          "versionable" : {
            "type" : "boolean"
          },
          "triggerEndPeriodEvent" : {
            "type" : "boolean"
          },
          "calendar" : {
            "type" : "string"
          },
          "cacheValueTimeperiod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "entityClazz" : {
            "type" : "string"
          },
          "listValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "allowEdit" : {
            "type" : "boolean"
          },
          "hideOnNew" : {
            "type" : "boolean"
          },
          "maxValue" : {
            "type" : "integer",
            "format" : "int64"
          },
          "minValue" : {
            "type" : "integer",
            "format" : "int64"
          },
          "regExp" : {
            "type" : "string"
          },
          "cacheValue" : {
            "type" : "boolean"
          },
          "nbDecimal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "roundingMode" : {
            "type" : "string",
            "enum" : [ "NEAREST", "DOWN", "UP", "HALF_EVEN" ]
          },
          "guiPosition" : {
            "type" : "string"
          },
          "mapKeyType" : {
            "type" : "string",
            "enum" : [ "STRING", "LONG", "DOUBLE", "RON" ]
          },
          "applicableOnEl" : {
            "type" : "string"
          },
          "matrixColumns" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldMatrixColumnDto"
            }
          },
          "childEntityFieldsForSummary" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "fieldCode"
              }
            }
          },
          "indexType" : {
            "type" : "string",
            "enum" : [ "STORE_ONLY", "INDEX", "INDEX_NOT_ANALYZE" ]
          },
          "tags" : {
            "type" : "string"
          },
          "displayFormat" : {
            "type" : "string"
          },
          "customTableCodeEL" : {
            "type" : "string"
          },
          "dataFilterEL" : {
            "type" : "string"
          },
          "fieldsEL" : {
            "type" : "string"
          },
          "versionFilterEL" : {
            "type" : "string"
          },
          "anonymize" : {
            "type" : "boolean"
          },
          "referenceTable" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "CustomFieldTemplate"
        }
      },
      "GetCustomFieldTemplateReponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customFieldTemplate" : {
            "$ref" : "#/components/schemas/CustomFieldTemplateDto"
          }
        },
        "xml" : {
          "name" : "GetCustomFieldTemplateReponse"
        }
      },
      "CustomTableDataDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "customTableCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "overwrite" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "records",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomTableRecordDto"
            }
          },
          "valuesFromListofMap" : {
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "xml" : {
          "name" : "CustomTableData"
        }
      },
      "CustomTableRecordDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "tableName" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "CustomTableRecord"
        }
      },
      "CustomTableDataResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "customTableData" : {
            "$ref" : "#/components/schemas/CustomTableDataDto"
          }
        },
        "xml" : {
          "name" : "CustomTableDataResponse"
        }
      },
      "CustomTableWrapperDto" : {
        "required" : [ "ctwCode" ],
        "type" : "object",
        "properties" : {
          "ctwCode" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "string"
          },
          "entityClass" : {
            "type" : "string"
          },
          "pagingAndFiltering" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          }
        },
        "xml" : {
          "name" : "CustomFieldTemplate"
        }
      },
      "EntityCustomActionDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "appliesTo" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "applicableOnEl" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "labelsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          },
          "guiPosition" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "EntityCustomAction"
        }
      },
      "CustomEntityTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "storeAsTable" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            }
          },
          "storeInES" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            }
          },
          "fields" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldTemplateDto"
            }
          },
          "actions" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/EntityCustomActionDto"
            }
          },
          "disableable" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            }
          },
          "versioned" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "xml" : {
          "name" : "CustomEntityTemplate"
        }
      },
      "EntityCustomizationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "classname" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fields" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldTemplateDto"
            }
          },
          "actions" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/EntityCustomActionDto"
            }
          }
        },
        "xml" : {
          "name" : "EntityCustomization"
        }
      },
      "EntityCustomActionResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "entityAction" : {
            "$ref" : "#/components/schemas/EntityCustomActionDto"
          }
        },
        "xml" : {
          "name" : "EntityCustomActionResponse"
        }
      },
      "EntityCustomizationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "entityCustomization" : {
            "$ref" : "#/components/schemas/EntityCustomizationDto"
          }
        },
        "xml" : {
          "name" : "EntityCustomizationResponseDto"
        }
      },
      "CustomEntityTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customEntityTemplate" : {
            "$ref" : "#/components/schemas/CustomEntityTemplateDto"
          }
        },
        "xml" : {
          "name" : "CustomEntityTemplateResponseDto"
        }
      },
      "BusinessEntityResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "businessEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BusinessEntityDto"
            }
          }
        },
        "xml" : {
          "name" : "BusinessEntityResponse"
        }
      },
      "CustomEntityTemplatesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "customEntityTemplates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomEntityTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "CustomEntityTemplatesResponseDto"
        }
      },
      "UnitaryCustomTableDataDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "customTableCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "overwrite" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "$ref" : "#/components/schemas/CustomTableRecordDto"
          },
          "rowValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        },
        "xml" : {
          "name" : "CustomTableData"
        }
      },
      "ApiException" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "causes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Cause"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "OK", "Created", "Accepted", "No Content", "Reset Content", "Partial Content", "Multiple Choices", "Moved Permanently", "Found", "See Other", "Not Modified", "Use Proxy", "Temporary Redirect", "Permanent Redirect", "Bad Request", "Unauthorized", "Payment Required", "Forbidden", "Not Found", "Method Not Allowed", "Not Acceptable", "Proxy Authentication Required", "Request Timeout", "Conflict", "Gone", "Length Required", "Precondition Failed", "Request Entity Too Large", "Request-URI Too Long", "Unsupported Media Type", "Requested Range Not Satisfiable", "Expectation Failed", "Precondition Required", "Too Many Requests", "Request Header Fields Too Large", "Unavailable For Legal Reasons", "Internal Server Error", "Not Implemented", "Bad Gateway", "Service Unavailable", "Gateway Timeout", "HTTP Version Not Supported", "Network Authentication Required" ]
          },
          "code" : {
            "type" : "string"
          },
          "details" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "Cause" : {
        "type" : "object",
        "properties" : {
          "causeMessage" : {
            "type" : "string"
          }
        }
      },
      "IdentityResponseDTO" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          }
        }
      },
      "DataCollectorDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string"
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "sqlQuery" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "aliases" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "customTableCode" : {
            "type" : "string"
          },
          "entityTemplateDto" : {
            "$ref" : "#/components/schemas/CustomEntityTemplateDto"
          }
        }
      },
      "DataCollectorResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dataCollectorDto" : {
            "$ref" : "#/components/schemas/DataCollectorDto"
          }
        },
        "xml" : {
          "name" : "DataCollectorResponse"
        }
      },
      "SignFileResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          }
        }
      },
      "SignMemberDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "internal" : {
            "type" : "boolean"
          }
        }
      },
      "SignProcedureResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignMemberDto"
            }
          },
          "files" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignFileResponseDto"
            }
          }
        }
      },
      "CreateProcedureRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "absolutePaths" : {
            "type" : "boolean"
          },
          "withInternalMember" : {
            "type" : "boolean"
          },
          "filesToSign" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignFileRequestDto"
            }
          },
          "procedure" : {
            "$ref" : "#/components/schemas/SignProcedureDto"
          }
        }
      },
      "SignEventEmailDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "subject" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SignEventWebhookDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "url" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "SignFileObjectRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "position" : {
            "type" : "string"
          },
          "page" : {
            "type" : "integer",
            "format" : "int32"
          },
          "file" : {
            "type" : "string"
          }
        }
      },
      "SignFileRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "filePath" : {
            "type" : "string"
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "internalPosition" : {
            "type" : "string"
          },
          "externalPosition" : {
            "type" : "string"
          },
          "internalPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "listExternalPositions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignFileObjectRequestDto"
            }
          }
        }
      },
      "SignMemberRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "internal" : {
            "type" : "boolean"
          },
          "fileObjects" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignFileObjectRequestDto"
            }
          }
        }
      },
      "SignProcedureConfigDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "email" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SignEventEmailDto"
              }
            }
          },
          "webhook" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SignEventWebhookDto"
              }
            }
          }
        }
      },
      "SignProcedureDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "start" : {
            "type" : "boolean"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignMemberRequestDto"
            }
          },
          "config" : {
            "$ref" : "#/components/schemas/SignProcedureConfigDto"
          }
        }
      },
      "RawResponseDto" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "response" : {
            "type" : "object"
          }
        }
      },
      "RawResponseDtoString" : {
        "required" : [ "response" ],
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "response" : {
            "type" : "string"
          }
        }
      },
      "PDFDocumentResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "listPdfFilePaths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pdfFilePath" : {
            "type" : "string"
          },
          "pdfFile" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "pdfFiles" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      },
      "PDFDocumentRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "listTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PDFTemplateDto"
            }
          },
          "documentDestinationDir" : {
            "type" : "string"
          },
          "documentNamePrefix" : {
            "type" : "string"
          },
          "returnPdf" : {
            "type" : "boolean"
          },
          "combineFiles" : {
            "type" : "boolean"
          },
          "absolutePaths" : {
            "type" : "boolean"
          },
          "flattened" : {
            "type" : "boolean"
          }
        }
      },
      "PDFTemplateDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "templateFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "templateName" : {
            "type" : "string"
          },
          "templatePath" : {
            "type" : "string"
          },
          "barCodeFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DunningDocumentDto" : {
        "required" : [ "dueInvoices", "payments" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "dunningDocumentId" : {
            "type" : "string"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "payments" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentDto"
            }
          },
          "dueInvoices" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/InvoiceDto"
            }
          }
        },
        "xml" : {
          "name" : "DunningDocument"
        }
      },
      "PaymentDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "type" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "occTemplateCode" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "reference" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "collectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionalCurrency" : {
            "type" : "string"
          },
          "listOCCReferenceforMatching" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listAoIdsForMatching" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "paymentOrder" : {
            "type" : "string"
          },
          "fees" : {
            "type" : "number"
          },
          "comment" : {
            "type" : "string"
          },
          "paymentInfo" : {
            "type" : "string"
          },
          "paymentInfo1" : {
            "type" : "string"
          },
          "paymentInfo2" : {
            "type" : "string"
          },
          "paymentInfo3" : {
            "type" : "string"
          },
          "paymentInfo4" : {
            "type" : "string"
          },
          "paymentInfo5" : {
            "type" : "string"
          },
          "paymentInfo6" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "toMatching" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "Payment"
        }
      },
      "DunningDocumentResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dunningDocument" : {
            "$ref" : "#/components/schemas/DunningDocumentDto"
          }
        },
        "xml" : {
          "name" : "DunningDocumentsResponse"
        }
      },
      "DunningDocumentListDto" : {
        "type" : "object",
        "properties" : {
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dunningDocuments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningDocumentDto"
            }
          }
        }
      },
      "DunningDocumentsListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "dunningDocuments" : {
            "$ref" : "#/components/schemas/DunningDocumentListDto"
          }
        },
        "xml" : {
          "name" : "DunningDocumentsListResponse"
        }
      },
      "BarChartDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "measurableQuantity" : {
            "$ref" : "#/components/schemas/MeasurableQuantityDto"
          },
          "width" : {
            "type" : "string"
          },
          "height" : {
            "type" : "string"
          },
          "style" : {
            "type" : "string"
          },
          "styleClass" : {
            "type" : "string"
          },
          "extender" : {
            "type" : "string"
          },
          "visible" : {
            "type" : "boolean"
          },
          "legendPosition" : {
            "type" : "string",
            "enum" : [ "n", "s", "e", "w" ]
          },
          "barPadding" : {
            "type" : "integer",
            "format" : "int32"
          },
          "barMargin" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orientation" : {
            "type" : "string",
            "enum" : [ "vertical", "horizontal" ]
          },
          "stacked" : {
            "type" : "boolean"
          },
          "min" : {
            "type" : "number",
            "format" : "double"
          },
          "max" : {
            "type" : "number",
            "format" : "double"
          },
          "breakOnNull" : {
            "type" : "boolean"
          },
          "xaxisLabel" : {
            "type" : "string"
          },
          "yaxisLabel" : {
            "type" : "string"
          },
          "xaxisAngle" : {
            "type" : "integer",
            "format" : "int32"
          },
          "yaxisAngle" : {
            "type" : "integer",
            "format" : "int32"
          },
          "legendCols" : {
            "type" : "integer",
            "format" : "int32"
          },
          "legendRows" : {
            "type" : "integer",
            "format" : "int32"
          },
          "zoom" : {
            "type" : "boolean"
          },
          "animate" : {
            "type" : "boolean"
          },
          "showDataTip" : {
            "type" : "boolean"
          },
          "datatipFormat" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "BarChart"
        }
      },
      "ChartDto" : {
        "required" : [ "chartType", "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "measurableQuantity" : {
            "$ref" : "#/components/schemas/MeasurableQuantityDto"
          },
          "width" : {
            "type" : "string"
          },
          "height" : {
            "type" : "string"
          },
          "style" : {
            "type" : "string"
          },
          "styleClass" : {
            "type" : "string"
          },
          "extender" : {
            "type" : "string"
          },
          "visible" : {
            "type" : "boolean"
          },
          "chartType" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Chart"
        },
        "discriminator" : {
          "propertyName" : "chartType"
        }
      },
      "LineChartDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "measurableQuantity" : {
            "$ref" : "#/components/schemas/MeasurableQuantityDto"
          },
          "width" : {
            "type" : "string"
          },
          "height" : {
            "type" : "string"
          },
          "style" : {
            "type" : "string"
          },
          "styleClass" : {
            "type" : "string"
          },
          "extender" : {
            "type" : "string"
          },
          "visible" : {
            "type" : "boolean"
          },
          "filled" : {
            "type" : "boolean"
          },
          "legendPosition" : {
            "type" : "string",
            "enum" : [ "n", "s", "e", "w" ]
          },
          "seriesColors" : {
            "type" : "string"
          },
          "shadow" : {
            "type" : "boolean"
          },
          "minX" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxX" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minY" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxY" : {
            "type" : "integer",
            "format" : "int32"
          },
          "breakOnNull" : {
            "type" : "boolean"
          },
          "xaxisLabel" : {
            "type" : "string"
          },
          "yaxisLabel" : {
            "type" : "string"
          },
          "xaxisAngle" : {
            "type" : "integer",
            "format" : "int32"
          },
          "yaxisAngle" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stacked" : {
            "type" : "boolean"
          },
          "zoom" : {
            "type" : "boolean"
          },
          "animate" : {
            "type" : "boolean"
          },
          "showDataTip" : {
            "type" : "boolean"
          },
          "datatipFormat" : {
            "type" : "string"
          },
          "legendCols" : {
            "type" : "integer",
            "format" : "int32"
          },
          "legendRows" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "LineChart"
        }
      },
      "MeasurableQuantityDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "theme" : {
            "type" : "string"
          },
          "dimension1" : {
            "type" : "string"
          },
          "dimension2" : {
            "type" : "string"
          },
          "dimension3" : {
            "type" : "string"
          },
          "dimension4" : {
            "type" : "string"
          },
          "editable" : {
            "type" : "boolean"
          },
          "additive" : {
            "type" : "boolean"
          },
          "sqlQuery" : {
            "type" : "string"
          },
          "measurementPeriod" : {
            "type" : "string",
            "enum" : [ "DAILY", "WEEKLY", "MONTHLY", "YEARLY" ]
          },
          "lastMeasureDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "codeOnly" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "MeasurableQuantity"
        }
      },
      "PieChartDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "measurableQuantity" : {
            "$ref" : "#/components/schemas/MeasurableQuantityDto"
          },
          "width" : {
            "type" : "string"
          },
          "height" : {
            "type" : "string"
          },
          "style" : {
            "type" : "string"
          },
          "styleClass" : {
            "type" : "string"
          },
          "extender" : {
            "type" : "string"
          },
          "visible" : {
            "type" : "boolean"
          },
          "filled" : {
            "type" : "boolean"
          },
          "legendPosition" : {
            "type" : "string",
            "enum" : [ "n", "s", "e", "w" ]
          },
          "seriesColors" : {
            "type" : "string"
          },
          "diameter" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sliceMargin" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shadow" : {
            "type" : "boolean"
          },
          "showDataLabels" : {
            "type" : "boolean"
          },
          "legendCols" : {
            "type" : "integer",
            "format" : "int32"
          },
          "legendRows" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "PieChart"
        }
      },
      "GetChartResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "chartDto" : {
            "$ref" : "#/components/schemas/ChartDto"
          }
        },
        "xml" : {
          "name" : "GetChartResponse"
        }
      },
      "ChartsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "charts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChartDto"
            }
          }
        },
        "xml" : {
          "name" : "ChartResponses"
        }
      },
      "GetMeasurableQuantityResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "measurableQuantityDto" : {
            "$ref" : "#/components/schemas/MeasurableQuantityDto"
          }
        },
        "xml" : {
          "name" : "GetMeasurableQuantityResponse"
        }
      },
      "GetListMeasurableQuantityResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "listMeasurableQuantityDto" : {
            "type" : "array",
            "xml" : {
              "name" : "listMeasurableQuantity",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/MeasurableQuantityDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListMeasurableQuantityResponse"
        }
      },
      "ReportExtractDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "scriptType" : {
            "type" : "string",
            "enum" : [ "JAVA", "SQL" ]
          },
          "filenameFormat" : {
            "type" : "string"
          },
          "fileSeparator" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "outputDir" : {
            "type" : "string"
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "sqlQuery" : {
            "type" : "string"
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reportExtractResultType" : {
            "type" : "string",
            "enum" : [ "CSV", "HTML" ]
          },
          "style" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "customTableCode" : {
            "type" : "string"
          },
          "accumulate" : {
            "type" : "boolean"
          },
          "separator" : {
            "type" : "string"
          },
          "decimalSeparator" : {
            "type" : "string"
          },
          "generateEmptyReport" : {
            "type" : "boolean"
          },
          "maximumLine" : {
            "type" : "integer",
            "format" : "int64"
          },
          "includeHeaders" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "ReportExtractResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "reportExtract" : {
            "$ref" : "#/components/schemas/ReportExtractDto"
          }
        },
        "xml" : {
          "name" : "ReportExtractResponse"
        }
      },
      "ReportExtractExecutionResultDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "reportExtractCode" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "filePath" : {
            "type" : "string"
          },
          "lineCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "origin" : {
            "type" : "string",
            "enum" : [ "API", "JOB", "GUI" ]
          },
          "errorMessage" : {
            "type" : "string"
          },
          "status" : {
            "type" : "boolean"
          }
        }
      },
      "ReportExtractExecutionResultResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "reportExtractExecutionResult" : {
            "$ref" : "#/components/schemas/ReportExtractExecutionResultDto"
          }
        }
      },
      "ReportExtractExecutionResultsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "reportExtractExecutionResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportExtractExecutionResultDto"
            }
          }
        }
      },
      "ReportExtractsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "reportExtracts" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ReportExtractDto"
            }
          }
        },
        "xml" : {
          "name" : "ReportExtractsResponse"
        }
      },
      "RunReportExtractDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "GWFActionDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "uuid" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "UPDATE_FIELD", "LOG", "ACTION_SCRIPT", "NOTIFICATION" ]
          },
          "conditionEl" : {
            "type" : "string"
          },
          "asynchronous" : {
            "type" : "boolean",
            "xml" : {
              "name" : "isAsynchronous"
            }
          },
          "actionScriptCode" : {
            "type" : "string"
          },
          "notificationCode" : {
            "type" : "string"
          },
          "valueEl" : {
            "type" : "string"
          },
          "logLevel" : {
            "type" : "string",
            "enum" : [ "INFO", "DEBUG", "TRACE" ]
          },
          "field" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "GWFTransitionDto" : {
        "required" : [ "conditionEl", "description", "fromStatus", "toStatus" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "uuid" : {
            "type" : "string"
          },
          "fromStatus" : {
            "type" : "string"
          },
          "toStatus" : {
            "type" : "string"
          },
          "conditionEl" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "actionScriptCode" : {
            "type" : "string"
          },
          "actions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GWFActionDto"
            }
          }
        }
      },
      "GenericWorkflowDto" : {
        "required" : [ "code", "initStatus", "targetEntityClass" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "targetEntityClass" : {
            "type" : "string"
          },
          "targetCetCode" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterDto"
          },
          "initStatus" : {
            "type" : "string"
          },
          "statuses" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/WFStatusDto"
            }
          },
          "transitions" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/GWFTransitionDto"
            }
          },
          "enableHistory" : {
            "type" : "boolean"
          }
        }
      },
      "WFStatusDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "uuid" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "GenericWorkflowResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "genericWorkflow" : {
            "$ref" : "#/components/schemas/GenericWorkflowDto"
          }
        },
        "xml" : {
          "name" : "GenericWorkflowResponse"
        }
      },
      "GenericWorkflowsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "workflows" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/GenericWorkflowDto"
            }
          }
        },
        "xml" : {
          "name" : "GenericWorkflowsResponse"
        }
      },
      "WorkflowInsHistoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "workflowInsHistories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/WorkflowInstanceHistoryDto"
            }
          }
        },
        "xml" : {
          "name" : "WorkflowInsHistoryResponse"
        }
      },
      "WorkflowInstanceHistoryDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "actionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "workflowInstanceCode" : {
            "type" : "string"
          },
          "fromStatus" : {
            "type" : "string"
          },
          "toStatus" : {
            "type" : "string"
          },
          "transitionName" : {
            "type" : "string"
          }
        }
      },
      "UserHierarchyLevelDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "parentLevel" : {
            "type" : "string"
          },
          "childLevels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/UserHierarchyLevelDto"
            }
          }
        },
        "xml" : {
          "name" : "UserHierarchyLevel"
        }
      },
      "UserHierarchyLevelResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "userHierarchyLevel" : {
            "$ref" : "#/components/schemas/UserHierarchyLevelDto"
          }
        },
        "xml" : {
          "name" : "UserHierarchyLevelResponseDto"
        }
      },
      "UserHierarchyLevelsDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "userHierarchyLevels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/UserHierarchyLevelDto"
            }
          }
        },
        "xml" : {
          "name" : "UserHierarchyLevels"
        }
      },
      "FieldsNotImportedStringCollectionDto" : {
        "type" : "object",
        "properties" : {
          "fieldsNotImported" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "FieldsNotImportedStringCollection"
        }
      },
      "ImportExportResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "executionId" : {
            "type" : "string"
          },
          "summary" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "importResultDto" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportResultDto"
            }
          },
          "fieldsNotImported" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/FieldsNotImportedStringCollectionDto"
            }
          },
          "exceptionMessage" : {
            "type" : "string"
          },
          "done" : {
            "type" : "boolean"
          },
          "failed" : {
            "type" : "boolean"
          },
          "failureMessageKey" : {
            "type" : "string"
          },
          "failureMessage" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ImportExportResponse"
        }
      },
      "ImportResultDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ImportResult"
        }
      },
      "ImportExportRequestDto" : {
        "type" : "object",
        "properties" : {
          "exportType" : {
            "type" : "string"
          },
          "instanceCode" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string"
          },
          "entityToExport" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ImportExportRequest"
        }
      },
      "InputPart" : {
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              }
            },
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "body" : {
            "type" : "object"
          },
          "mediaType" : {
            "$ref" : "#/components/schemas/MediaType"
          },
          "bodyAsString" : {
            "type" : "string"
          },
          "contentTypeFromMessage" : {
            "type" : "boolean"
          }
        }
      },
      "MultipartFormDataInput" : {
        "type" : "object",
        "properties" : {
          "formDataMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/InputPart"
              }
            }
          },
          "preamble" : {
            "type" : "string"
          },
          "parts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InputPart"
            }
          }
        }
      },
      "CancelInvoiceRequestDto" : {
        "required" : [ "invoiceId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "CancelInvoiceRequest"
        }
      },
      "CreateInvoiceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceNumber" : {
            "type" : "string"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "netToPay" : {
            "type" : "number"
          },
          "xmlFilename" : {
            "type" : "string"
          },
          "xmlInvoice" : {
            "type" : "string"
          },
          "pdfFilename" : {
            "type" : "string"
          },
          "pdfInvoice" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "sentByEmail" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "CreateInvoiceResponse"
        }
      },
      "CustomerInvoicesResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "customerInvoiceDtoList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceDto"
            }
          }
        },
        "xml" : {
          "name" : "CustomerInvoicesResponse"
        }
      },
      "GetInvoiceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/InvoiceDto"
          }
        },
        "xml" : {
          "name" : "GetInvoiceResponse"
        }
      },
      "GetPdfInvoiceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "pdfContent" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "pdfFileName" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "GetPdfInvoiceResponse"
        }
      },
      "GetPdfInvoiceRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "name" : "id"
            }
          },
          "invoiceNumber" : {
            "type" : "string"
          },
          "invoiceType" : {
            "type" : "string"
          },
          "generatePdf" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "GetPdfInvoiceRequest"
        }
      },
      "GetXmlInvoiceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "xmlContent" : {
            "type" : "string"
          },
          "xmlFileName" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "GetXmlInvoiceResponse"
        }
      },
      "GetXmlInvoiceRequestDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "name" : "id"
            }
          },
          "invoiceNumber" : {
            "type" : "string"
          },
          "invoiceType" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "GetXmlInvoiceRequest"
        }
      },
      "GenerateInvoiceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "generateInvoiceResultDto" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GenerateInvoiceResultDto"
            }
          }
        },
        "xml" : {
          "name" : "GenerateInvoiceResponse"
        }
      },
      "GenerateInvoiceResultDto" : {
        "required" : [ "billingAccountCode", "discountAmount", "dueDate", "invoiceDate", "invoiceMode", "invoiceType", "rawAmount", "taxAggregates" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "description" : "The invoice id",
            "format" : "int64"
          },
          "invoiceType" : {
            "type" : "string",
            "description" : "The invoice type"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "The billing account code"
          },
          "sellerCode" : {
            "type" : "string",
            "description" : "Code of the Seller"
          },
          "subscriptionCode" : {
            "type" : "string",
            "description" : "Code of the subscription"
          },
          "subscriptionId" : {
            "type" : "integer",
            "description" : "Id of the subscription",
            "format" : "int64"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "Order number of the invoice"
          },
          "status" : {
            "type" : "string",
            "description" : "The invoice status",
            "example" : "possible value are : NEW, SUSPECT, REJECTED, DRAFT, CANCELED, VALIDATED",
            "enum" : [ "NEW", "SUSPECT", "REJECTED", "DRAFT", "CANCELED", "VALIDATED" ]
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "The invoice date",
            "format" : "date-time"
          },
          "categoryInvoiceAgregates" : {
            "type" : "array",
            "description" : "The category invoice aggregates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CategoryInvoiceAgregateDto"
            }
          },
          "taxAggregates" : {
            "type" : "array",
            "description" : "The tax aggregates",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TaxInvoiceAggregateDto"
            }
          },
          "listInvoiceIdToLink" : {
            "type" : "array",
            "description" : "The list invoice id to link",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "integer",
              "description" : "The list invoice id to link",
              "format" : "int64",
              "xml" : {
                "name" : "invoiceIdToLink"
              }
            }
          },
          "invoiceNumber" : {
            "type" : "string",
            "description" : "The invoice number"
          },
          "discount" : {
            "type" : "number",
            "description" : "discount applied to this invoice"
          },
          "amountWithoutTax" : {
            "type" : "number",
            "description" : "The amount without tax"
          },
          "amountTax" : {
            "type" : "number",
            "description" : "The amount tax"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The amount with tax"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method",
            "example" : "possible value are : CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "xmlFilename" : {
            "type" : "string",
            "description" : "The xml filename"
          },
          "xml" : {
            "type" : "string",
            "description" : "The xml"
          },
          "pdfFilename" : {
            "type" : "string",
            "description" : "he pdf filename"
          },
          "pdf" : {
            "type" : "array",
            "description" : "content of the pdf",
            "items" : {
              "type" : "string",
              "description" : "content of the pdf",
              "format" : "byte"
            }
          },
          "autoValidation" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if invoice should be assigned a number",
            "default" : true
          },
          "returnXml" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if XML invoice should be generated and returned"
          },
          "returnPdf" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if PDF invoice should be generated and returned"
          },
          "sendByEmail" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if PDF should be delivered by email. Defaults to True"
          },
          "includeBalance" : {
            "type" : "boolean",
            "description" : "A request-only parameter. True if currently due balance should be returned"
          },
          "recordedInvoiceDto" : {
            "$ref" : "#/components/schemas/RecordedInvoiceDto"
          },
          "netToPay" : {
            "type" : "number",
            "description" : "The net to pay"
          },
          "invoiceMode" : {
            "type" : "string",
            "description" : "The invoice mode",
            "example" : "possible value are: AGGREGATED, DETAILLED",
            "enum" : [ "AGGREGATED", "DETAILLED" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "dueBalance" : {
            "type" : "number",
            "description" : "The total due is a snapshot at invoice generation time of the due balance (not exigible) before invoice calculation+invoice amount. Due balance is a 'future' dueBalance (the due balance at the invoice due date)"
          },
          "isDraft" : {
            "type" : "boolean",
            "description" : "A flag to generate a draft invoice"
          },
          "checkAlreadySent" : {
            "type" : "boolean",
            "description" : "Before sending the invoice, check if not already sent"
          },
          "overrideEmail" : {
            "type" : "string",
            "description" : "Override Email defined in the billing entity"
          },
          "sentByEmail" : {
            "type" : "boolean",
            "description" : "True if the invoice was sent by email or delibered by some other electronic means, false otherwise",
            "default" : false
          },
          "paymentScheduleInstancesDto" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstancesDto"
          },
          "dunningEntryDate" : {
            "type" : "string",
            "description" : "associated dunning creation date",
            "format" : "date-time"
          },
          "dunningLastModification" : {
            "type" : "string",
            "description" : "associated dunning last update date",
            "format" : "date-time"
          },
          "dunningStatus" : {
            "type" : "string",
            "description" : "associated dunning current status"
          },
          "realTimeStatus" : {
            "type" : "string",
            "description" : "The invoice real time status",
            "example" : "possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED",
            "enum" : [ "NONE", "PENDING", "PENDING_PLAN", "PAID", "PPAID", "UNPAID", "ABANDONED", "DISPUTED", "REFUNDED", "PREFUNDED", "UNREFUNDED" ]
          },
          "ratedTransactionsToLink" : {
            "type" : "array",
            "description" : "List of existing RTs to include, identified by id This option is allowed only if invoiceMode=='DETAILLED'",
            "items" : {
              "type" : "integer",
              "description" : "List of existing RTs to include, identified by id This option is allowed only if invoiceMode=='DETAILLED'",
              "format" : "int64"
            }
          },
          "paymentIncidents" : {
            "type" : "array",
            "description" : "List of payment incidents",
            "items" : {
              "type" : "string",
              "description" : "List of payment incidents"
            }
          },
          "sendPaymentDate" : {
            "type" : "string",
            "description" : "Date of send payment",
            "format" : "date-time"
          },
          "initialCollectionDate" : {
            "type" : "string",
            "description" : "Invoice payment collection date",
            "format" : "date-time"
          },
          "writeOffAmount" : {
            "type" : "number",
            "description" : "Sum off writeOff accountOperations amounts"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "last payment Date",
            "format" : "date-time"
          },
          "statusDate" : {
            "type" : "string",
            "description" : "Invoice status change date",
            "format" : "date-time"
          },
          "xmlDate" : {
            "type" : "string",
            "description" : "Date when the XML has been produced on a validated invoice",
            "format" : "date-time"
          },
          "pdfDate" : {
            "type" : "string",
            "description" : "Date when the PDf has been produced on a validated invoice",
            "format" : "date-time"
          },
          "emailSentDate" : {
            "type" : "string",
            "description" : "Date when the invoice has been sent for a validated invoice",
            "format" : "date-time"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "payment status",
            "example" : "possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED",
            "enum" : [ "NONE", "PENDING", "PENDING_PLAN", "PAID", "PPAID", "UNPAID", "ABANDONED", "DISPUTED", "REFUNDED", "PREFUNDED", "UNREFUNDED" ]
          },
          "paymentStatusDate" : {
            "type" : "string",
            "description" : "Payment status change date",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Beginning of the billed period (based on billing cycle period whenever possible or min(invoiceLine.valueDate))",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "End of the billed period (based on billing cycle period whenever possible or applied lastTransactionDate or max(invoiceLine.valueDate))",
            "format" : "date-time"
          },
          "rawAmount" : {
            "type" : "number",
            "description" : "Total raw amount from invoice lines. <ul><li>Does not include discount</li><li>With or without tax depending on provider setting (isEnterprise)</li></ul>"
          },
          "discountRate" : {
            "type" : "number",
            "description" : "Discount rate to apply (in %).<p>Initialize with discount rate from linked invoice discount plan</p>"
          },
          "discountAmount" : {
            "type" : "number",
            "description" : "Total discount amount with or without tax depending on provider settings.<p>Can be inconsistent with discountRate.</p><p>discountAmount has precedence over discountRate</p>"
          },
          "discountPlanCode" : {
            "type" : "string",
            "description" : "Discount plan code"
          },
          "lastAppliedRate" : {
            "type" : "number",
            "description" : "The exchange rate that converted amounts of the invoice."
          },
          "lastAppliedRateDate" : {
            "type" : "string",
            "description" : "The date of exchange rate applied to amounts of the invoice.",
            "format" : "date-time"
          },
          "autoMatching" : {
            "type" : "boolean"
          },
          "temporaryInvoiceNumber" : {
            "type" : "string"
          },
          "invoiceTypeCode" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "draft" : {
            "type" : "boolean"
          },
          "alreadyAppliedMinimum" : {
            "type" : "boolean"
          },
          "alreadyAddedDiscount" : {
            "type" : "boolean"
          },
          "ratedTransactionsTolink" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "xml" : {
          "name" : "GenerateInvoiceResult"
        }
      },
      "GenerateInvoiceRequestDto" : {
        "required" : [ "invoicingDate" ],
        "type" : "object",
        "properties" : {
          "targetType" : {
            "type" : "string"
          },
          "targetCode" : {
            "type" : "string"
          },
          "billingAccountCode" : {
            "type" : "string"
          },
          "openOrderCode" : {
            "type" : "string"
          },
          "applyBillingRules" : {
            "type" : "boolean"
          },
          "invoicingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "firstTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterDto"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "generateXML" : {
            "type" : "boolean"
          },
          "generatePDF" : {
            "type" : "boolean"
          },
          "generateAO" : {
            "type" : "boolean"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "includeRatedTransactions" : {
            "type" : "boolean"
          },
          "applyMinimum" : {
            "type" : "string"
          },
          "skipValidation" : {
            "type" : "boolean"
          },
          "purchaseOrders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "GenerateInvoiceRequest"
        }
      },
      "InvoicesDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceDto"
            }
          }
        },
        "xml" : {
          "name" : "Invoices"
        }
      },
      "ValidateInvoiceRequestDto" : {
        "required" : [ "invoiceId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "generateAO" : {
            "type" : "boolean"
          },
          "refreshExchangeRate" : {
            "type" : "boolean"
          },
          "skipValidation" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "ValidateInvoiceRequest"
        }
      },
      "PaymentTerm" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "JobInstanceDto" : {
        "required" : [ "code", "jobCategory", "jobTemplate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "jobCategory" : {
            "$ref" : "#/components/schemas/JobCategoryEnum"
          },
          "jobTemplate" : {
            "type" : "string",
            "description" : "Job template",
            "xml" : {
              "attribute" : true
            }
          },
          "followingJob" : {
            "type" : "string",
            "description" : "Following job to execute"
          },
          "processNextJobOnError" : {
            "type" : "boolean",
            "description" : "process next job on error"
          },
          "parameter" : {
            "type" : "string",
            "description" : "Parameter to job execution"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is job active. A negative of Disabled. Deprecated in 5.0.1. Use Disabled field instead",
            "deprecated" : true
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "timerCode" : {
            "type" : "string",
            "description" : "Job scheduling timer code",
            "xml" : {
              "attribute" : true
            }
          },
          "runOnNodes" : {
            "type" : "string",
            "description" : "What cluster nodes job could/should run on. A comma separated list of custer nodes. A job can/will be run on any node if value is null"
          },
          "limitToSingleNode" : {
            "type" : "boolean",
            "description" : "Can job be run in parallel on several cluster nodes. Value of True indicates that job can be run on a single node at a time. Deprecated. Use clusterBehavior instead."
          },
          "clusterBehavior" : {
            "type" : "string",
            "description" : "Job execution behavior when running in a clustered environment",
            "enum" : [ "LIMIT_TO_SINGLE_NODE", "RUN_IN_PARALLEL", "SPREAD_OVER_CLUSTER_NODES" ]
          },
          "verboseReport" : {
            "type" : "boolean",
            "description" : "Whether a verbose error log will be kept"
          },
          "jobStatusReportFrequency" : {
            "type" : "integer",
            "description" : "How often (in seconds) the job progress should be stored to DB",
            "format" : "int32"
          },
          "limitToNrOfNodes" : {
            "type" : "integer",
            "description" : "A maximum number of nodes should a job could be running on in parallel",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "JobInstance"
        }
      },
      "JobInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "jobInstanceDto" : {
            "$ref" : "#/components/schemas/JobInstanceDto"
          }
        },
        "xml" : {
          "name" : "JobInstanceResponse"
        }
      },
      "JobInstanceListDto" : {
        "type" : "object",
        "properties" : {
          "listSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "jobInstances" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobInstanceDto"
            }
          }
        },
        "xml" : {
          "name" : "JobInstanceListDto"
        }
      },
      "JobInstanceListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "jobInstances" : {
            "$ref" : "#/components/schemas/JobInstanceListDto"
          }
        },
        "xml" : {
          "name" : "JobInstanceListResponseDto"
        }
      },
      "TimerEntityDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "hour" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "minute" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "second" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "year" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "month" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "dayOfMonth" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "dayOfWeek" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "xml" : {
          "name" : "TimerEntity"
        }
      },
      "JobExecutionResultDto" : {
        "required" : [ "nbItemsCorrectlyProcessed", "nbItemsProcessedWithError", "nbItemsProcessedWithWarning" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            }
          },
          "jobInstanceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "runningOnNodes" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "nbItemsToProcess" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsCorrectlyProcessed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsProcessedWithWarning" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nbItemsProcessedWithError" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nodeName" : {
            "type" : "string"
          },
          "done" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "SHUTDOWN", "COMPLETED", "COMPLETED_MORE", "RUNNING", "FAILED", "CANCELLED" ]
          },
          "report" : {
            "type" : "string"
          },
          "jobInstanceCode" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "JobExecutionResult"
        }
      },
      "JobExecutionResultResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "jobExecutionResultDto" : {
            "$ref" : "#/components/schemas/JobExecutionResultDto"
          }
        },
        "xml" : {
          "name" : "JobExecutionResultResponse"
        }
      },
      "JobInstanceInfoDto" : {
        "type" : "object",
        "properties" : {
          "timerName" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "start" : {
            "type" : "boolean"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "billingCycle" : {
            "type" : "string"
          },
          "forceExecution" : {
            "type" : "boolean"
          },
          "runOnNodes" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "waitToComplete" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "JobInstanceInfo"
        }
      },
      "TimerEntityResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "timerEntity" : {
            "$ref" : "#/components/schemas/TimerEntityDto"
          }
        },
        "xml" : {
          "name" : "TimerEntityResponse"
        }
      },
      "JobExecutionResultsDto" : {
        "type" : "object",
        "properties" : {
          "jobExecutionResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobExecutionResultDto"
            }
          },
          "totalNumberOfRecords" : {
            "type" : "integer",
            "format" : "int64",
            "writeOnly" : true
          }
        }
      },
      "JobExecutionResultsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "jobExecutionResult" : {
            "$ref" : "#/components/schemas/JobExecutionResultsDto"
          }
        }
      },
      "JobCategoriesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "jobCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobCategoryEnum"
            }
          }
        },
        "xml" : {
          "name" : "JobCategoriesResponse"
        }
      },
      "GetTimerEntityResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "timerEntity" : {
            "$ref" : "#/components/schemas/TimerEntityDto"
          }
        },
        "xml" : {
          "name" : "TimerEntityResponse"
        }
      },
      "MetricsConfigurationDto" : {
        "required" : [ "code", "fullPath", "method", "metricsType", "metricsUnit" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "fullPath" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "metricsType" : {
            "type" : "string"
          },
          "metricsUnit" : {
            "type" : "string"
          }
        }
      },
      "GetMetricsConfigurationResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "metricsConfigurationDto" : {
            "$ref" : "#/components/schemas/MetricsConfigurationDto"
          }
        },
        "xml" : {
          "name" : "GetMetricConfigurationResponse"
        }
      },
      "MeveoModuleDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "module" : {
            "$ref" : "#/components/schemas/MeveoModuleDto"
          }
        },
        "xml" : {
          "name" : "MeveoModuleDtoResponse"
        }
      },
      "EmailNotificationDto" : {
        "required" : [ "classNameFilter", "code", "emailFrom", "eventTypeFilter", "subject" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "classNameFilter" : {
            "type" : "string"
          },
          "eventTypeFilter" : {
            "type" : "string",
            "enum" : [ "CREATED", "UPDATED", "REMOVED", "TERMINATED", "ENABLED", "DISABLED", "STARTED", "PROCESSED", "REJECTED", "REJECTED_CDR", "LOGGED_IN", "INBOUND_REQ", "LOW_BALANCE", "COUNTER_DEDUCED", "END_OF_TERM", "STATUS_UPDATED", "PAYMENT_STATUS_UPDATED", "RENEWAL_UPDATED", "XML_GENERATED", "PDF_GENERATED", "INVOICE_NUMBER_ASSIGNED", "TO_R0", "TO_R1", "TO_R2", "VERSION_CREATED", "VERSION_REMOVED", "ADVT_RATE_INCREASED" ]
          },
          "elFilter" : {
            "type" : "string"
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "scriptParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "active" : {
            "type" : "boolean"
          },
          "runAsync" : {
            "type" : "boolean"
          },
          "saveSuccessfulNotifications" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "emailFrom" : {
            "type" : "string"
          },
          "emailToEl" : {
            "type" : "string"
          },
          "subject" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          },
          "htmlBody" : {
            "type" : "string"
          },
          "sendToMail" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "sendToMail"
              }
            }
          }
        },
        "xml" : {
          "name" : "EmailNotification"
        }
      },
      "GetEmailNotificationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "emailNotificationDto" : {
            "$ref" : "#/components/schemas/EmailNotificationDto"
          }
        },
        "xml" : {
          "name" : "GetEmailNotificationResponse"
        }
      },
      "JobTriggerDto" : {
        "required" : [ "classNameFilter", "code", "eventTypeFilter", "jobInstance" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "classNameFilter" : {
            "type" : "string"
          },
          "eventTypeFilter" : {
            "type" : "string",
            "enum" : [ "CREATED", "UPDATED", "REMOVED", "TERMINATED", "ENABLED", "DISABLED", "STARTED", "PROCESSED", "REJECTED", "REJECTED_CDR", "LOGGED_IN", "INBOUND_REQ", "LOW_BALANCE", "COUNTER_DEDUCED", "END_OF_TERM", "STATUS_UPDATED", "PAYMENT_STATUS_UPDATED", "RENEWAL_UPDATED", "XML_GENERATED", "PDF_GENERATED", "INVOICE_NUMBER_ASSIGNED", "TO_R0", "TO_R1", "TO_R2", "VERSION_CREATED", "VERSION_REMOVED", "ADVT_RATE_INCREASED" ]
          },
          "elFilter" : {
            "type" : "string"
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "scriptParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "active" : {
            "type" : "boolean"
          },
          "runAsync" : {
            "type" : "boolean"
          },
          "saveSuccessfulNotifications" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "jobParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "jobInstance" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "JobTrigger"
        }
      },
      "GetJobTriggerResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "jobTriggerDto" : {
            "$ref" : "#/components/schemas/JobTriggerDto"
          }
        },
        "xml" : {
          "name" : "GetJobTriggerResponse"
        }
      },
      "ScriptNotificationDto" : {
        "required" : [ "classNameFilter", "code", "eventTypeFilter" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "classNameFilter" : {
            "type" : "string"
          },
          "eventTypeFilter" : {
            "type" : "string",
            "enum" : [ "CREATED", "UPDATED", "REMOVED", "TERMINATED", "ENABLED", "DISABLED", "STARTED", "PROCESSED", "REJECTED", "REJECTED_CDR", "LOGGED_IN", "INBOUND_REQ", "LOW_BALANCE", "COUNTER_DEDUCED", "END_OF_TERM", "STATUS_UPDATED", "PAYMENT_STATUS_UPDATED", "RENEWAL_UPDATED", "XML_GENERATED", "PDF_GENERATED", "INVOICE_NUMBER_ASSIGNED", "TO_R0", "TO_R1", "TO_R2", "VERSION_CREATED", "VERSION_REMOVED", "ADVT_RATE_INCREASED" ]
          },
          "elFilter" : {
            "type" : "string"
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "scriptParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "active" : {
            "type" : "boolean"
          },
          "runAsync" : {
            "type" : "boolean"
          },
          "saveSuccessfulNotifications" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "xml" : {
          "name" : "ScriptNotification"
        }
      },
      "GetScriptNotificationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "notificationDto" : {
            "$ref" : "#/components/schemas/ScriptNotificationDto"
          }
        },
        "xml" : {
          "name" : "GetNotificationResponse"
        }
      },
      "InboundRequestDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "contentLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "contentType" : {
            "type" : "string"
          },
          "protocol" : {
            "type" : "string"
          },
          "scheme" : {
            "type" : "string"
          },
          "remoteAddr" : {
            "type" : "string"
          },
          "remotePort" : {
            "type" : "integer",
            "format" : "int32"
          },
          "method" : {
            "type" : "string"
          },
          "authType" : {
            "type" : "string"
          },
          "pathInfo" : {
            "type" : "string"
          },
          "requestURI" : {
            "type" : "string"
          },
          "responseContentType" : {
            "type" : "string"
          },
          "responseEncoding" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "InboundRequest"
        }
      },
      "InboundRequestsDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "inboundRequest" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InboundRequestDto"
            }
          }
        },
        "xml" : {
          "name" : "InboutRequests"
        }
      },
      "InboundRequestsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "inboundRequests" : {
            "$ref" : "#/components/schemas/InboundRequestsDto"
          }
        },
        "xml" : {
          "name" : "InboundRequestsResponse"
        }
      },
      "NotificationHistoriesDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "notificationHistory" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NotificationHistoryDto"
            }
          }
        },
        "xml" : {
          "name" : "NotificationHistories"
        }
      },
      "NotificationHistoriesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "notificationHistories" : {
            "$ref" : "#/components/schemas/NotificationHistoriesDto"
          }
        },
        "xml" : {
          "name" : "NotificationHistoriesResponse"
        }
      },
      "NotificationHistoryDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "notification" : {
            "type" : "string"
          },
          "entityClassName" : {
            "type" : "string"
          },
          "entityCode" : {
            "type" : "string"
          },
          "serializedEntity" : {
            "type" : "string"
          },
          "nbRetry" : {
            "type" : "integer",
            "format" : "int32"
          },
          "result" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "SENT", "TO_RETRY", "FAILED", "CANCELED" ]
          }
        },
        "xml" : {
          "name" : "NotificationHistory"
        }
      },
      "SMSInfoDto" : {
        "type" : "object",
        "properties" : {
          "targetType" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "name" : "target"
            }
          },
          "body" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "SMSInfo"
        }
      },
      "WebHookDto" : {
        "required" : [ "classNameFilter", "code", "eventTypeFilter", "host", "httpMethod", "page", "port" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "classNameFilter" : {
            "type" : "string"
          },
          "eventTypeFilter" : {
            "type" : "string",
            "enum" : [ "CREATED", "UPDATED", "REMOVED", "TERMINATED", "ENABLED", "DISABLED", "STARTED", "PROCESSED", "REJECTED", "REJECTED_CDR", "LOGGED_IN", "INBOUND_REQ", "LOW_BALANCE", "COUNTER_DEDUCED", "END_OF_TERM", "STATUS_UPDATED", "PAYMENT_STATUS_UPDATED", "RENEWAL_UPDATED", "XML_GENERATED", "PDF_GENERATED", "INVOICE_NUMBER_ASSIGNED", "TO_R0", "TO_R1", "TO_R2", "VERSION_CREATED", "VERSION_REMOVED", "ADVT_RATE_INCREASED" ]
          },
          "elFilter" : {
            "type" : "string"
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "scriptParams" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "counterTemplate" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "active" : {
            "type" : "boolean"
          },
          "runAsync" : {
            "type" : "boolean"
          },
          "saveSuccessfulNotifications" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "httpProtocol" : {
            "type" : "string",
            "enum" : [ "HTTPS", "HTTP" ]
          },
          "host" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "page" : {
            "type" : "string"
          },
          "httpMethod" : {
            "type" : "string",
            "enum" : [ "HTTP_GET", "HTTP_POST", "HTTP_PUT", "HTTP_DELETE" ]
          },
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "bodyEl" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "WebhookNotification"
        }
      },
      "GetWebHookNotificationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "webhookDto" : {
            "$ref" : "#/components/schemas/WebHookDto"
          }
        },
        "xml" : {
          "name" : "GetWebHookNotificationResponse"
        }
      },
      "LitigationRequestDto" : {
        "type" : "object",
        "properties" : {
          "customerAccountCode" : {
            "type" : "string"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "LitigationRequest"
        }
      },
      "CustomerBalanceExportDto" : {
        "type" : "object",
        "properties" : {
          "genericFieldDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GenericFieldDetails"
            }
          }
        }
      },
      "GenericFieldDetails" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "name generic field"
          },
          "header" : {
            "type" : "string"
          },
          "formulaInputs" : {
            "type" : "string"
          },
          "formula" : {
            "type" : "string"
          },
          "transformation" : {
            "type" : "string"
          },
          "mappings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "AccountOperationResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "accountOperation" : {
            "$ref" : "#/components/schemas/AccountOperationDto"
          }
        }
      },
      "AccountOperationsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "accountOperations" : {
            "$ref" : "#/components/schemas/AccountOperationsDto"
          }
        },
        "xml" : {
          "name" : "AccountOperationsResponse"
        }
      },
      "MatchedOperationDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "matchingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "matchingType" : {
            "type" : "string",
            "enum" : [ "A", "M", "A_TIP", "A_DERICT_DEBIT" ]
          },
          "matchingDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "matchingAmount" : {
            "type" : "number"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionCategory" : {
            "type" : "string",
            "enum" : [ "DEBIT", "CREDIT" ]
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionAmount" : {
            "type" : "number"
          },
          "matchedTransactionAmount" : {
            "type" : "number"
          },
          "matchingStatus" : {
            "type" : "string",
            "enum" : [ "O", "L", "P", "C", "I", "R" ]
          }
        },
        "xml" : {
          "name" : "MatchedOperation"
        }
      },
      "MatchedOperationsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "matchedOperations" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/MatchedOperationDto"
            }
          }
        },
        "xml" : {
          "name" : "MatchedOperationsResponse"
        }
      },
      "MatchOperationRequestDto" : {
        "type" : "object",
        "properties" : {
          "customerAccountCode" : {
            "type" : "string"
          },
          "accountOperations" : {
            "$ref" : "#/components/schemas/AccountOperationsDto"
          }
        },
        "xml" : {
          "name" : "MatchOperationRequest"
        }
      },
      "TransferAccountOperationDto" : {
        "required" : [ "fromCustomerAccountCode" ],
        "type" : "object",
        "properties" : {
          "fromCustomerAccountCode" : {
            "type" : "string"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "toCustomerAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransferCustomerAccountDto"
            }
          }
        },
        "xml" : {
          "name" : "TransferCustomerAccount"
        }
      },
      "CustomerToTransfertOperationDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "TransferOperationsDto" : {
        "required" : [ "accountOperationsList", "toCustomerAccount" ],
        "type" : "object",
        "properties" : {
          "accountOperationsList" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "toCustomerAccount" : {
            "$ref" : "#/components/schemas/CustomerToTransfertOperationDto"
          }
        },
        "xml" : {
          "name" : "TransferOperationsDto"
        }
      },
      "UnMatchingOperationRequestDto" : {
        "type" : "object",
        "properties" : {
          "customerAccountCode" : {
            "type" : "string"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "matchingAmountIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "xml" : {
          "name" : "UnMatchingOperationRequest"
        }
      },
      "CreditCategoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "creditCategory" : {
            "$ref" : "#/components/schemas/CreditCategoryDto"
          }
        }
      },
      "CreditCategoriesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "creditCategories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreditCategoryDto"
            }
          }
        }
      },
      "DDRequestLotOpDto" : {
        "required" : [ "fromDueDate", "toDueDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "fromDueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "toDueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "filterCode" : {
            "type" : "string"
          },
          "ddrequestOp" : {
            "type" : "string",
            "enum" : [ "CREATE", "PAYMENT", "FILE" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "WAIT", "PROCESSED", "ERROR" ]
          },
          "errorCause" : {
            "type" : "string"
          },
          "ddRequestBuilderCode" : {
            "type" : "string"
          },
          "dueDateRageScriptCode" : {
            "type" : "string"
          },
          "recurrent" : {
            "type" : "boolean"
          },
          "paymentOrRefundEnum" : {
            "type" : "string",
            "enum" : [ "PAYMENT", "REFUND" ]
          },
          "sellerCode" : {
            "type" : "string"
          },
          "generatePaymentLines" : {
            "type" : "boolean"
          },
          "createMatching" : {
            "type" : "boolean"
          },
          "paymentStatus" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          }
        },
        "xml" : {
          "name" : "DDRequestLotOp"
        }
      },
      "DDRequestLotOpsResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "ddrequestLotOps" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DDRequestLotOpDto"
            }
          }
        },
        "xml" : {
          "name" : "DDRequestLotOpsResponse"
        }
      },
      "CardPaymentMethodDto" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "id of the entity",
            "format" : "int64"
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "type of the payment method",
            "example" : "possible value are: CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Indicate if the payment method is disabled"
          },
          "alias" : {
            "type" : "string",
            "description" : "Alias"
          },
          "preferred" : {
            "type" : "boolean",
            "description" : "Is it a preferred payment method",
            "default" : false
          },
          "customerAccountCode" : {
            "type" : "string",
            "description" : "Customer account code"
          },
          "info1" : {
            "type" : "string",
            "description" : "first Additional info"
          },
          "info2" : {
            "type" : "string",
            "description" : "second Additional info"
          },
          "info3" : {
            "type" : "string",
            "description" : "third Additional info"
          },
          "info4" : {
            "type" : "string",
            "description" : "fourth Additional info"
          },
          "info5" : {
            "type" : "string",
            "description" : "fifth Additional info"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          },
          "mandateIdentification" : {
            "type" : "string",
            "description" : "Mandate identification for SEPA"
          },
          "mandateDate" : {
            "type" : "string",
            "description" : "Mandate date for SEPA",
            "format" : "date-time"
          },
          "cardType" : {
            "type" : "string",
            "description" : "Card type",
            "example" : "possible value are : VISA, MASTERCARD, AMERICAN_EXPRESS, CB",
            "enum" : [ "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "CB" ]
          },
          "owner" : {
            "type" : "string",
            "description" : "Cardholder: first and last name"
          },
          "monthExpiration" : {
            "type" : "integer",
            "description" : "Card expiration: month",
            "format" : "int32"
          },
          "yearExpiration" : {
            "type" : "integer",
            "description" : "Card expiration: year",
            "format" : "int32"
          },
          "tokenId" : {
            "type" : "string",
            "description" : "Token ID in a payment gateway"
          },
          "cardNumber" : {
            "type" : "string",
            "description" : "Card number: full number , with first 12 digits hiding in read operation"
          },
          "issueNumber" : {
            "type" : "string",
            "description" : "Issue number"
          },
          "userId" : {
            "type" : "string",
            "description" : "Id of the user"
          },
          "email" : {
            "type" : "string",
            "description" : "Email"
          },
          "referenceDocumentCode" : {
            "type" : "string",
            "description" : "The code of reference document"
          },
          "customerCode" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "untdidPaymentMeans" : {
            "type" : "string",
            "description" : "Payment Means"
          }
        },
        "xml" : {
          "name" : "CardPaymentMethod"
        }
      },
      "CardPaymentMethodTokenDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "cardPaymentMethod" : {
            "$ref" : "#/components/schemas/CardPaymentMethodDto"
          }
        },
        "xml" : {
          "name" : "CardPaymentMethodToken"
        }
      },
      "DDRequestBuilderDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CUSTOM", "NATIF" ]
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "implementationClassName" : {
            "type" : "string"
          },
          "nbOperationPerFile" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxSizeFile" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentLevel" : {
            "type" : "string",
            "enum" : [ "AO", "CA" ]
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "DDRequestBuilderDto"
        }
      },
      "DDRequestBuilderResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "ddRequestBuilders" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/DDRequestBuilderDto"
            }
          }
        },
        "xml" : {
          "name" : "DDRequestBuilderResponse"
        }
      },
      "PaymentGatewayDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CUSTOM", "NATIF" ]
          },
          "paymentMethodType" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "implementationClassName" : {
            "type" : "string"
          },
          "applicationEL" : {
            "type" : "string"
          },
          "countryCode" : {
            "type" : "string"
          },
          "tradingCurrencyCode" : {
            "type" : "string"
          },
          "cardType" : {
            "type" : "string",
            "enum" : [ "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "CB" ]
          },
          "marchandId" : {
            "type" : "string"
          },
          "secretKey" : {
            "type" : "string"
          },
          "apiKey" : {
            "type" : "string"
          },
          "webhooksSecretKey" : {
            "type" : "string"
          },
          "webhooksKeyId" : {
            "type" : "string"
          },
          "profile" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "rumSequence" : {
            "$ref" : "#/components/schemas/PaymentGatewayRumSequenceDto"
          },
          "sellerCode" : {
            "type" : "string"
          },
          "bankCoordinates" : {
            "$ref" : "#/components/schemas/BankCoordinatesDto"
          }
        },
        "xml" : {
          "name" : "PaymentGateway"
        }
      },
      "PaymentGatewayResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "paymentGateways" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentGatewayDto"
            }
          }
        },
        "xml" : {
          "name" : "PaymentGatewayResponse"
        }
      },
      "PaymentGatewayRumSequenceDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "genericSequence" : {
            "$ref" : "#/components/schemas/GenericSequenceDto"
          },
          "paymentGateway" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "AuditableEntity"
        }
      },
      "PaymentMethodTokenDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodDto"
          }
        },
        "xml" : {
          "name" : "PaymentMethodToken"
        }
      },
      "MandatInfoDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "id" : {
            "type" : "string"
          },
          "reference" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "created", "waitingForReference", "active", "revoked", "expired", "blocked", "used" ]
          },
          "standard" : {
            "type" : "string"
          },
          "initialScore" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dateCreated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateSigned" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentScheme" : {
            "type" : "string"
          },
          "bic" : {
            "type" : "string"
          },
          "iban" : {
            "type" : "string"
          },
          "bankName" : {
            "type" : "string"
          },
          "customer" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "MandatInfo"
        }
      },
      "PaymentActionStatus" : {
        "required" : [ "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Tells whether the instance of this status object is ok or not",
            "example" : "possible value are : SUCCESS, FAIL",
            "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string",
            "description" : "A detailed error message if applicable, can contain the entity id that was created"
          },
          "entityId" : {
            "type" : "integer",
            "description" : "The entity identifier after creation of an entity",
            "format" : "int64"
          },
          "entityCode" : {
            "type" : "string",
            "description" : "The entity code after creation of an entity"
          },
          "nrAffected" : {
            "type" : "integer",
            "description" : "Number of items/records affected by the action",
            "format" : "int32"
          },
          "paymentId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PaymentScheduleTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "type" : "number"
          },
          "calendarCode" : {
            "type" : "string"
          },
          "paymentLabel" : {
            "type" : "string"
          },
          "paymentDayInMonth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceTemplateCode" : {
            "type" : "string"
          },
          "advancePaymentInvoiceTypeCode" : {
            "type" : "string"
          },
          "generateAdvancePaymentInvoice" : {
            "type" : "boolean"
          },
          "doPayment" : {
            "type" : "boolean"
          },
          "advancePaymentInvoiceSubCategoryCode" : {
            "type" : "string"
          },
          "applyAgreement" : {
            "type" : "boolean"
          },
          "amountEl" : {
            "type" : "string"
          },
          "filterEl" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "taxClassCode" : {
            "type" : "string"
          },
          "paymentDayInMonthEl" : {
            "type" : "string"
          },
          "scriptInstanceCode" : {
            "type" : "string"
          },
          "useBankingCalendar" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "PaymentScheduleTemplateDto"
        }
      },
      "PaymentMethodTokensDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "paymentMethods" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDto"
            }
          }
        },
        "xml" : {
          "name" : "PaymentMethodTokens"
        }
      },
      "PaymentScheduleInstanceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paymentScheduleInstanceDto" : {
            "$ref" : "#/components/schemas/PaymentScheduleInstanceDto"
          }
        },
        "xml" : {
          "name" : "PaymentScheduleInstanceResponseDto"
        }
      },
      "PaymentScheduleTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paymentScheduleTemplateDto" : {
            "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
          }
        },
        "xml" : {
          "name" : "PaymentScheduleTemplateResponseDto"
        }
      },
      "PaymentGatewayRumSequenceResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paymentGatewayRumSequence" : {
            "$ref" : "#/components/schemas/PaymentGatewayRumSequenceDto"
          }
        }
      },
      "HostedCheckoutStatusResponseDto" : {
        "required" : [ "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Tells whether the instance of this status object is ok or not",
            "example" : "possible value are : SUCCESS, FAIL",
            "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string",
            "description" : "A detailed error message if applicable, can contain the entity id that was created"
          },
          "entityId" : {
            "type" : "integer",
            "description" : "The entity identifier after creation of an entity",
            "format" : "int64"
          },
          "entityCode" : {
            "type" : "string",
            "description" : "The entity code after creation of an entity"
          },
          "nrAffected" : {
            "type" : "integer",
            "description" : "Number of items/records affected by the action",
            "format" : "int32"
          },
          "hostedCheckoutStatus" : {
            "type" : "string"
          },
          "paymentStatus" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "paymentId" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "HostedCheckoutStatusResponseDto"
        }
      },
      "PaymentHostedCheckoutResponseDto" : {
        "required" : [ "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Tells whether the instance of this status object is ok or not",
            "example" : "possible value are : SUCCESS, FAIL",
            "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string",
            "description" : "A detailed error message if applicable, can contain the entity id that was created"
          },
          "entityId" : {
            "type" : "integer",
            "description" : "The entity identifier after creation of an entity",
            "format" : "int64"
          },
          "entityCode" : {
            "type" : "string",
            "description" : "The entity code after creation of an entity"
          },
          "nrAffected" : {
            "type" : "integer",
            "description" : "Number of items/records affected by the action",
            "format" : "int32"
          },
          "result" : {
            "$ref" : "#/components/schemas/Result"
          }
        },
        "xml" : {
          "name" : "PaymentHostedCheckoutResponseDto"
        }
      },
      "Result" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "hostedCheckoutUrl" : {
            "type" : "string"
          },
          "hostedCheckoutVersion" : {
            "type" : "string"
          },
          "ca" : {
            "type" : "string"
          },
          "returnUrl" : {
            "type" : "string"
          },
          "data" : {
            "type" : "string"
          },
          "seal" : {
            "type" : "string"
          }
        }
      },
      "CustomerPaymentsResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "customerPaymentDtoList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentDto"
            }
          },
          "balance" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "xml" : {
          "name" : "CustomerPaymentsResponse"
        }
      },
      "CardPaymentMethodTokensDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "cardPaymentMethods" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CardPaymentMethodDto"
            }
          }
        },
        "xml" : {
          "name" : "CardPaymentMethods"
        }
      },
      "PaymentHistoriesDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "paymentHistories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentHistoryDto"
            }
          }
        }
      },
      "PaymentScheduleTemplatesDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "templates" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentScheduleTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "PaymentScheduleTemplatesDto"
        }
      },
      "PaymentResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paymentID" : {
            "type" : "string"
          },
          "transactionId" : {
            "type" : "string"
          },
          "paymentStatus" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "PENDING", "REJECTED", "ERROR", "NOT_PROCESSED" ]
          },
          "tokenId" : {
            "type" : "string"
          },
          "errorCode" : {
            "type" : "string"
          },
          "errorMessage" : {
            "type" : "string"
          },
          "codeClientSide" : {
            "type" : "string"
          },
          "paymentBrand" : {
            "type" : "string"
          },
          "bankRefenrence" : {
            "type" : "string"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "aoCreated" : {
            "type" : "boolean"
          },
          "matchingCreated" : {
            "type" : "boolean"
          },
          "newToken" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "PaymentResponse"
        }
      },
      "PayByCardOrSepaDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "ctsAmount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cardNumber" : {
            "type" : "string"
          },
          "ownerName" : {
            "type" : "string"
          },
          "cvv" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string"
          },
          "cardType" : {
            "type" : "string",
            "enum" : [ "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "CB" ]
          },
          "aoToPay" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "comment" : {
            "type" : "string"
          },
          "createAO" : {
            "type" : "boolean"
          },
          "toMatch" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "PayByCardOrSepa"
        }
      },
      "PaymentScheduleInstanceItemsDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "paymentScheduleInstanceItems" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentScheduleInstanceItemDto"
            }
          }
        },
        "xml" : {
          "name" : "PaymentScheduleInstanceItemsDto"
        }
      },
      "RefundActionStatus" : {
        "required" : [ "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Tells whether the instance of this status object is ok or not",
            "example" : "possible value are : SUCCESS, FAIL",
            "enum" : [ "SUCCESS", "FAIL", "WARNING" ]
          },
          "errorCode" : {
            "$ref" : "#/components/schemas/ApiErrorCodeEnum"
          },
          "message" : {
            "type" : "string",
            "description" : "A detailed error message if applicable, can contain the entity id that was created"
          },
          "entityId" : {
            "type" : "integer",
            "description" : "The entity identifier after creation of an entity",
            "format" : "int64"
          },
          "entityCode" : {
            "type" : "string",
            "description" : "The entity code after creation of an entity"
          },
          "nrAffected" : {
            "type" : "integer",
            "description" : "Number of items/records affected by the action",
            "format" : "int32"
          },
          "refundId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RefundDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "type" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "occTemplateCode" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "number"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "reference" : {
            "type" : "string"
          },
          "bankLot" : {
            "type" : "string"
          },
          "depositDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "bankCollectionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "listOCCReferenceforMatching" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "listAoIdsForMatching" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "toMatching" : {
            "type" : "boolean"
          },
          "manualRefund" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "Refund"
        }
      },
      "RevenueRecognitionRuleDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "startDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startUnit" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionDelayUnitEnum.MONTH", "revenueRecognitionDelayUnitEnum.DAY" ]
          },
          "startEvent" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionEvent.SUBSCRIPTION_START", "revenueRecognitionEvent.SUBSCRIPTION_STOP", "revenueRecognitionEvent.INVOICE_DATE", "revenueRecognitionEvent.INVOICE_DUE_DATE", "revenueRecognitionEvent.SERVICE_PERIOD_START", "revenueRecognitionEvent.SERVICE_PERIOD_STOP" ]
          },
          "stopDelay" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stopUnit" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionDelayUnitEnum.MONTH", "revenueRecognitionDelayUnitEnum.DAY" ]
          },
          "stopEvent" : {
            "type" : "string",
            "enum" : [ "revenueRecognitionEvent.SUBSCRIPTION_START", "revenueRecognitionEvent.SUBSCRIPTION_STOP", "revenueRecognitionEvent.INVOICE_DATE", "revenueRecognitionEvent.INVOICE_DUE_DATE", "revenueRecognitionEvent.SERVICE_PERIOD_START", "revenueRecognitionEvent.SERVICE_PERIOD_STOP" ]
          },
          "script" : {
            "$ref" : "#/components/schemas/ScriptInstanceDto"
          }
        },
        "xml" : {
          "name" : "RevenueRecognitionRule"
        }
      },
      "RevenueRecognitionRuleDtoResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "revenueRecognitionRuleDto" : {
            "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
          }
        },
        "xml" : {
          "name" : "RevenueRecognitionRuleResponse"
        }
      },
      "RevenueRecognitionRuleDtosResponse" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "revenueRecognitionRules" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RevenueRecognitionRuleDto"
            }
          }
        },
        "xml" : {
          "name" : "AccountOperationsResponse"
        }
      },
      "TaxCategoryDto" : {
        "required" : [ "code", "untdidTaxationCategoryCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "descriptionI18n" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "untdidTaxationCategoryCode" : {
            "type" : "string",
            "description" : "The UntdidTaxationCategory"
          }
        },
        "xml" : {
          "name" : "TaxCategory"
        }
      },
      "TaxCategoryResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dto" : {
            "$ref" : "#/components/schemas/TaxCategoryDto"
          }
        },
        "xml" : {
          "name" : "TaxCategoryResponse"
        }
      },
      "TaxCategoryListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "dtos" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TaxCategoryDto"
            }
          }
        },
        "xml" : {
          "name" : "TaxCategoryListResponse"
        }
      },
      "TaxClassDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "descriptionI18n" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "TaxClass"
        }
      },
      "TaxClassResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dto" : {
            "$ref" : "#/components/schemas/TaxClassDto"
          }
        },
        "xml" : {
          "name" : "TaxClassResponse"
        }
      },
      "TaxClassListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "dtos" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TaxClassDto"
            }
          }
        },
        "xml" : {
          "name" : "TaxClassListResponse"
        }
      },
      "TaxMappingDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountTaxCategoryCode" : {
            "type" : "string"
          },
          "chargeTaxClassCode" : {
            "type" : "string"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "sellerCountryCode" : {
            "type" : "string"
          },
          "buyerCountryCode" : {
            "type" : "string"
          },
          "filterEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxCode" : {
            "type" : "string"
          },
          "taxEL" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "taxScriptCode" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "source" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string"
          },
          "originId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "TaxMapping"
        }
      },
      "TaxMappingResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "dto" : {
            "$ref" : "#/components/schemas/TaxMappingDto"
          }
        },
        "xml" : {
          "name" : "TaxMappingResponse"
        }
      },
      "TaxMappingListResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "dtos" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/TaxMappingDto"
            }
          }
        },
        "xml" : {
          "name" : "TaxMappingListResponse"
        }
      },
      "BSMConfigurationDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "serviceConfiguration" : {
            "$ref" : "#/components/schemas/ServiceConfigurationDto"
          }
        },
        "xml" : {
          "name" : "BSMConfiguration"
        }
      },
      "BomOfferDto" : {
        "required" : [ "bomCode", "code", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "bomCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "customFields" : {
            "type" : "array",
            "xml" : {
              "name" : "parameters",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldDto"
            }
          },
          "prefix" : {
            "type" : "string"
          },
          "servicesToActivate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ServiceConfigurationDto"
            }
          },
          "productsToActivate" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ServiceConfigurationDto"
            }
          },
          "businessServiceModels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BSMConfigurationDto"
            }
          },
          "lifeCycleStatusEnum" : {
            "type" : "string",
            "enum" : [ "IN_STUDY", "IN_DESIGN", "IN_TEST", "ACTIVE", "LAUNCHED", "RETIRED", "OBSOLETE", "REJECTED" ]
          },
          "offerTemplateCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/OfferTemplateCategoryDto"
            }
          },
          "imageBase64" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          },
          "validFrom" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "validTo" : {
            "type" : "string",
            "format" : "date-time",
            "xml" : {
              "attribute" : true
            }
          },
          "renewalRule" : {
            "$ref" : "#/components/schemas/SubscriptionRenewalDto"
          },
          "longDescription" : {
            "type" : "string"
          },
          "longDescriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "languageDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "channels" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string"
            }
          },
          "sellers" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string"
            }
          },
          "customerCategories" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "BomOffer"
        }
      },
      "ServiceConfigurationDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "customFields" : {
            "type" : "array",
            "xml" : {
              "name" : "parameters",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldDto"
            }
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "instantiatedFromBSM" : {
            "type" : "boolean"
          },
          "match" : {
            "type" : "boolean"
          },
          "imageBase64" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ServiceConfiguration"
        }
      },
      "BpmProductDto" : {
        "required" : [ "bpmCode", "prefix" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "bpmCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "prefix" : {
            "type" : "string"
          },
          "customFields" : {
            "type" : "array",
            "xml" : {
              "name" : "parameters",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldDto"
            }
          }
        },
        "xml" : {
          "name" : "BpmProduct"
        }
      },
      "BsmServiceDto" : {
        "required" : [ "bsmCode", "prefix" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "bsmCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "prefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "customFields" : {
            "type" : "array",
            "xml" : {
              "name" : "parameters",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/CustomFieldDto"
            }
          },
          "imageBase64" : {
            "type" : "string"
          },
          "imagePath" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "BsmService"
        }
      },
      "ProductChargeTemplatesResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "productChargeTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductChargeTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "ProductChargeTemplatesResponse"
        }
      },
      "GetListProductTemplateResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingAndFiltering"
          },
          "listProductTemplate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductTemplateDto"
            }
          }
        },
        "xml" : {
          "name" : "GetListProductTemplateResponse"
        }
      },
      "AbstractEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "enum" : [ "In Study", "In Design", "In Test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          }
        }
      },
      "AlterationPrice" : {
        "type" : "object",
        "properties" : {
          "percentage" : {
            "type" : "string"
          }
        }
      },
      "BundledProductReference" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "enum" : [ "In Study", "In Design", "In Test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          }
        },
        "xml" : {
          "name" : "BundledProductReference",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "CatalogReference" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "enum" : [ "In Study", "In Design", "In Test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          }
        }
      },
      "Note" : {
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "author" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Note",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "Place" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          }
        }
      },
      "Price" : {
        "type" : "object",
        "properties" : {
          "taxIncludedAmount" : {
            "type" : "string"
          },
          "dutyFreeAmount" : {
            "type" : "string"
          },
          "taxRate" : {
            "type" : "string"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "percentage" : {
            "type" : "number"
          }
        }
      },
      "ProductCharacteristic" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ProductCharacteristic",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductOfferPriceAlteration" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          },
          "priceType" : {
            "type" : "string",
            "enum" : [ "recurring", "one time", "usage" ]
          },
          "unitOfMeasure" : {
            "type" : "string"
          },
          "price" : {
            "$ref" : "#/components/schemas/AlterationPrice"
          },
          "recurringChargePeriod" : {
            "type" : "string"
          },
          "priceCondition" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ProductOfferPriceAlteration",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductOfferingPrice" : {
        "type" : "object",
        "properties" : {
          "priceType" : {
            "type" : "string",
            "enum" : [ "recurring", "one time", "usage" ]
          },
          "unitOfMeasure" : {
            "type" : "string"
          },
          "price" : {
            "$ref" : "#/components/schemas/Price"
          },
          "recurringChargePeriod" : {
            "type" : "string"
          },
          "productOfferPriceAlteration" : {
            "$ref" : "#/components/schemas/ProductOfferPriceAlteration"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          }
        }
      },
      "ProductOfferingTerm" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "duration" : {
            "type" : "string"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          }
        },
        "xml" : {
          "name" : "ProductOfferingTerm",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductOrder" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "externalId" : {
            "type" : "string"
          },
          "priority" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requestedStartDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requestedCompletionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expectedCompletionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "notificationContact" : {
            "type" : "string"
          },
          "note" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Note"
            }
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "orderItem" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOrderItem"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "paymentMethods" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDto"
            }
          },
          "dueDateDelayEL" : {
            "type" : "string"
          },
          "dueDateDelayELSpark" : {
            "type" : "string"
          },
          "billingCycle" : {
            "type" : "string"
          },
          "electronicBilling" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          },
          "mailingType" : {
            "type" : "string"
          },
          "emailTemplate" : {
            "type" : "string"
          },
          "ccedEmails" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ProductOrder",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductOrderItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "action" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "appointment" : {
            "type" : "string"
          },
          "billingAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccount"
            }
          },
          "productOffering" : {
            "$ref" : "#/components/schemas/ProductOffering"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          }
        },
        "xml" : {
          "name" : "OrderItem",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductRelationship" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          }
        },
        "xml" : {
          "name" : "ProductRelationship",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "RelatedParty" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          },
          "role" : {
            "type" : "string"
          }
        }
      },
      "ServiceLevelAgreement" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "TimeRange" : {
        "type" : "object",
        "properties" : {
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ApplicableDueDateDelayDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "level" : {
            "type" : "string",
            "enum" : [ "ORDER", "CA", "BC" ]
          },
          "custom" : {
            "type" : "boolean"
          },
          "referenceDate" : {
            "type" : "string",
            "enum" : [ "INVOICE_DATE", "INVOICE_GENERATION_DATE", "END_OF_MONTH_INVOICE_DATE", "NEXT_MONTH_INVOICE_DATE", "END_OF_MONTH_INVOICE_GENERATION_DATE", "NEXT_MONTH_INVOICE_GENERATION_DATE" ]
          },
          "numberOfDays" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dueDateDelayEL" : {
            "type" : "string"
          }
        }
      },
      "Attachment" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Attachment",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "Characteristic" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CustomerService" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "productCharacteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductCharacteristic"
            }
          }
        },
        "xml" : {
          "name" : "CustomerService",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductQuote" : {
        "type" : "object",
        "properties" : {
          "billingAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccount"
            }
          },
          "state" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "externalId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "quoteDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "effectiveQuoteCompletionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "quoteCompletionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fulfillmentStartDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "notificationContact" : {
            "type" : "string"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          },
          "note" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Note"
            }
          },
          "characteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Characteristic"
            }
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "agreement" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceLevelAgreement"
            }
          },
          "quoteProductOfferingPrice" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteProductOfferingPrice"
            }
          },
          "accountingArticlePricesDTO" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountingArticlePricesDTO"
            }
          },
          "quoteItem" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductQuoteItem"
            }
          },
          "customerService" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerService"
            }
          },
          "generatePdf" : {
            "type" : "boolean"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GenerateInvoiceResultDto"
            }
          },
          "contractCode" : {
            "type" : "string"
          },
          "customerServiceDateBegin" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerServiceDuration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "opportunityRef" : {
            "type" : "string"
          },
          "virtual" : {
            "type" : "boolean"
          }
        },
        "xml" : {
          "name" : "Quote",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "ProductQuoteItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "action" : {
            "type" : "string"
          },
          "appointment" : {
            "type" : "string"
          },
          "attachment" : {
            "$ref" : "#/components/schemas/Attachment"
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "note" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Note"
            }
          },
          "productOffering" : {
            "$ref" : "#/components/schemas/ProductOffering"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "service" : {
            "$ref" : "#/components/schemas/Service"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customerService" : {
            "$ref" : "#/components/schemas/CustomerService"
          },
          "itemQuoteProductOfferingPrice" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteProductOfferingPrice"
            }
          },
          "billingAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BillingAccount"
            }
          },
          "produtQuote" : {
            "type" : "string"
          },
          "produtQuoteVersion" : {
            "type" : "string"
          },
          "produtVersion" : {
            "type" : "string"
          },
          "subscriptionPeriod" : {
            "$ref" : "#/components/schemas/TimeRange"
          },
          "consumptionCdr" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "QuoteItem",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "QuotePriceAlteration" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimeRange"
          }
        }
      },
      "QuoteProductOfferingPrice" : {
        "type" : "object",
        "properties" : {
          "priceType" : {
            "type" : "string",
            "enum" : [ "recurring", "one time", "usage" ]
          },
          "recurringChargePeriod" : {
            "type" : "string"
          },
          "priceCondition" : {
            "type" : "string"
          },
          "quotePriceAlteration" : {
            "$ref" : "#/components/schemas/QuotePriceAlteration"
          },
          "price" : {
            "$ref" : "#/components/schemas/Price"
          }
        }
      },
      "Service" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "productCharacteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductCharacteristic"
            }
          }
        },
        "xml" : {
          "name" : "Service",
          "namespace" : "http://www.tmforum.org"
        }
      },
      "AccountingPeriod" : {
        "type" : "object",
        "properties" : {
          "useSubAccountingPeriods" : {
            "type" : "boolean",
            "description" : "Indicate if use SubAccountingPeriods"
          },
          "subAccountingPeriodType" : {
            "type" : "string",
            "description" : "Indicate the SubAccountingPeriod type"
          },
          "fiscalYear" : {
            "type" : "string",
            "description" : "Indicate the fiscal year"
          },
          "regularUserLockOption" : {
            "type" : "string",
            "description" : "Indicate the RegularUserLockOption"
          },
          "customLockNumberDays" : {
            "type" : "integer",
            "description" : "Indicate the CustomLockNumberDays",
            "format" : "int32"
          },
          "customLockOption" : {
            "type" : "string",
            "description" : "Indicate the CustomLockOption"
          },
          "forceOption" : {
            "type" : "string",
            "description" : "Indicate the ForceOption"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Indicate the start date",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "Indicate the end date",
            "format" : "date-time"
          },
          "accountingOperationAction" : {
            "type" : "string",
            "description" : "Indicate the AccountingOperationAction"
          },
          "forceCustomDay" : {
            "type" : "integer",
            "description" : "Indicate the ForceCustomDay",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CustomerAccountInput" : {
        "type" : "object",
        "properties" : {
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          }
        }
      },
      "AccountOperationClose" : {
        "required" : [ "accountOperations" ],
        "type" : "object",
        "properties" : {
          "accountOperations" : {
            "type" : "array",
            "description" : "List of AccountOperation to be closed",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperationInput"
            }
          }
        }
      },
      "AccountOperationInput" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "AccountOperation Id",
            "format" : "int64"
          }
        },
        "description" : "List of AccountOperation to be closed"
      },
      "ChangeStatusDto" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "new status of account operations",
            "enum" : [ "POSTED", "REJECTED", "EXPORTED", "EXPORT_FAILED", "CLOSED" ]
          },
          "accountOperations" : {
            "type" : "array",
            "description" : "ids of account operations to update",
            "items" : {
              "type" : "integer",
              "description" : "ids of account operations to update",
              "format" : "int64"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "AccountOperationAndSequence" : {
        "required" : [ "amountToMatch", "id", "sequence" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "AccountOperation Id",
            "format" : "int64"
          },
          "amountToMatch" : {
            "type" : "number",
            "description" : "amount to match"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "Matching sequence",
            "format" : "int32"
          }
        },
        "description" : "List of AccountOperation and Sequence for matching"
      },
      "MatchingAccountOperation" : {
        "required" : [ "accountOperations" ],
        "type" : "object",
        "properties" : {
          "accountOperations" : {
            "type" : "array",
            "description" : "List of AccountOperation and Sequence for matching",
            "items" : {
              "$ref" : "#/components/schemas/AccountOperationAndSequence"
            }
          }
        }
      },
      "LitigationInput" : {
        "type" : "object",
        "properties" : {
          "litigationReason" : {
            "type" : "string",
            "description" : "Litigation reason to record on account operation"
          }
        }
      },
      "AmountToTransferDto" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "Amount to transfer"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/CustomerAccount"
          }
        },
        "description" : "List of amounts to transfer"
      },
      "AmountsTransferDto" : {
        "type" : "object",
        "properties" : {
          "amountsToTransfer" : {
            "type" : "array",
            "description" : "List of amounts to transfer",
            "items" : {
              "$ref" : "#/components/schemas/AmountToTransferDto"
            }
          }
        }
      },
      "UnMatchingAccountOperation" : {
        "required" : [ "accountOperations" ],
        "type" : "object",
        "properties" : {
          "accountOperations" : {
            "type" : "array",
            "description" : "List of AccountOperation for matching",
            "items" : {
              "$ref" : "#/components/schemas/UnMatchingAccountOperationDetail"
            }
          }
        }
      },
      "UnMatchingAccountOperationDetail" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "AccountOperation Id",
            "format" : "int64"
          },
          "matchingAmountIds" : {
            "type" : "array",
            "description" : "MatchingAmount Id",
            "items" : {
              "type" : "integer",
              "description" : "MatchingAmount Id",
              "format" : "int64"
            }
          }
        },
        "description" : "List of AccountOperation for matching"
      },
      "DeferralPayments" : {
        "type" : "object",
        "properties" : {
          "paymentMethod" : {
            "type" : "string"
          },
          "accountOperationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "AppliedChargeResponseDto" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "walletOperationCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "edrIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "reservationIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "orderProductId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "orderOfferId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "walletOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WalletOperationDto"
            }
          },
          "error" : {
            "$ref" : "#/components/schemas/CdrError"
          }
        },
        "xml" : {
          "name" : "AppliedChargeResponseDto"
        }
      },
      "ProcessApplyChargeListResult" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "walletOperationCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mode" : {
            "type" : "string",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "statistics" : {
            "$ref" : "#/components/schemas/Statistics"
          },
          "appliedCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AppliedChargeResponseDto"
            }
          }
        }
      },
      "Statistics" : {
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "format" : "int32"
          },
          "success" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fail" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ApplyOneShotChargeListInput" : {
        "type" : "object",
        "properties" : {
          "isVirtual" : {
            "type" : "boolean",
            "description" : "Rating must happen in a transaction no change performed during rating is persisted if isVirtual=true"
          },
          "mode" : {
            "type" : "string",
            "description" : "How the Charges list is processed : STOP_ON_FIRST_FAIL, PROCESS_ALL, ROLLBACK_ON_ERROR",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "isRateTriggeredEdr" : {
            "type" : "boolean",
            "description" : "Rate all TriggeredEDR created by the rating of the charge"
          },
          "maxDepth" : {
            "type" : "integer",
            "description" : "The max deep used in triggered EDR",
            "format" : "int32"
          },
          "isReturnWalletOperations" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of IDs of all wallet operations produced. Applies to non-virtual mode only."
          },
          "isReturnWalletOperationDetails" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of details of all wallet operations produced, even if they are virtual"
          },
          "isReturnCounters" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of counter updates produced, even if they are virtual"
          },
          "isGenerateRTs" : {
            "type" : "boolean",
            "description" : "If true, the API will automatically generate RTs"
          },
          "chargesToApply" : {
            "type" : "array",
            "description" : "The list of one shot charges to apply",
            "items" : {
              "$ref" : "#/components/schemas/ApplyOneShotChargeInstanceRequestDto"
            }
          }
        }
      },
      "ParentInput" : {
        "type" : "object",
        "properties" : {
          "parentCode" : {
            "type" : "string",
            "description" : "Parent code"
          },
          "markOpenWalletOperationsToRerate" : {
            "type" : "boolean",
            "description" : "flag to forces OPEN  wallet operations rerate"
          },
          "parentId" : {
            "type" : "integer",
            "description" : "Parent id",
            "format" : "int64"
          }
        }
      },
      "ConsumerInput" : {
        "type" : "object",
        "properties" : {
          "consumerId" : {
            "type" : "integer",
            "description" : "Consumer id",
            "format" : "int64"
          },
          "consumerCode" : {
            "type" : "string",
            "description" : "Consumer code"
          }
        }
      },
      "FilesPagingAndFiltering" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "directory" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sortBy" : {
            "type" : "string"
          },
          "sortOrder" : {
            "type" : "string"
          }
        }
      },
      "AccountingCodeMappingInput" : {
        "type" : "object",
        "properties" : {
          "accountingArticleCode" : {
            "type" : "string",
            "description" : "Accounting article code"
          },
          "accountingCodeMappings" : {
            "type" : "array",
            "description" : "Accounting code mapping list",
            "items" : {
              "$ref" : "#/components/schemas/AccountingCodeMapping"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "AuditDataConfigurationDto" : {
        "required" : [ "entityClass" ],
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "string",
            "description" : "Entity fields to track, a comma separated list of fields"
          },
          "actions" : {
            "type" : "string",
            "description" : "Actions to track - A comma separated list of actions: CREATE, UPDATE, DELETE"
          },
          "entityClass" : {
            "type" : "string",
            "description" : "entity type/class to track"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "GenericPagingAndFiltering" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "groupBy" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "genericFields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "nestedEntities" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "nestedDepth" : {
            "type" : "integer",
            "format" : "int64"
          },
          "excluding" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "having" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "translations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "joinType" : {
            "type" : "string",
            "enum" : [ "INNER", "LEFT", "RIGHT" ]
          },
          "forceCount" : {
            "type" : "boolean"
          },
          "isFilter" : {
            "type" : "boolean"
          },
          "fullTextFilter" : {
            "type" : "string"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sortBy" : {
            "type" : "string"
          },
          "sortOrder" : {
            "type" : "string"
          },
          "genericFieldDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GenericFieldDetails"
            }
          }
        }
      },
      "EinvoiceSetting" : {
        "type" : "object",
        "properties" : {
          "forceXmlGeneration" : {
            "type" : "boolean",
            "description" : "forcing xml generation job to be changing after invoicing job"
          },
          "forcePDFGeneration" : {
            "type" : "boolean",
            "description" : "forcing pdf generation job to be changing after xml generation job"
          },
          "forceUBLGeneration" : {
            "type" : "boolean",
            "description" : "forcing pdf generation ubl to be changing after pdf generation job"
          },
          "invoicingJob" : {
            "type" : "string",
            "description" : "the code of invoicing job"
          },
          "pdfGenerationJob" : {
            "type" : "string",
            "description" : "the code of pdf generation job"
          },
          "ublGenerationJob" : {
            "type" : "string",
            "description" : "the code of ubl generation job"
          },
          "xmlGenerationJob" : {
            "type" : "string",
            "description" : "the code of xml generation job"
          },
          "vatDateCode" : {
            "type" : "string",
            "description" : "the vat date code",
            "enum" : [ "INV_DOC_ISSUE_DATETIME", "DELIVERY_DATETIME", "PAID_TO_DATE" ]
          },
          "customizationID" : {
            "type" : "string",
            "description" : "customization ID"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "InvoiceLinesToMarkAdjustment" : {
        "type" : "object",
        "properties" : {
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "ignoreInvalidStatuses" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceLinesInput" : {
        "type" : "object",
        "properties" : {
          "skipValidation" : {
            "type" : "boolean",
            "description" : "Indicate if the invoice line will skip validation"
          },
          "invoiceLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLine"
            }
          }
        }
      },
      "InvoiceSubTotalsDto" : {
        "required" : [ "subTotals" ],
        "type" : "object",
        "properties" : {
          "invoiceType" : {
            "$ref" : "#/components/schemas/InvoiceTypeDto"
          },
          "subTotals" : {
            "type" : "array",
            "description" : "The sub Totals",
            "items" : {
              "$ref" : "#/components/schemas/SubTotalsDto"
            }
          }
        },
        "xml" : {
          "name" : "InvoiceSubTotals"
        }
      },
      "SubTotalsDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The Sub Totals id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The Sub Totals code"
          },
          "el" : {
            "type" : "string",
            "description" : "The EL Expression"
          },
          "label" : {
            "type" : "string",
            "description" : "The Label Translations"
          },
          "languageLabels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "description" : "The sub Totals",
        "xml" : {
          "name" : "SubTotals"
        }
      },
      "DiscountInvoiceAggregate" : {
        "type" : "object",
        "properties" : {
          "discountPlanItemCode" : {
            "type" : "string",
            "description" : "The code of discount plan item"
          },
          "discountPercent" : {
            "type" : "number",
            "description" : "The discount percent"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "InvoiceInput" : {
        "type" : "object",
        "properties" : {
          "isVirtual" : {
            "type" : "boolean",
            "description" : "Indicate if the invoice is virtual"
          },
          "isIncludeBalance" : {
            "type" : "boolean",
            "description" : "Indicate if we want include balance to the invoice"
          },
          "isAutoValidation" : {
            "type" : "boolean",
            "description" : "Indicate if the invoice set auto validation"
          },
          "skipValidation" : {
            "type" : "boolean",
            "description" : "Indicate if validation is skept"
          },
          "isDraft" : {
            "type" : "boolean",
            "description" : "Indicate if the invoice is DRAFT"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          }
        }
      },
      "InvoiceLineRTs" : {
        "type" : "object",
        "properties" : {
          "invoiceLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ratedTransactionsId" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "description" : "Containing list of invoice line Ids to replicate in the new adjustment."
      },
      "InvoiceLinesToReplicate" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "Comment to be added to the adjustment."
          },
          "globalAdjustment" : {
            "type" : "boolean"
          },
          "adjType" : {
            "type" : "string"
          },
          "invoiceLinesIds" : {
            "type" : "array",
            "description" : "Containing list of invoice line Ids to replicate in the new adjustment.",
            "items" : {
              "type" : "integer",
              "description" : "Containing list of invoice line Ids to replicate in the new adjustment.",
              "format" : "int64"
            }
          },
          "invoiceLinesRTs" : {
            "type" : "array",
            "description" : "Containing list of invoice line Ids to replicate in the new adjustment.",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLineRTs"
            }
          },
          "rerate" : {
            "type" : "boolean",
            "description" : "Flag to indicate if rerating is needed. Default value : false"
          }
        }
      },
      "BasicInvoice" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "The comment for the invoice"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Seller"
          },
          "label" : {
            "type" : "string",
            "description" : "The label"
          },
          "orderCode" : {
            "type" : "string",
            "description" : "The order code for invoice"
          },
          "articleCode" : {
            "type" : "string",
            "description" : "The article code for invoice"
          },
          "autoMatching" : {
            "type" : "boolean",
            "description" : "The flag for auto matching"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The due date",
            "format" : "date-time"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "The billing account code"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "The Date of the invoice",
            "format" : "date-time"
          },
          "amountWithTax" : {
            "type" : "number",
            "description" : "The maount with tax"
          },
          "purchaseOrders" : {
            "type" : "array",
            "description" : "The list of purchase order numbers",
            "items" : {
              "type" : "string",
              "description" : "The list of purchase order numbers"
            }
          },
          "invoiceTypeCode" : {
            "type" : "string",
            "description" : "The invoice type code"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "InvoiceLinesToDuplicate" : {
        "type" : "object",
        "properties" : {
          "invoiceLineIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "skipValidation" : {
            "type" : "boolean"
          }
        }
      },
      "GenerateInvoiceInput" : {
        "type" : "object",
        "properties" : {
          "filters" : {
            "$ref" : "#/components/schemas/FilterDto"
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "Order number"
          },
          "targetCode" : {
            "type" : "string",
            "description" : "Target entity code"
          },
          "firstTransactionDate" : {
            "type" : "string",
            "description" : " First transaction date",
            "format" : "date-time"
          },
          "applyMinimum" : {
            "type" : "string",
            "description" : "Apply mode for invoice minimum rules"
          },
          "openOrderCode" : {
            "type" : "string",
            "description" : "OpenOrder code"
          },
          "billingAccountCode" : {
            "type" : "string",
            "description" : "Billing account code"
          },
          "isDraft" : {
            "type" : "boolean",
            "description" : "Indicate if the invoice is DRAFT"
          },
          "invoicingDate" : {
            "type" : "string",
            "description" : "Invoicing date",
            "format" : "date-time"
          },
          "purchaseOrders" : {
            "type" : "array",
            "description" : "The list of purchase order numbers",
            "items" : {
              "type" : "string",
              "description" : "The list of purchase order numbers"
            }
          },
          "targetType" : {
            "type" : "string",
            "description" : "Billing Cycle Type",
            "example" : "possible value are: BILLINGACCOUNT, SUBSCRIPTION, ORDER"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "lastTransactionDate" : {
            "type" : "string",
            "description" : " Last transaction date",
            "format" : "date-time"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "generateXML" : {
            "type" : "boolean",
            "description" : "Generate XML"
          },
          "generatePDF" : {
            "type" : "boolean",
            "description" : "Generate PDF"
          },
          "generateAO" : {
            "type" : "boolean",
            "description" : "Generate AO"
          },
          "includeRatedTransactions" : {
            "type" : "boolean",
            "description" : "Includes rated transactions in the return value"
          },
          "applyBillingRules" : {
            "type" : "boolean",
            "description" : "Apply Billing Rules"
          },
          "skipValidation" : {
            "type" : "boolean",
            "description" : "Indicate if validation is skipped"
          }
        }
      },
      "Invoices" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          },
          "next" : {
            "type" : "string",
            "format" : "uri"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previous" : {
            "type" : "string",
            "format" : "uri"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "QuarantineBillingRunDto" : {
        "type" : "object",
        "properties" : {
          "quarantineBillingRunId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "descriptionsTranslated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        },
        "xml" : {
          "name" : "QuarantineBillingRunRequest"
        }
      },
      "RejectReasonInput" : {
        "type" : "object",
        "properties" : {
          "rejectReason" : {
            "type" : "string",
            "description" : "invoice reject reason"
          }
        }
      },
      "InvoiceLinesToRemove" : {
        "type" : "object",
        "properties" : {
          "skipValidation" : {
            "type" : "boolean"
          },
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "InvoiceExchangeRateInput" : {
        "required" : [ "exchangeRate" ],
        "type" : "object",
        "properties" : {
          "exchangeRate" : {
            "type" : "number",
            "description" : "exchange rate"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "InvoiceLineInput" : {
        "type" : "object",
        "properties" : {
          "skipValidation" : {
            "type" : "boolean",
            "description" : "Indicate if the invoice line will skip validation"
          },
          "invoiceLine" : {
            "$ref" : "#/components/schemas/InvoiceLine"
          }
        }
      },
      "InvoicePatchInput" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "The comment for the invoice"
          },
          "purchaseOrders" : {
            "type" : "array",
            "description" : "The list of purchase order numbers",
            "items" : {
              "type" : "string",
              "description" : "The list of purchase order numbers"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ValidateInvoiceDto" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "mode processing by default it's PROCESS_ALL",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "contain filter for retrieving list of invoices ",
              "example" : "filters: { inList id : [id1, id2, ...], status: DRAFT, invoice.id: invoiceId"
            },
            "description" : "contain filter for retrieving list of invoices ",
            "example" : "filters: { inList id : [id1, id2, ...], status: DRAFT, invoice.id: invoiceId"
          },
          "failOnValidatedInvoice" : {
            "type" : "boolean",
            "description" : "flag to raise an error if trying to validate a VALIDATED invoice"
          },
          "failOnCanceledInvoice" : {
            "type" : "boolean",
            "description" : "flag to raise an error if trying to validate a CANCELED invoice"
          },
          "ignoreValidationRules" : {
            "type" : "boolean",
            "description" : "flag to bypass invoice validation rules"
          },
          "generateAO" : {
            "type" : "boolean",
            "description" : "flag to generate AO"
          }
        }
      },
      "InvoiceValidationRuleDto" : {
        "type" : "object",
        "properties" : {
          "priority" : {
            "type" : "integer",
            "description" : "Priority",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "description" : "Type"
          },
          "description" : {
            "type" : "string",
            "description" : "Description Of Invoice Validation Rule"
          },
          "validationScript" : {
            "type" : "string",
            "description" : "Validation Script"
          },
          "validationEL" : {
            "type" : "string",
            "description" : "Validation EL"
          },
          "failStatus" : {
            "type" : "string",
            "description" : "Fail Status",
            "enum" : [ "REJECTED", "SUSPECT", "VALID" ]
          },
          "validTo" : {
            "type" : "string",
            "description" : "Valid To",
            "format" : "date-time"
          },
          "code" : {
            "type" : "string",
            "description" : "Code"
          },
          "operator" : {
            "type" : "string",
            "description" : "Applied operator",
            "enum" : [ "AND", "OR" ]
          },
          "invoiceType" : {
            "type" : "string",
            "description" : "InvoiceType"
          },
          "ruleValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Rule values"
            },
            "description" : "Rule values"
          },
          "evaluationMode" : {
            "type" : "string",
            "description" : "Evaluation Mode",
            "enum" : [ "VALIDATION", "REJECTION", "CONDITION" ]
          },
          "subRules" : {
            "type" : "array",
            "description" : "Sub rules for composite rule",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceValidationRuleDto"
            }
          },
          "validFrom" : {
            "type" : "string",
            "description" : "Valid From",
            "format" : "date-time"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "InvoiceCancellationInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "Transaction mode",
            "enum" : [ "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Invoice cancellation filter"
            },
            "description" : "Invoice cancellation filter"
          },
          "failOnValidatedInvoice" : {
            "type" : "boolean",
            "description" : "Fails on validated invoice"
          },
          "failOnCanceledInvoice" : {
            "type" : "boolean",
            "description" : "Fails on cancelled invoice"
          },
          "ratedTransactionAction" : {
            "type" : "string",
            "description" : "Rated transaction action to perform",
            "enum" : [ "REOPEN", "CANCEL" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CancelBillingRunInput" : {
        "type" : "object",
        "properties" : {
          "ratedTransactionAction" : {
            "type" : "string",
            "description" : "Action to perform",
            "enum" : [ "REOPEN", "CANCEL" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ExceptionalBillingRun" : {
        "type" : "object",
        "properties" : {
          "suspectAutoAction" : {
            "type" : "string",
            "description" : "Suspect auto action",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "billingRunTypeEnum" : {
            "type" : "string",
            "description" : "Billing run process type",
            "enum" : [ "AUTOMATIC", "MANUAL", "FULL_AUTOMATIC" ]
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Filters on RT"
            },
            "description" : "Filters on RT"
          },
          "collectionDate" : {
            "type" : "string",
            "description" : "Billing run collection date",
            "format" : "date-time"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "Invoice date",
            "format" : "date-time"
          },
          "invoiceType" : {
            "type" : "string"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "applicationEl" : {
            "type" : "string"
          },
          "rejectAutoAction" : {
            "type" : "string",
            "description" : "reject auto action",
            "enum" : [ "CANCEL", "MOVE", "MANUAL_ACTION", "AUTOMATIC_VALIDATION", "CANCEL_RT" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "computeDatesAtValidation" : {
            "type" : "boolean",
            "description" : "Decide whether or not dates should be recomputed at invoice validation"
          },
          "disableAggregation" : {
            "type" : "boolean",
            "description" : "Do not aggregate Rated transactions to Invoice lines at all"
          },
          "useAccountingArticleLabel" : {
            "type" : "boolean",
            "description" : "Aggregate based on accounting article label instead of RT description"
          },
          "dateAggregation" : {
            "type" : "string",
            "description" : "Aggregate by date option",
            "enum" : [ "NO_DATE_AGGREGATION", "DAY_OF_USAGE_DATE", "WEEK_OF_USAGE_DATE", "MONTH_OF_USAGE_DATE" ]
          },
          "aggregateUnitAmounts" : {
            "type" : "boolean",
            "description" : "Aggregate per unit amount"
          },
          "ignoreSubscriptions" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore subscription field (multiple subscriptions will be aggregated together)"
          },
          "ignoreOrders" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore order field (multiple orders will be aggregated together)"
          },
          "discountAggregation" : {
            "type" : "string",
            "description" : "Use incremental mode in invoice lines or not",
            "enum" : [ "NO_AGGREGATION", "FULL_AGGREGATION" ]
          },
          "ignoreUserAccounts" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore user account field (multiple user accounts will be aggregated together)"
          },
          "additionalAggregationFields" : {
            "type" : "array",
            "description" : "Additional aggregation fields",
            "items" : {
              "type" : "string",
              "description" : "Additional aggregation fields"
            }
          },
          "incrementalInvoiceLines" : {
            "type" : "boolean",
            "description" : "Decide if adding invoice lines incrementally or not"
          },
          "ignoreServiceInstances" : {
            "type" : "boolean",
            "description" : "If TRUE, aggregation will ignore service instances field"
          },
          "skipValidationScript" : {
            "type" : "boolean",
            "description" : "Skip validation script"
          },
          "preReportAutoOnInvoiceLinesJob" : {
            "type" : "boolean",
            "description" : "Decide if Report job will be launched automatically during invoice line job"
          },
          "preReportAutoOnCreate" : {
            "type" : "boolean",
            "description" : "Decide if Report job will be launched automatically at billing run creation"
          }
        }
      },
      "ProcessCdrListResult" : {
        "type" : "object",
        "properties" : {
          "actionStatus" : {
            "$ref" : "#/components/schemas/ActionStatus"
          },
          "amountWithoutTax" : {
            "type" : "number"
          },
          "amountTax" : {
            "type" : "number"
          },
          "amountWithTax" : {
            "type" : "number"
          },
          "walletOperationCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mode" : {
            "type" : "string",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "statistics" : {
            "$ref" : "#/components/schemas/Statistics"
          },
          "chargedCDRs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChargeCDRResponseDto"
            }
          },
          "counterPeriods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CounterPeriodDto"
            }
          }
        }
      },
      "ChargeCdrListInput" : {
        "type" : "object",
        "properties" : {
          "isVirtual" : {
            "type" : "boolean",
            "description" : "Rating must happen in a transaction no change performed during rating is persisted if isVirtual=true"
          },
          "isRateTriggeredEdr" : {
            "type" : "boolean",
            "description" : "Rate all TriggeredEDR created by the rating of the charge"
          },
          "maxDepth" : {
            "type" : "integer",
            "description" : "The max deep used in triggered EDR",
            "format" : "int32"
          },
          "isReturnWalletOperations" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of IDs of all wallet operations produced. Applies to non-virtual mode only."
          },
          "isReturnWalletOperationDetails" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of details of all wallet operations produced, even if they are virtual"
          },
          "isReturnCounters" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of counter updates produced, even if they are virtual"
          },
          "isGenerateRTs" : {
            "type" : "boolean",
            "description" : "If true, the API will automatically generate RTs"
          },
          "mode" : {
            "type" : "string",
            "description" : "How the CDR list is processed : STOP_ON_FIRST_FAIL, PROCESS_ALL, ROLLBACK_ON_ERROR",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "cdrs" : {
            "type" : "array",
            "description" : "List of CDRs to process",
            "items" : {
              "type" : "string",
              "description" : "List of CDRs to process"
            }
          },
          "isReturnEDRs" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of IDs of all EDRs produced. Applies to non-virtual mode only."
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrDtoResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CdrErrorDto"
            }
          },
          "cdrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrErrorDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "cdrLine" : {
            "type" : "string"
          },
          "rejectReason" : {
            "type" : "string"
          }
        }
      },
      "CdrDtoInput" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "PROCESSED", "CLOSED", "DISCARDED", "ERROR", "TO_REPROCESS" ]
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "parameter4" : {
            "type" : "string"
          },
          "parameter5" : {
            "type" : "string"
          },
          "accessCode" : {
            "type" : "string"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "number"
          },
          "rejectReason" : {
            "type" : "string"
          },
          "parameter6" : {
            "type" : "string"
          },
          "parameter7" : {
            "type" : "string"
          },
          "parameter8" : {
            "type" : "string"
          },
          "parameter9" : {
            "type" : "string"
          },
          "dateParam1" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam2" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam3" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam4" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateParam5" : {
            "type" : "string",
            "format" : "date-time"
          },
          "decimalParam1" : {
            "type" : "number"
          },
          "decimalParam2" : {
            "type" : "number"
          },
          "decimalParam3" : {
            "type" : "number"
          },
          "decimalParam4" : {
            "type" : "number"
          },
          "decimalParam5" : {
            "type" : "number"
          },
          "headerEDRId" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "extraParam" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrListDtoInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "How the CDR list is processed : STOP_ON_FIRST_FAIL, PROCESS_ALL, ROLLBACK_ON_ERROR",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "cdrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CdrDtoInput"
            }
          },
          "returnCDRs" : {
            "type" : "boolean"
          },
          "returnErrors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrListDtoDeletedInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "How the CDR list is processed : STOP_ON_FIRST_FAIL, PROCESS_ALL, ROLLBACK_ON_ERROR",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "cdrs" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "returnCDRs" : {
            "type" : "boolean"
          },
          "returnErrors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrListInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "How the CDR list is processed : STOP_ON_FIRST_FAIL, PROCESS_ALL, ROLLBACK_ON_ERROR",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "cdrs" : {
            "type" : "array",
            "description" : "List of CDRs to process",
            "items" : {
              "type" : "string",
              "description" : "List of CDRs to process"
            }
          },
          "isReturnEDRs" : {
            "type" : "boolean",
            "description" : "If true, the API will return the list of IDs of all EDRs produced. Applies to non-virtual mode only."
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrStatusDtoInput" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "OPEN", "PROCESSED", "CLOSED", "DISCARDED", "ERROR", "TO_REPROCESS" ]
          },
          "rejectReason" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CdrStatusListDtoInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "How the CDR list is processed : STOP_ON_FIRST_FAIL, PROCESS_ALL, ROLLBACK_ON_ERROR",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "cdrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CdrStatusDtoInput"
            }
          },
          "returnCDRs" : {
            "type" : "boolean"
          },
          "returnErrors" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "CancellationInput" : {
        "type" : "object",
        "properties" : {
          "failOnIncorrectStatus" : {
            "type" : "boolean",
            "description" : "Fails on incorrect status"
          },
          "returnRTs" : {
            "type" : "boolean",
            "description" : "Returns RT list"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Filters on RT"
            },
            "description" : "Filters on RT"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "RatedTransactionInput" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Rated transaction description"
          },
          "usageDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "unitAmountWithoutTax" : {
            "type" : "number"
          },
          "businessKey" : {
            "type" : "string"
          },
          "parameter1" : {
            "type" : "string"
          },
          "parameter2" : {
            "type" : "string"
          },
          "parameter3" : {
            "type" : "string"
          },
          "serviceInstanceCode" : {
            "type" : "string"
          },
          "userAccountCode" : {
            "type" : "string"
          },
          "billingAccountCode" : {
            "type" : "string"
          },
          "subscriptionCode" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "number"
          },
          "parameterExtra" : {
            "type" : "string"
          },
          "unitPrice" : {
            "type" : "number"
          },
          "chargeInstanceCode" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DuplicateRTDto" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "description" : "mode processing by default it's PROCESS_ALL",
            "enum" : [ "STOP_ON_FIRST_FAIL", "PROCESS_ALL", "ROLLBACK_ON_ERROR" ]
          },
          "negateAmount" : {
            "type" : "boolean",
            "description" : "flag to negate unit and total amounts"
          },
          "returnRts" : {
            "type" : "boolean",
            "description" : "return number of processed/success/fails ids"
          },
          "startJob" : {
            "type" : "boolean",
            "description" : "start job "
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "contain filter for retrieving list of ratedTransaction ",
              "example" : "filters: { inList id : [id1, id2, ...], status: BILLED, invoiceLine.invoice.id: invoiceId"
            },
            "description" : "contain filter for retrieving list of ratedTransaction ",
            "example" : "filters: { inList id : [id1, id2, ...], status: BILLED, invoiceLine.invoice.id: invoiceId"
          }
        }
      },
      "DiscountPlanInstanciateDto" : {
        "type" : "object",
        "properties" : {
          "discountPlan" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/Resource"
          }
        }
      },
      "PricePlanMLinesDTO" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "data",
            "items" : {
              "type" : "string",
              "description" : "data",
              "format" : "byte"
            }
          },
          "pricePlanMatrixVersion" : {
            "type" : "integer",
            "description" : "price plan matrix version",
            "format" : "int32"
          },
          "pricePlanMatrixCode" : {
            "type" : "string",
            "description" : "price plan matrix code"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ImportPricePlanVersionsDto" : {
        "type" : "object",
        "properties" : {
          "pricePlanVersions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportPricePlanVersionsItem"
            }
          },
          "fileToImport" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ImportPricePlanVersionsItem" : {
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PUBLISHED", "CLOSED" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chargeCode" : {
            "type" : "string"
          }
        }
      },
      "SimpleOneshotProductDto" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Set of product attributes",
            "items" : {
              "$ref" : "#/components/schemas/ProductVersionAttributeDTO"
            }
          },
          "oneShotChargeTemplateType" : {
            "type" : "string",
            "enum" : [ "oneShotChargeTemplateTypeEnum.subscription", "oneShotChargeTemplateTypeEnum.termination", "oneShotChargeTemplateTypeEnum.other", "oneShotChargeTemplateTypeEnum.invoicing_plan" ]
          },
          "publishPrice" : {
            "type" : "boolean",
            "description" : "Flag to control price publication",
            "default" : true
          },
          "pricePlanCode" : {
            "type" : "string",
            "description" : "Code of the price plan to be associated"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "label" : {
            "type" : "string",
            "description" : "Label of the product / charge"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "productCode" : {
            "type" : "string",
            "description" : "Code of the product"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "price" : {
            "type" : "number",
            "description" : "Price which will be set on the price plan"
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "chargeCode" : {
            "type" : "string",
            "description" : "Code of the recurrent charge"
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        }
      },
      "SimpleRecurrentProductDto" : {
        "type" : "object",
        "properties" : {
          "calendar" : {
            "type" : "string",
            "description" : "Recurrence calendar"
          },
          "subscriptionProrata" : {
            "type" : "boolean",
            "description" : "Calculate subscription prorata"
          },
          "anticipateEndOfSubscription" : {
            "type" : "boolean",
            "description" : "Anticipate end of subscription"
          },
          "applyInAdvance" : {
            "type" : "boolean",
            "description" : "Apply in advance"
          },
          "terminationProrata" : {
            "type" : "boolean",
            "description" : "Calculate termination prorata"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "label" : {
            "type" : "string",
            "description" : "Label of the product / charge"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "productCode" : {
            "type" : "string",
            "description" : "Code of the product"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "price" : {
            "type" : "number",
            "description" : "Price which will be set on the price plan"
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "chargeCode" : {
            "type" : "string",
            "description" : "Code of the recurrent charge"
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        }
      },
      "SimpleUsageProductDto" : {
        "type" : "object",
        "properties" : {
          "filterParam1" : {
            "type" : "string",
            "description" : "Usage charge filter parameter 1"
          },
          "filterParam2" : {
            "type" : "string",
            "description" : "Usage charge filter parameter 2"
          },
          "filterParam3" : {
            "type" : "string",
            "description" : "Usage charge filter parameter 3"
          },
          "filterParam4" : {
            "type" : "string",
            "description" : "Usage charge filter parameter 4"
          },
          "parameter2IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Mandatory?"
          },
          "parameter3IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Mandatory?"
          },
          "parameterExtraTranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "label" : {
            "type" : "string",
            "description" : "Label of the product / charge"
          },
          "validity" : {
            "$ref" : "#/components/schemas/DatePeriod"
          },
          "productCode" : {
            "type" : "string",
            "description" : "Code of the product"
          },
          "parameterExtraDescription" : {
            "type" : "string",
            "description" : "Description of Extra Parameter"
          },
          "parameter3TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameterExtraTranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Extra Parameter",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 2 Hidden?"
          },
          "parameter1IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Hidden?"
          },
          "parameter1IsMandatory" : {
            "type" : "boolean",
            "description" : "Is Parameter 1 Mandatory?"
          },
          "parameterExtraIsMandatory" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Mandatory?"
          },
          "parameterExtraIsHidden" : {
            "type" : "boolean",
            "description" : "Is Extra Parameter Hidden?"
          },
          "price" : {
            "type" : "number",
            "description" : "Price which will be set on the price plan"
          },
          "parameter3Format" : {
            "type" : "string",
            "description" : "Format of Parameter 3",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameterExtraFormat" : {
            "type" : "string",
            "description" : "Format of Extra Parameter",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2Format" : {
            "type" : "string",
            "description" : "Format of Parameter 2",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter2TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1Description" : {
            "type" : "string",
            "description" : "Description of Parameter 1"
          },
          "parameter1Format" : {
            "type" : "string",
            "description" : "Format of Parameter 1",
            "enum" : [ "TEXT", "INTEGER", "DECIMAL", "DATE", "BOOLEAN" ]
          },
          "parameter1TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter1TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 1",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter2Description" : {
            "type" : "string",
            "description" : "Description of Parameter 2"
          },
          "parameter3IsHidden" : {
            "type" : "boolean",
            "description" : "Is Parameter 3 Hidden?"
          },
          "chargeCode" : {
            "type" : "string",
            "description" : "Code of the recurrent charge"
          },
          "parameter3TranslatedLongDescriptions" : {
            "type" : "array",
            "description" : "Translated long descriptions of Parameter 3",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          },
          "parameter3Description" : {
            "type" : "string",
            "description" : "Description of Parameter 3"
          },
          "parameter2TranslatedDescriptions" : {
            "type" : "array",
            "description" : "Translated descriptions of Parameter 2",
            "items" : {
              "$ref" : "#/components/schemas/LanguageDescriptionDto"
            }
          }
        }
      },
      "PriceListLineDto" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description"
          },
          "rate" : {
            "type" : "number",
            "description" : "rate of the priceList",
            "format" : "double"
          },
          "chargeTemplateCode" : {
            "type" : "string",
            "description" : "code of charge template"
          },
          "amount" : {
            "type" : "number",
            "description" : "amount"
          },
          "priceListCode" : {
            "type" : "string",
            "description" : "priceList code"
          },
          "offerCategoryCode" : {
            "type" : "string",
            "description" : "code of the offer category"
          },
          "productCategoryCode" : {
            "type" : "string",
            "description" : "code of the product category"
          },
          "priceListRateType" : {
            "type" : "string",
            "description" : "rate of priceList type",
            "example" : "possible value are : PERCENTAGE, FIXED",
            "enum" : [ "FIXED", "PERCENTAGE" ]
          },
          "productCode" : {
            "type" : "string",
            "description" : "code of the product"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "applicationEl" : {
            "type" : "string",
            "description" : "Expression language to condition priceList line application"
          },
          "offerTemplateCode" : {
            "type" : "string",
            "description" : "code of the offer template"
          },
          "pricePlanCode" : {
            "type" : "string",
            "description" : "code price plan"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "NotFoundException" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "message" : {
                "type" : "string"
              },
              "localizedMessage" : {
                "type" : "string"
              }
            }
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "response" : {
            "$ref" : "#/components/schemas/Response"
          },
          "message" : {
            "type" : "string"
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          },
          "localizedMessage" : {
            "type" : "string"
          }
        }
      },
      "HugeEntity" : {
        "type" : "object",
        "properties" : {
          "hugeLists" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mandatoryFilterFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "entityClass" : {
            "type" : "string"
          }
        },
        "description" : "Entities with Huge Volume"
      },
      "SMSTemplateDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "media" : {
            "type" : "string",
            "enum" : [ "POSTAL_MAIL", "EMAIL", "SMS", "IM", "FAX", "VOICE", "WEBSERVICE", "QUEUE", "FTP_FILE", "CFT_FILE", "DATABASE", "DUNNING_MEDIA" ]
          },
          "tagStartDelimiter" : {
            "type" : "string"
          },
          "tagEndDelimiter" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DUNNING", "INVOICE", "OTHER" ]
          },
          "textContent" : {
            "type" : "string"
          },
          "translatedTextContent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedTextContentDto"
            }
          }
        },
        "xml" : {
          "name" : "MessageTemplate"
        }
      },
      "EmailTemplatePatchDto" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Entity id",
            "format" : "int64"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the entity",
            "xml" : {
              "attribute" : true
            }
          },
          "updatedCode" : {
            "type" : "string",
            "description" : "The changed code"
          },
          "media" : {
            "type" : "string",
            "enum" : [ "POSTAL_MAIL", "EMAIL", "SMS", "IM", "FAX", "VOICE", "WEBSERVICE", "QUEUE", "FTP_FILE", "CFT_FILE", "DATABASE", "DUNNING_MEDIA" ]
          },
          "tagStartDelimiter" : {
            "type" : "string"
          },
          "tagEndDelimiter" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DUNNING", "INVOICE", "OTHER" ]
          },
          "textContent" : {
            "type" : "string"
          },
          "translatedTextContent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedTextContentDto"
            }
          },
          "subject" : {
            "type" : "string"
          },
          "htmlContent" : {
            "type" : "string"
          },
          "translatedHtmlContent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedHtmlContentDto"
            }
          },
          "translatedSubject" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TranslatedSubjectDto"
            }
          }
        },
        "xml" : {
          "name" : "EmailTemplate"
        }
      },
      "QuoteEmailInput" : {
        "required" : [ "quoteVersion" ],
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "body of email if not provided default body will be used"
          },
          "from" : {
            "type" : "array",
            "description" : "list from users to send email",
            "items" : {
              "type" : "string",
              "description" : "list from users to send email"
            }
          },
          "to" : {
            "type" : "array",
            "description" : "list to users to send email",
            "items" : {
              "type" : "string",
              "description" : "list to users to send email"
            }
          },
          "subject" : {
            "type" : "string",
            "description" : "subject of email if not provided default subject will be used"
          },
          "cc" : {
            "type" : "array",
            "description" : "list cc users to send email",
            "items" : {
              "type" : "string",
              "description" : "list cc users to send email"
            }
          },
          "quoteCode" : {
            "type" : "string",
            "description" : "Discount plan attached to quote offer"
          },
          "quoteVersion" : {
            "type" : "integer",
            "description" : "quote version",
            "format" : "int32"
          }
        }
      },
      "ContactCategoryDto" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "description of the contact category"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the contact category"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DocumentCategoryDto" : {
        "type" : "object",
        "properties" : {
          "relativePath" : {
            "type" : "string",
            "description" : "relative path"
          },
          "code" : {
            "type" : "string",
            "description" : "code of the document category"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningAgentInput" : {
        "type" : "object",
        "properties" : {
          "external" : {
            "type" : "boolean",
            "description" : "include collection agency"
          },
          "collectionAgency" : {
            "type" : "string",
            "description" : "indicate email collection agency"
          },
          "agentFirstNameItem" : {
            "type" : "string"
          },
          "agentLastNameItem" : {
            "type" : "string"
          },
          "agentEmailItem" : {
            "type" : "string"
          },
          "dunningSettings" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningActionInstanceInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "enum" : [ "MANUAL", "AUTOMATIC" ]
          },
          "description" : {
            "type" : "string"
          },
          "dunningAction" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "actionStatus" : {
            "type" : "string",
            "enum" : [ "TO_BE_DONE", "DONE", "IGNORED" ]
          },
          "actionType" : {
            "type" : "string",
            "enum" : [ "SEND_NOTIFICATION", "RETRY_PAYMENT", "WRITE_OFF_INVOICE", "ISSUE_A_CREDIT_NOTE", "SCRIPT" ]
          },
          "actionOwner" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "actionRestult" : {
            "type" : "string"
          },
          "dunningLevelInstance" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "collectionPlan" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningLevelInstanceInput" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningActionInstanceInput"
            }
          },
          "policyLevel" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "collectionPlan" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "daysOverdue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "collectionPlanStatus" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "levelStatus" : {
            "type" : "string",
            "enum" : [ "TO_BE_DONE", "IN_PROGRESS", "DONE", "IGNORED" ]
          },
          "dunningLevel" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "AvailablePoliciesInput" : {
        "type" : "object",
        "properties" : {
          "collectionPlan" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/Resource"
          }
        }
      },
      "DunningMassSwitchInput" : {
        "type" : "object",
        "properties" : {
          "policy" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "collectionPlans" : {
            "type" : "array",
            "description" : "Collection plan list to check",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          }
        }
      },
      "MassPauseDunningCollectionPlan" : {
        "type" : "object",
        "properties" : {
          "collectionPlans" : {
            "type" : "array",
            "description" : "Collection plan list to check",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "retryPaymentOnResumeDate" : {
            "type" : "boolean",
            "description" : "flag to retry a payment on the resume date"
          },
          "dunningPauseReason" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "forcePause" : {
            "type" : "boolean",
            "description" : "Force pause"
          },
          "pauseUntil" : {
            "type" : "string",
            "description" : "Pause until date",
            "format" : "date-time"
          }
        }
      },
      "MassStopDunningCollectionPlan" : {
        "type" : "object",
        "properties" : {
          "collectionPlans" : {
            "type" : "array",
            "description" : "Indicate dunning list of collection plan",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "dunningStopReason" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "MassSwitchDunningCollectionPlan" : {
        "type" : "object",
        "properties" : {
          "dunningPolicy" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "policyLevel" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "collectionPlanList" : {
            "type" : "array",
            "description" : "Indicate dunning collection plan",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "DunningCollectionPlanPause" : {
        "type" : "object",
        "properties" : {
          "retryPaymentOnResumeDate" : {
            "type" : "boolean",
            "description" : "flag to retry a payment on the resume date"
          },
          "dunningPauseReason" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "forcePause" : {
            "type" : "boolean",
            "description" : "Force pause"
          },
          "pauseUntil" : {
            "type" : "string",
            "description" : "Pause until date",
            "format" : "date-time"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "RemoveActionInstanceInput" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          }
        }
      },
      "RemoveLevelInstanceInput" : {
        "type" : "object",
        "properties" : {
          "levels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          }
        }
      },
      "DunningCollectionPlanStop" : {
        "type" : "object",
        "properties" : {
          "dunningStopReason" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SwitchDunningCollectionPlan" : {
        "type" : "object",
        "properties" : {
          "dunningPolicy" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "policyLevel" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "UpdateLevelInstanceInput" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DunningActionInstanceInput"
            }
          },
          "customFields" : {
            "$ref" : "#/components/schemas/CustomFieldsDto"
          },
          "executionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "daysOverdue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "levelStatus" : {
            "type" : "string",
            "enum" : [ "TO_BE_DONE", "IN_PROGRESS", "DONE", "IGNORED" ]
          }
        }
      },
      "DunningPolicyRules" : {
        "type" : "object",
        "properties" : {
          "policyRules" : {
            "type" : "array",
            "description" : "List of policy rules",
            "items" : {
              "$ref" : "#/components/schemas/PolicyRule"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "PolicyRule" : {
        "type" : "object",
        "properties" : {
          "ruleJoint" : {
            "type" : "string",
            "description" : "Policy rule's rule join",
            "enum" : [ "AND", "OR" ]
          },
          "ruleLines" : {
            "type" : "array",
            "description" : "List of policy rule lines",
            "items" : {
              "$ref" : "#/components/schemas/DunningPolicyRuleLine"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        },
        "description" : "List of policy rules"
      },
      "DunningPolicyInput" : {
        "type" : "object",
        "properties" : {
          "dunningPolicyLevels" : {
            "type" : "array",
            "description" : "Dunning policy levels",
            "items" : {
              "$ref" : "#/components/schemas/DunningPolicyLevel"
            }
          },
          "policyName" : {
            "type" : "string",
            "description" : "dunning policy name"
          },
          "policyDescription" : {
            "type" : "string",
            "description" : "dunning policy description"
          },
          "interestForDelaySequence" : {
            "type" : "integer",
            "description" : "Interest for delay sequence",
            "format" : "int32"
          },
          "minBalanceTrigger" : {
            "type" : "number",
            "description" : "min balance trigger",
            "format" : "double"
          },
          "minBalanceTriggerCurrency" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "determineLevelBy" : {
            "type" : "string",
            "description" : "Determine level by",
            "enum" : [ "DAYS_OVERDUE", "DAYS_OVERDUE_AND_BALANCE_THRESHOLD" ]
          },
          "policyPriority" : {
            "type" : "integer",
            "description" : "Policy priority",
            "format" : "int32"
          },
          "dunningPolicyRules" : {
            "type" : "array",
            "description" : "Dunning policy rules",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "includeDueInvoicesInThreshold" : {
            "type" : "boolean",
            "description" : "include due invoices in threshold"
          },
          "includePayReminder" : {
            "type" : "boolean",
            "description" : "include pay reminder"
          },
          "attachInvoicesToEmails" : {
            "type" : "boolean",
            "description" : "Attach invoices to emails"
          },
          "isDefaultPolicy" : {
            "type" : "boolean",
            "description" : "is default policy"
          },
          "isActivePolicy" : {
            "type" : "boolean",
            "description" : "is policy is activated"
          }
        }
      },
      "DunningTemplate" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "language" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "code" : {
            "type" : "string"
          },
          "subject" : {
            "type" : "string"
          },
          "htmlContent" : {
            "type" : "string"
          },
          "actionChannel" : {
            "type" : "string"
          }
        }
      },
      "UntdidInvoiceSubjectCode" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "code" : {
            "type" : "string"
          },
          "codeName" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "FilesSignature" : {
        "type" : "object",
        "properties" : {
          "filePath" : {
            "type" : "string"
          },
          "nature" : {
            "type" : "string",
            "enum" : [ "signable_document", "attachment" ]
          },
          "parse_anchors" : {
            "type" : "boolean"
          }
        }
      },
      "InfoSigner" : {
        "type" : "object",
        "properties" : {
          "locale" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "first_name" : {
            "type" : "string"
          },
          "last_name" : {
            "type" : "string"
          },
          "phone_number" : {
            "type" : "string"
          }
        }
      },
      "SigantureRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "signers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Signers"
            }
          },
          "filesToSign" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilesSignature"
            }
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "YOUSIGN" ]
          },
          "delivery_mode" : {
            "type" : "string",
            "enum" : [ "none", "email" ]
          },
          "custom_experience_id" : {
            "type" : "string"
          },
          "external_id" : {
            "type" : "string"
          }
        }
      },
      "SignatureFields" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "integer",
            "format" : "int32"
          },
          "y" : {
            "type" : "integer",
            "format" : "int32"
          },
          "width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "page" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Signers" : {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignatureFields"
            }
          },
          "info" : {
            "$ref" : "#/components/schemas/InfoSigner"
          },
          "signature_authentication_mode" : {
            "type" : "string",
            "enum" : [ "otp_email", "otp_sms", "no_otp" ]
          }
        }
      },
      "Answers" : {
        "type" : "object",
        "properties" : {
          "question" : {
            "type" : "string"
          },
          "answer" : {
            "type" : "string"
          },
          "field_type" : {
            "type" : "string"
          },
          "field_id" : {
            "type" : "string"
          }
        }
      },
      "SignatureRequestWebHookPayload" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/WebhookData"
          },
          "sandbox" : {
            "type" : "boolean"
          },
          "subscription_id" : {
            "type" : "string"
          },
          "event_id" : {
            "type" : "string"
          },
          "event_name" : {
            "type" : "string"
          },
          "event_time" : {
            "type" : "string",
            "format" : "date-time"
          },
          "subscription_description" : {
            "type" : "string"
          }
        }
      },
      "SignatureRequestWebhook" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "signers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignerWebhook"
            }
          },
          "id" : {
            "type" : "string"
          },
          "source" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "approvers" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "sender" : {
            "type" : "object"
          },
          "documents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "expiration_date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "email_custom_note" : {
            "type" : "string"
          },
          "ordered_signers" : {
            "type" : "boolean"
          },
          "reminder_settings" : {
            "type" : "object"
          },
          "workspace_id" : {
            "type" : "string"
          },
          "delivery_mode" : {
            "type" : "string"
          },
          "external_id" : {
            "type" : "string"
          }
        }
      },
      "SignerWebhook" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "answers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Answers"
            }
          },
          "delivery_mode" : {
            "type" : "object"
          }
        }
      },
      "WebhookData" : {
        "type" : "object",
        "properties" : {
          "signature_request" : {
            "$ref" : "#/components/schemas/SignatureRequestWebhook"
          }
        }
      },
      "ExportConfig" : {
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string"
          },
          "entityCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "exportTemplateName" : {
            "type" : "string"
          },
          "entityClass" : {
            "type" : "string"
          },
          "exportType" : {
            "type" : "string",
            "enum" : [ "xml", "remoteInstance" ]
          },
          "instanceCode" : {
            "type" : "string"
          }
        }
      },
      "FileTypeDto" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "code of the file type"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "MediaFile" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "fileName" : {
            "type" : "string"
          },
          "fileUrl" : {
            "type" : "string",
            "format" : "url"
          },
          "level" : {
            "type" : "string",
            "enum" : [ "OFFER_TEMPLATE", "PRODUCT", "QUOTE" ]
          }
        }
      },
      "EdrVersioningRule" : {
        "type" : "object",
        "properties" : {
          "priority" : {
            "type" : "integer",
            "description" : "Defines versioning rules evaluation order",
            "format" : "int32"
          },
          "keyEL" : {
            "type" : "string",
            "description" : "This expression will return string that will be stored as the EDR eventKey"
          },
          "isNewVersionEL" : {
            "type" : "string",
            "description" : "This expression will tell us if EDR is a new version of the EDR."
          },
          "mediationSetting" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "criteriaEL" : {
            "type" : "string",
            "description" : "Defines if this rule is valid to for this EDR."
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "MediationSetting" : {
        "type" : "object",
        "properties" : {
          "rules" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "list of rules for edr versioning",
            "items" : {
              "$ref" : "#/components/schemas/EdrVersioningRule"
            }
          },
          "enableEdrVersioning" : {
            "type" : "boolean",
            "description" : "enable edr versioning"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "EdrVersioningRuleSwapping" : {
        "required" : [ "rule1", "rule2" ],
        "type" : "object",
        "properties" : {
          "rule1" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "rule2" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "OpenOrderQuoteDto" : {
        "required" : [ "activationDate", "billingAccountCode", "code", "maxAmount", "openOrderTemplate", "openOrderType" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "openOrderType" : {
            "type" : "string",
            "enum" : [ "ARTICLES", "PRODUCTS" ]
          },
          "openOrderTemplate" : {
            "type" : "string"
          },
          "maxAmount" : {
            "type" : "number"
          },
          "endOfValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "thresholds" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ThresholdInput"
            }
          },
          "articles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "billingAccountCode" : {
            "type" : "string"
          },
          "activationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "products" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "externalReference" : {
            "type" : "string"
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ThresholdInput" : {
        "required" : [ "percentage", "sequence" ],
        "type" : "object",
        "properties" : {
          "percentage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "recipients" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "SALES_AGENT", "CUSTOMER", "CONSUMER" ]
            }
          },
          "externalRecipient" : {
            "type" : "string"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "OpenOrderTemplateInput" : {
        "type" : "object",
        "properties" : {
          "templateName" : {
            "type" : "string",
            "description" : "The Template Name"
          },
          "description" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ARCHIVED", "ACTIVE" ]
          },
          "openOrderType" : {
            "type" : "string",
            "enum" : [ "ARTICLES", "PRODUCTS" ]
          },
          "thresholds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ThresholdInput"
            }
          },
          "articles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "products" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "OpenOrderDto" : {
        "type" : "object",
        "properties" : {
          "templateName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "endOfValidityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "thresholds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ThresholdInput"
            }
          },
          "cancelReason" : {
            "type" : "string"
          },
          "externalReference" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "Orders" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "next" : {
            "type" : "string",
            "format" : "uri"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previous" : {
            "type" : "string",
            "format" : "uri"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "OrderItems" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderItem"
            }
          },
          "next" : {
            "type" : "string",
            "format" : "uri"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previous" : {
            "type" : "string",
            "format" : "uri"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Products" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "next" : {
            "type" : "string",
            "format" : "uri"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "previous" : {
            "type" : "string",
            "format" : "uri"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "AccountOperationsDetails" : {
        "type" : "object"
      },
      "InstallmentAccountOperation" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "AccountOperation Id",
            "format" : "int64"
          }
        },
        "description" : "List of Installment AccountOperation"
      },
      "PaymentPlanDto" : {
        "required" : [ "actionOnRemainingAmount", "amountPerInstallment", "amountToRecover", "code", "customerAccount", "numberOfInstallments", "recurringUnit", "startDate", "targetedAos" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "amountToRecover" : {
            "type" : "number"
          },
          "amountPerInstallment" : {
            "type" : "number"
          },
          "numberOfInstallments" : {
            "type" : "integer",
            "format" : "int32"
          },
          "recurringUnit" : {
            "type" : "string",
            "enum" : [ "MONTH", "DAY" ]
          },
          "targetedAos" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of Installment AccountOperation",
            "items" : {
              "$ref" : "#/components/schemas/InstallmentAccountOperation"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "COMPLETED" ]
          },
          "code" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "actionOnRemainingAmount" : {
            "type" : "string",
            "enum" : [ "FIRST", "LAST", "ADDITIONAL" ]
          },
          "customerAccount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RejectionCodeClearInput" : {
        "type" : "object",
        "properties" : {
          "force" : {
            "type" : "boolean"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/Resource"
          }
        }
      },
      "RejectionAction" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Payment rejection action description"
          },
          "scriptParameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Payment rejection action script parameters"
            },
            "description" : "Payment rejection action script parameters"
          },
          "rejectionCodeGroup" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "scriptInstance" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "sequence" : {
            "type" : "integer",
            "description" : "Payment rejection action sequence",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "RejectionCode" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "descriptionI18n" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "RejectionGroup" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Payment rejection action description"
          },
          "rejectionCodes" : {
            "type" : "array",
            "description" : "Associated payment rejection codes",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "rejectionActions" : {
            "type" : "array",
            "description" : "Associated payment rejection actions",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "paymentGateway" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "RejectionPayment" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "Rejection Payment comment"
          },
          "rejectionDate" : {
            "type" : "string",
            "description" : "Rejection payment date",
            "format" : "date-time"
          },
          "rejectionCode" : {
            "type" : "string",
            "description" : "Rejection payment code"
          },
          "skipRejectionActions" : {
            "type" : "boolean",
            "description" : "Skip rejection actions creation"
          },
          "externalPaymentId" : {
            "type" : "string",
            "description" : "Payment rejection external id"
          },
          "paymentGatewayCode" : {
            "type" : "string",
            "description" : "Payment rejection gateway code"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "PaymentGatewayInput" : {
        "type" : "object",
        "properties" : {
          "paymentGateway" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "ImportRejectionCodeInput" : {
        "type" : "object",
        "properties" : {
          "mode" : {
            "type" : "string",
            "enum" : [ "REPLACE", "UPDATE" ]
          },
          "ignoreLanguageErrors" : {
            "type" : "boolean"
          },
          "base64csv" : {
            "type" : "string"
          }
        }
      },
      "CardRefund" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "cardType" : {
            "type" : "string"
          },
          "cardNumber" : {
            "type" : "string"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "ctsAmount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ownerName" : {
            "type" : "string"
          },
          "cvv" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string"
          },
          "aoToPay" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "RejectionCodeDeleteInput" : {
        "type" : "object",
        "properties" : {
          "fullTextFilter" : {
            "type" : "string",
            "description" : "Full text search filter. Mutually exclusive with filters attribute. fullTextFilter has priority"
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Search filters (key = Filter key, value = search pattern or value).",
              "example" : "<ul>\r\n<li>invoice number equals '1578AU': Filter key: invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is not '1578AU': Filter key: ne invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is null: Filter key: invoiceNumber. Filter value: IS_NULL</li>\r\n<li>invoice number is not empty: Filter key: invoiceNumber. Filter value: IS_NOT_NULL</li>\r\n<li>Invoice date is between 2017-05-01 and 2017-06-01: Filter key: fromRange invoiceDate. Filter value: 2017-05-01 Filter key: toRange invoiceDate. Filter value:\r\n2017-06-01</li>\r\n<li>Date is between creation and update dates: Filter key: minmaxRange audit.created audit.updated. Filter value: 2017-05-25</li>\r\n<li>invoice number is any of 158AU, 159KU or 189LL: Filter key: inList invoiceNumber. Filter value: 158AU,159KU,189LL</li>\r\n<li>any of param1, param2 or param3 fields contains 'energy': Filter key: wildcardOr param1 param2 param3. Filter value: energy</li>\r\n<li>any of param1, param2 or param3 fields start with 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: *energy</li>\r\n<li>any of param1, param2 or param3 fields is 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: energy</li>\r\n</ul>"
            },
            "description" : "Search filters (key = Filter key, value = search pattern or value).",
            "example" : "<ul>\r\n<li>invoice number equals '1578AU': Filter key: invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is not '1578AU': Filter key: ne invoiceNumber. Filter value: 1578AU</li>\r\n<li>invoice number is null: Filter key: invoiceNumber. Filter value: IS_NULL</li>\r\n<li>invoice number is not empty: Filter key: invoiceNumber. Filter value: IS_NOT_NULL</li>\r\n<li>Invoice date is between 2017-05-01 and 2017-06-01: Filter key: fromRange invoiceDate. Filter value: 2017-05-01 Filter key: toRange invoiceDate. Filter value:\r\n2017-06-01</li>\r\n<li>Date is between creation and update dates: Filter key: minmaxRange audit.created audit.updated. Filter value: 2017-05-25</li>\r\n<li>invoice number is any of 158AU, 159KU or 189LL: Filter key: inList invoiceNumber. Filter value: 158AU,159KU,189LL</li>\r\n<li>any of param1, param2 or param3 fields contains 'energy': Filter key: wildcardOr param1 param2 param3. Filter value: energy</li>\r\n<li>any of param1, param2 or param3 fields start with 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: *energy</li>\r\n<li>any of param1, param2 or param3 fields is 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: energy</li>\r\n</ul>"
          },
          "fields" : {
            "type" : "string",
            "description" : "Data retrieval options/fieldnames separated by a comma"
          },
          "offset" : {
            "type" : "integer",
            "description" : "Pagination - from record number",
            "format" : "int32"
          },
          "limit" : {
            "type" : "integer",
            "description" : "Pagination - number of items to retrieve",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string",
            "description" : "Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields"
          },
          "sortOrder" : {
            "type" : "string",
            "description" : "Sorting - sort ordee",
            "enum" : [ "ASCENDING", "DESCENDING" ]
          },
          "multiSortOrder" : {
            "type" : "string"
          },
          "totalNumberOfRecords" : {
            "type" : "integer",
            "format" : "int32"
          },
          "loadReferenceDepth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "force" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "RetryPayment" : {
        "type" : "object",
        "properties" : {
          "collectionDate" : {
            "type" : "string",
            "description" : "Retry payment collection date",
            "format" : "date-time"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SequenceAction" : {
        "type" : "object",
        "properties" : {
          "sequenceAction" : {
            "type" : "string",
            "description" : "Payment rejection action action",
            "enum" : [ "UP", "DOWN" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SCTRefund" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "iban" : {
            "type" : "string"
          },
          "aoToRefund" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "ctsAmount" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "QuerySchedulerInput" : {
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "string",
            "description" : "Query scheduler year"
          },
          "dayOfMonth" : {
            "type" : "string",
            "description" : "Query scheduler day of month"
          },
          "hour" : {
            "type" : "string",
            "description" : "Query scheduler hour"
          },
          "minute" : {
            "type" : "string",
            "description" : "Query scheduler minute"
          },
          "second" : {
            "type" : "string",
            "description" : "Query scheduler second"
          },
          "month" : {
            "type" : "string",
            "description" : "Query scheduler month"
          },
          "dayOfWeek" : {
            "type" : "string",
            "description" : "Query scheduler day of week"
          },
          "fileFormat" : {
            "type" : "string",
            "description" : "Query scheduler file format"
          },
          "everyMonth" : {
            "type" : "boolean",
            "description" : "Query scheduler every month"
          },
          "everyDayOfMonth" : {
            "type" : "boolean",
            "description" : "Query scheduler every day of month"
          },
          "everyDayOfWeek" : {
            "type" : "boolean",
            "description" : "Query scheduler every day of week"
          },
          "everyHour" : {
            "type" : "boolean",
            "description" : "Query scheduler every hour"
          },
          "everyMinute" : {
            "type" : "boolean",
            "description" : "Query scheduler every minute"
          },
          "everySecond" : {
            "type" : "boolean",
            "description" : "Query scheduler every second"
          },
          "usersToNotify" : {
            "type" : "array",
            "description" : "Users to notify",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "emailsToNotify" : {
            "type" : "array",
            "description" : "Emails to notify",
            "items" : {
              "type" : "string",
              "description" : "Emails to notify"
            }
          },
          "isQueryScheduler" : {
            "type" : "boolean",
            "description" : "Query scheduler is activated"
          }
        }
      },
      "ReportQueryInput" : {
        "type" : "object",
        "properties" : {
          "aliases" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Report query aliases"
            },
            "description" : "Report query aliases"
          },
          "emails" : {
            "type" : "array",
            "description" : "Report query emails",
            "items" : {
              "type" : "string",
              "description" : "Report query emails"
            }
          },
          "filters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Report query description"
            },
            "description" : "Report query description"
          },
          "genericFields" : {
            "type" : "array",
            "description" : "Report query description",
            "items" : {
              "type" : "string",
              "description" : "Report query description"
            }
          },
          "visibility" : {
            "type" : "string",
            "description" : "Report query description",
            "enum" : [ "PUBLIC", "PRIVATE", "PROTECTED" ]
          },
          "sortBy" : {
            "type" : "string",
            "description" : "Sort by"
          },
          "sortOrder" : {
            "type" : "string",
            "description" : "Sort order",
            "example" : "Possible value are : DESCENDING, ASCENDING",
            "enum" : [ "DESCENDING", "ASCENDING" ]
          },
          "queryName" : {
            "type" : "string",
            "description" : "Report query code"
          },
          "queryDescription" : {
            "type" : "string",
            "description" : "Report query description"
          },
          "advancedQuery" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Report query - Advanced Query"
            },
            "description" : "Report query - Advanced Query"
          },
          "targetEntity" : {
            "type" : "string",
            "description" : "Report query description"
          }
        }
      },
      "VerifyQueryInput" : {
        "type" : "object",
        "properties" : {
          "visibility" : {
            "type" : "string",
            "description" : "Report query description",
            "enum" : [ "PUBLIC", "PRIVATE", "PROTECTED" ]
          },
          "queryName" : {
            "type" : "string",
            "description" : "Report query code"
          }
        }
      },
      "FinanceSettings" : {
        "type" : "object",
        "properties" : {
          "maxAmountPerSecurityDeposit" : {
            "type" : "number"
          },
          "useSecurityDeposit" : {
            "type" : "boolean",
            "description" : "use security deposit"
          },
          "maxAmountPerCustomer" : {
            "type" : "number"
          },
          "autoRefund" : {
            "type" : "boolean",
            "description" : "Auto refund"
          },
          "useAuxiliaryAccounting" : {
            "type" : "boolean",
            "description" : "Use auxiliary accounting"
          },
          "auxiliaryAccountCodeEl" : {
            "type" : "string",
            "description" : "Auxiliary account code El"
          },
          "auxiliaryAccountLabelEl" : {
            "type" : "string",
            "description" : "Auxiliary account label El"
          },
          "openOrderSetting" : {
            "$ref" : "#/components/schemas/OpenOrderSettingInput"
          },
          "activateDunning" : {
            "type" : "boolean",
            "description" : "Activate dunning"
          },
          "enableBillingRedirectionRules" : {
            "type" : "boolean",
            "description" : "Enable Billing Redirection Rules"
          },
          "discountAdvancedMode" : {
            "type" : "boolean",
            "description" : "Enable Billing Redirection Rules"
          },
          "enablePriceList" : {
            "type" : "boolean",
            "description" : "Enable Price List"
          },
          "articleSelectionMode" : {
            "type" : "string",
            "description" : "determinate if the article will be compute before or after pricing",
            "enum" : [ "BEFORE_PRICING", "AFTER_PRICING" ]
          },
          "entitiesWithHugeVolume" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/HugeEntity"
            },
            "description" : "Entities with Huge Volume"
          },
          "billingRunProcessWarning" : {
            "type" : "boolean",
            "description" : "Display warning before process billing Run"
          },
          "nbPartitionsToKeep" : {
            "type" : "integer",
            "description" : "Number of partitions to keep",
            "format" : "int32"
          },
          "synchronousMassActionLimit" : {
            "type" : "integer",
            "description" : "Number of elements to process in a synchronous mode",
            "format" : "int32"
          },
          "woPartitionPeriod" : {
            "type" : "integer",
            "description" : "Wallet Operation partition Period in Months",
            "format" : "int32"
          },
          "rtPartitionPeriod" : {
            "type" : "integer",
            "description" : "Rated Transaction partition Period in Months",
            "format" : "int32"
          },
          "edrPartitionPeriod" : {
            "type" : "integer",
            "description" : "EDR partition Period in Months",
            "format" : "int32"
          },
          "handleFrameworkAgreement" : {
            "type" : "boolean",
            "description" : "Handle Framework Agreement"
          },
          "handleInvoicingPlans" : {
            "type" : "boolean",
            "description" : "Handle Invoice Plans"
          },
          "handleAccountingPeriods" : {
            "type" : "boolean",
            "description" : "Handle Accounting Periods"
          },
          "enableEmptySubscriptionActivation" : {
            "type" : "boolean",
            "description" : "Enable empty subscription activation"
          },
          "enableQuotesFeature" : {
            "type" : "boolean",
            "description" : "Enable Quotes Feature"
          },
          "displayCounters" : {
            "type" : "boolean",
            "description" : "Display Counters"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "OpenOrderSettingInput" : {
        "type" : "object",
        "properties" : {
          "useOpenOrders" : {
            "type" : "boolean"
          },
          "applyMaximumValidity" : {
            "type" : "boolean"
          },
          "applyMaximumValidityUnit" : {
            "type" : "string",
            "enum" : [ "Days", "Weeks", "Months", "Years" ]
          },
          "defineMaximumValidity" : {
            "type" : "boolean"
          },
          "defineMaximumValidityValue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "useManagmentValidationForOOQuotation" : {
            "type" : "boolean"
          },
          "applyMaximumValidityValue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SecurityDepositCancelInput" : {
        "type" : "object",
        "properties" : {
          "cancelReason" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SecurityDepositInput" : {
        "required" : [ "billingAccount", "seller", "template" ],
        "type" : "object",
        "properties" : {
          "currency" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "seller" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "description" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "LOCKED", "UNLOCKED", "AUTO_REFUND", "REFUNDED", "CANCELED", "HOLD", "VALIDATED" ]
          },
          "cancelReason" : {
            "type" : "string"
          },
          "refundReason" : {
            "type" : "string"
          },
          "linkedInvoice" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "template" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "validityPeriod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "validityPeriodUnit" : {
            "type" : "string",
            "enum" : [ "DAYS", "MONTHS", "WEEKS", "YEARS" ]
          },
          "currentBalance" : {
            "type" : "number"
          },
          "amount" : {
            "type" : "number"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "serviceInstance" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "validityDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalReference" : {
            "type" : "string"
          },
          "customerAccount" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SecurityDepositCreditInput" : {
        "required" : [ "amountToCredit", "bankLot", "customerAccountCode", "isToMatching", "occTemplateCode", "paymentInfo", "paymentInfo1", "paymentInfo2", "paymentInfo3", "paymentInfo4", "paymentInfo5", "paymentMethod", "reference" ],
        "type" : "object",
        "properties" : {
          "reference" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CHECK", "DIRECTDEBIT", "WIRETRANSFER", "CARD", "PAYPALPAYMENTLINK", "STRIPEDIRECTLINK", "CASH", "SIPS" ]
          },
          "amountToCredit" : {
            "type" : "number"
          },
          "isToMatching" : {
            "type" : "boolean"
          },
          "bankLot" : {
            "type" : "string"
          },
          "paymentInfo" : {
            "type" : "string"
          },
          "paymentInfo1" : {
            "type" : "string"
          },
          "paymentInfo2" : {
            "type" : "string"
          },
          "paymentInfo3" : {
            "type" : "string"
          },
          "paymentInfo4" : {
            "type" : "string"
          },
          "paymentInfo5" : {
            "type" : "string"
          },
          "customerAccountCode" : {
            "type" : "string"
          },
          "occTemplateCode" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SecurityDepositPaymentInput" : {
        "required" : [ "accountOperation", "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "accountOperation" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SecurityDepositRefundInput" : {
        "type" : "object",
        "properties" : {
          "refundReason" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SecurityDepositTemplate" : {
        "required" : [ "status", "templateName" ],
        "type" : "object",
        "properties" : {
          "currency" : {
            "$ref" : "#/components/schemas/Resource"
          },
          "templateName" : {
            "type" : "string",
            "description" : "The Template Name"
          },
          "status" : {
            "type" : "string",
            "description" : "The Status",
            "enum" : [ "DRAFT", "ACTIVE", "ARCHIVED" ]
          },
          "maxAmount" : {
            "type" : "number",
            "description" : "The Max Amount"
          },
          "allowValidityDate" : {
            "type" : "boolean",
            "description" : "The Allow Validity Date"
          },
          "allowValidityPeriod" : {
            "type" : "boolean",
            "description" : "The Allow Validity Period"
          },
          "minAmount" : {
            "type" : "number",
            "description" : "The Min Amount"
          },
          "numberOfInstantiation" : {
            "type" : "integer",
            "description" : "The Number Of Instantiation",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "SDTemplateListStatus" : {
        "required" : [ "securityDepositTemplates", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "securityDepositTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Resource"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "AdvancedSettings" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "group" : {
            "type" : "string"
          },
          "origin" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "Dunning" : {
        "required" : [ "activateDunning" ],
        "type" : "object",
        "properties" : {
          "activateDunning" : {
            "type" : "boolean"
          }
        }
      },
      "GlobalSettingsInput" : {
        "required" : [ "quoteSettings" ],
        "type" : "object",
        "properties" : {
          "quoteSettings" : {
            "$ref" : "#/components/schemas/QuoteSettings"
          },
          "dunning" : {
            "$ref" : "#/components/schemas/Dunning"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "code" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "QuoteSettings" : {
        "type" : "object",
        "properties" : {
          "quoteDefaultValidityDelay" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    }
  }
}