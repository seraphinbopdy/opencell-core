<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <changeSet author="AndriusKarpavicius" id="rebuild-data-decisionRule">
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="1" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="Other" />
            <column name="model" valueNumeric="1" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="2" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="south" />
            <column name="model" valueNumeric="0" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="3" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="west" />
            <column name="model" valueNumeric="1" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="4" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="north" />
            <column name="model" valueNumeric="0" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="5" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'SalesAmount')==_VALUE_}" />
            <column name="name" value="Sales amount" />
            <column name="type" value="STRING" />
            <column name="value" value="Other" />
            <column name="model" valueNumeric="1" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="6" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'AccountType')==_VALUE_}" />
            <column name="name" value="Account Type" />
            <column name="type" value="STRING" />
            <column name="value" value="Other" />
            <column name="model" valueNumeric="1" />
        </insert>
    </changeSet>

    <changeSet author="AndriusKarpavicius" id="rebuild-data-paymentGateway"> 
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="CARD" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="DIRECTDEBIT" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="PAYPALPAYMENTLINK" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="STRIPEDIRECTLINK" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="CHECK" />
        </insert>
    </changeSet>
    
    <changeSet author="AndriusKarpavicius" id="rebuild-data-payment-gateway">
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-10"/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="org.meveo.service.script.demo.CustomGatewayPaymentScript"/>
            <column name="src_type" value="JAVA_CLASS"/>
            <column name="description" value="CustomGatewayPaymentScript demo implementation"/>
            <column name="created" valueDate="${db.current.time}"/>            
        </insert>
              
        <sql><![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-11  , 0, 0,  ${db.current.time}, 'org.meveo.service.script.demo.PaymentCallBackScript', 'PaymentCallBackScript', 'JAVA_CLASS', null);]]></sql>

        <sql><![CDATA[INSERT INTO ${db.schema.adapted}ar_payment_gateway (id, version, disabled, created, updated, code, description, type, payment_method, card_type,
        implementation_class_name, script_instance_id, trading_currency_id, application_el, uuid, creator) VALUES (-1, 0, 0,  ${db.current.time}, NULL, 'GatewayDemo_CARD', 'GatewayDemo CARD for Demo', 'CUSTOM', 'CARD', NULL, NULL, -10, NULL, NULL,
          '3bb099a3-e72d-49ea-9d96-908e74569e02', 'opencell.admin');]]></sql>
        <sql><![CDATA[INSERT INTO ${db.schema.adapted}ar_payment_gateway (id, version, disabled, created, updated, code, description, type, payment_method, card_type,
        implementation_class_name, script_instance_id, trading_currency_id, application_el, uuid, creator) VALUES (-2, 0, 0,  ${db.current.time}, NULL, 'GatewayDemo_DD', 'GatewayDemo DirectDebit for Demo', 'CUSTOM', 'DIRECTDEBIT', NULL, NULL, -10, NULL, NULL,
          '45b099a3-e72d-49ee-9d56-908e74569e56', 'opencell.admin');]]></sql>          

        <sql><![CDATA[INSERT INTO ${db.schema.adapted}adm_notification (id, version, disabled, created, updated, code, description, class_name_filter, event_expression_filter, event_type_filter, creator, updater, counter_instance_id, counter_template_id, script_instance_id, priority) VALUES (-10, 0, 0,  ${db.current.time}, NULL, 'PaymentCallBack', NULL, 'org.meveo.model.notification.InboundRequest',
          '#{event.pathInfo.startsWith("/DEMO/custom_payment-callback?")}', 'INBOUND_REQ', 'opencell.admin', NULL, NULL, NULL, -11, 0);]]></sql>

        <sql><![CDATA[INSERT INTO ${db.schema.adapted}adm_notification_params VALUES (-10, '#{event.getParameters()}', 'params');]]></sql>        
    </changeSet>

    <changeSet id="rebuild-scripting-jobs" author="AndriusKarpavicius">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq"/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="org.meveo.service.script.product.OneShotOtherTypeMigrationScript"/>
            <column name="src_type" value="JAVA_CLASS"/>
            <column name="description" value="Migrate OneShot Charge of Type OTHER to INVOICING_PLAN"/>
            <column name="created" valueDate="${db.current.time}"/>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-30"/>
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="org.meveo.service.script.ServiceTemplateToProductScript" />
            <column name="description" value="Migration ServiceTemplate To Product" />
            <column name="src_type" value="JAVA_CLASS" />
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="null" />
            <column name="uuid" value="ServiceTemplateToProductJob" />
            <column name="code" value="ServiceTemplateToProductJob" />
            <column name="description" value="ServiceTemplateToProductJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="null" />
            <column name="timerentity_id" value="null" />
            <column name="cf_values">
                <![CDATA[
                    {"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
                ]]>
            </column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="code" value="org.meveo.service.script.MassWrittingOffInvoicesScript" />
            <column name="script">
                <![CDATA[   package org.meveo.service.script;
                    public class MassWrittingOffInvoicesScript extends MassWrittingOffInvoices {}]]>
            </column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="1" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="code" value="massWrittingOffInvoicesJob" />
            <column name="description" value="mass writting off invoices job"/>
            <column name="creator" value="opencell.admin" />
            <column name="job_speed" value="NORMAL" />
            <column name="cluster_behavior" value="LIMIT_TO_SINGLE_NODE" />
            <column name="verbose_report" valueNumeric="1" />
            <column name="disabled" valueNumeric="0" />
            <column name="cf_values">
                <![CDATA[
                {"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "sortingOption": [{"string": "ALPHA"}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/writeOff/inputs"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/writeOff/outputs"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/writeOff/archives"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\";\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"INVOICE_NUMBER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"INVOICE_AMOUNT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"UNCOLLECTIBILITY_CERTIFICATE_NUMBER\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"INVOICE_NUMBER\" required=\"true\"/>\r\n\t\t\t<field name=\"INVOICE_AMOUNT\" required=\"true\"/>\r\n\t\t\t<field name=\"UNCOLLECTIBILITY_CERTIFICATE_NUMBER\" required=\"true\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.MassWrittingOffInvoicesScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
                ]]>
            </column>
        </insert>        
    </changeSet>
    
    
    <changeSet id="#INTRD-19464_20231225-rebuild" author="ZBARIKI">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.DummyPaymentGatewayScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Dummy payment pateway script"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import org.meveo.admin.exception.BusinessException;

import java.util.Map;


public class DummyPaymentGatewayScript extends Script {

    private static final String ERROR_MESSAGE
            = "Dummy gateway for SEPA files generation (For now, its only purpose is to store rejection codes. Please continue to use DD requests for SEPA files)";
    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        throw new BusinessException(ERROR_MESSAGE);
    }
}]]></column>
        </insert>
        <insert tableName="ar_payment_gateway">
            <column name="id" valueSequenceNext="ar_payment_gateway_seq" />
            <column name="version" valueNumeric="1" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="SEPA_FILE" />
            <column name="description"
                    value="Dummy gateway for SEPA files generation (For now, its only purpose is to store rejection codes. Please continue to use DD requests for SEPA files)" />
            <column name="payment_method" value="DIRECTDEBIT" />
            <column name="type" value="NATIF" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code = 'org.meveo.service.script.DummyPaymentGatewayScript')" />
        </insert>
    </changeSet>
    
    <changeSet id="INTRD-20888_20240125-rebuild" author="aeljaouhari">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="code" value="org.meveo.service.script.payment.TestRejectionAction" />
            <column name="script">
                <![CDATA[   package org.meveo.service.script.payment;
                    public class TestRejectionAction extends TestRejectionActionScript {}]]>
            </column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Action will succeed or failed based on the passed parameter, and log the provided text. It’s also possible to add an execution delay."/>
            <column name="description_i18n">
                <![CDATA[{"EN":"<p>Action will succeed or failed based on the passed parameter, and log the provided text.</p><p>It’s also possible to add an execution delay.</p>","FR":"<p>L’action réussira ou échouera selon le paramètre passé, et enregistrera le message fourni.</p><p>Il est également possible d’ajouter un délai d’exécution.</p>"}]]>
            </column>
            <column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='PAYMENT_REJECTION_ACTIONS')" />
        </insert>

        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="executionResult" />
            <column name="description_i18n" value='{"FR":"Résultat de l’action","EN":"Action result"}'/>
            <column name="class_name" value="java.lang.String" />
            <column name="mandatory" valueNumeric="1" />
            <column name="default_value" value="success" />
            <column name="allowed_values" value="success|failure" />
            <column name="values_separator" value="\|" />
            <column name="collection" valueNumeric="0" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.TestRejectionAction')" />
        </insert>

        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="report" />
            <column name="description_i18n" value='{"FR":"Message du rapport","EN":"Report message"}'/>
            <column name="class_name" value="java.lang.String" />
            <column name="mandatory" valueNumeric="1" />
            <column name="values_separator" value="\|" />
            <column name="collection" valueNumeric="0" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.TestRejectionAction')" />
        </insert>

        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="delay" />
            <column name="description_i18n" value='{"FR":"Délai (secondes)","EN":"Delay (seconds)"}'/>
            <column name="class_name" value="java.lang.Integer" />
            <column name="default_value" value="1" />
            <column name="mandatory" valueNumeric="1" />
            <column name="values_separator" value="\|" />
            <column name="collection" valueNumeric="0" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.TestRejectionAction')" />
        </insert>
    </changeSet>

    <changeSet id="INTRD-24480_20241104-rebuild" author="AbdellatifBARI">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.MarkWOToReratePreScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Mark wallet operation to rerate pre script"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[
/*
 * (C) Copyright 2015-2020 Opencell SAS (https://opencellsoft.com/) and contributors.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
 * OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS
 * IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO
 * THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 *
 * For more information on the GNU Affero General Public License, please consult
 * <https://www.gnu.org/licenses/agpl-3.0.en.html>.
 */

package org.meveo.service.script;

import java.util.Map;

/**
 * An definition script which allow to override a configuration huge entity job before run it.
 *
 * @author Abdellatif BARI
 * @since 17.0.0
 */
public class MarkWOToReratePreScript extends PreUpdateHugeEntityScript {

    private static final long serialVersionUID = 1L;

    @Override
    public String getFilter(Map<String, Object> methodContext) {
        return "{" +
                "  \"filters\": {" +
                "    \"inList status\": [\"OPEN\", \"F_TO_RERATE\", \"REJECTED\", \"TREATED\"]" +
                "  }" +
                "}";
    }
}
            ]]></column>
        </insert>
    </changeSet>
    

    <changeSet id="INTRD-22954_20240521-scripts" author="ZBariki">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="code" value="org.meveo.service.script.payment.ApplyChargeScript" />
            <column name="script">
                <![CDATA[package org.meveo.service.script.payment;
                public class ApplyChargeScript extends Script {}]]>
            </column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="version" valueNumeric="0" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Applies a charge to a subscription of the billing account"/>
            <column name="description_i18n">
                <![CDATA[{"FRA":"<p> Applique un frais à un abonnement du compte de facturation. </p><p>Vous devrez sélectionner une charge exceptionnelle (type “autre”) à appliquer, avec la possibilité de remplacer le montant (cela générera une erreur si la charge ne permettent pas la surcharge du montant) et le libellé.</p><p>Nous devrons sélectionner un abonnement actif auquel appliquer le frais. Par défaut, nous utiliserons l&apos;abonnement actif le plus récent facturé sur les factures impayées. Vous pouvez fournir un filtre supplémentaire pour affiner la liste des abonnements. Ce filtre est en fait une expression qui doit s&apos;évaluée en une chaîne qui sera comparée au code des abonnements dans la portée de recherche d&apos;abonnement, à l&apos;aide de l&apos;opérateur fourni. L’expression aura accès au rejet de paiement, au paiement, aux entités du périmètre (liste des factures, compte de facturation, compte client) et à la liste des abonnements dans le périmètre. Si aucun abonnement actif n&apos;est trouvé, le script échouera et une erreur sera remontée.</p>", "ENG":"<p>Applies a charge to a subscription of the billing account.</p><p>For the invoice to be valid, tested amount must pass the test.</p><p>You will have to select a one shot charge (type “other”) to apply, with the ability to override the amount (will raise an error if the charge doesn’t allow amount override) and label.</p> <p>We will need to select an active subscription to apply the charge to. By default, we will use the most recent active subscription invoiced on the unpaid invoices. You can provide an additional filter to narrow down the list of subscriptions. This filter is actually an expression that must evaluate to a string that will be compared to the code of subscriptions in the subscription search scope, using the provided operator. Expression will have access to the rejected payment, the payment, and the scope entities (list of invoices, billing account, customer account) and the list of subscriptions in the scope. If no active subscription is found, the script will fail and an error will be raised.</p>"}]]>
            </column>
            <column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='PAYMENT_REJECTION_ACTIONS')" />
        </insert>

        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="chargeTemplate" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Charge à appliquer","ENG":"Charge to apply"}'/>
            <column name="class_name" value="org.meveo.model.catalog.OneShotChargeTemplate" />
            <column name="mandatory" valueNumeric="1" />
            <column name="filters" value ='{"oneShotChargeTemplateType" : "OTHER", "status" : "ACTIVE"}'>
            </column>
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="amountOverride" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Surcharge du montant","ENG":"Amount override"}'/>
            <column name="class_name" value="java.math.BigDecimal" />
            <column name="mandatory" valueNumeric="0" />
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="descriptionOverride" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Surcharge du libellé de la charge","ENG":"Charge label override"}'/>
            <column name="mandatory" valueNumeric="0" />
            <column name="class_name" value="java.lang.String" />
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="subscriptionSearchScope" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Périmètre de la recherche de souscription","ENG":"Subscription search scope"}'/>
            <column name="mandatory" valueNumeric="0" />
            <column name="class_name" value="java.lang.String" />
            <column name="collection" valueNumeric="1" />
            <column name="allowed_values" value="invoices|billing accounts|customer account" />
            <column name="default_value" value="invoices" />
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="subscriptionSelection" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Selection de la souscription","ENG":"Subscription selection"}'/>
            <column name="mandatory" valueNumeric="0" />
            <column name="class_name" value="java.lang.String" />
            <column name="collection" valueNumeric="1" />
            <column name="allowed_values" value="oldest|newest" />
            <column name="default_value" value="newest" />
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="subscriptionFilter" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Filtre code de souscription","ENG":"Subscription code filter"}'/>
            <column name="mandatory" valueNumeric="0" />
            <column name="class_name" value="java.lang.String" />
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="subscriptionOperator" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Opérateur du filtre de souscription (insensible à la casse)","ENG":"Subscription filter operator (case insensitive)"}'/>
            <column name="mandatory" valueNumeric="0" />
            <column name="class_name" value="java.lang.String" />
            <column name="collection" valueNumeric="1" />
            <column name="allowed_values" value="equals|begins with|contains|ends with" />
            <column name="default_value" value="equals" />
        </insert>
        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="generateRTs" />
            <column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.payment.ApplyChargeScript')" />
            <column name="description_i18n" value='{"FRA":"Générer l’élément valorisé (de manière à ce que la charge soit immédiatement facturable) ?","ENG":"Generate rated item (so the charge will be ready for invoicing)?"}'/>
            <column name="mandatory" valueNumeric="0" />
            <column name="class_name" value="java.lang.Boolean" />
            <column name="default_value" value="true" />
        </insert>
    </changeSet>
    
    
    <changeSet id="#INTRD-21018_20240723-scripts" author="ZakariaB">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq"/>
            <column name="code" value="org.meveo.service.script.EnterLitigation"/>
            <column name="script">
                <![CDATA[package org.meveo.service.script;
 public class EnterLitigation extends EnterLitigationScript {}]]>
            </column>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="version" valueNumeric="0"/>
            <column name="src_type" value="JAVA"/>
            <column name="description" value="This action will unconditionally send the invoices linked to the payment rejection to litigation, using the provided reason."/>
            <column name="description_i18n">
                <![CDATA[{"ENG":"This action will unconditionally send the invoices linked to the payment rejection to litigation, using the provided reason.", "FRA":"Cette action passera inconditionnellement les factures liées au rejet de paiement en litige, avec le motif fourni."}]]>
            </column>
            <column name="script_instance_cat_id"
                    valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='PAYMENT_REJECTION_ACTIONS')"/>
        </insert>

        <insert tableName="meveo_script_parameter">
            <column name="id" valueSequenceNext="meveo_script_parameter_seq"/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="litigationReason"/>
            <column name="description_i18n" value='{"FRA":"Motif de mise en litige","ENG":"Litigation reason"}'/>
            <column name="mandatory" valueNumeric="1"/>
            <column name="class_name" value="java.lang.String"/>
            <column name="default_value" value=""/>
            <column name="values_separator" value="\|"/>
            <column name="collection" valueNumeric="0"/>
            <column name="script_instance_id"
                    valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.EnterLitigation')"/>
        </insert>
    </changeSet>
        
    <changeSet id="#INTRD-13886_20250106" author="anasseh">
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq"/>
			<column name="code" value="org.opencell.payment.stripe.SaveStripePMScript"/>
			<column name="script">
				<![CDATA[package org.opencell.payment.stripe;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.meveo.admin.exception.BusinessException;
import org.meveo.commons.utils.StringUtils;
import org.meveo.model.billing.BankCoordinates;
import org.meveo.model.notification.InboundRequest;
import org.meveo.model.payments.CardPaymentMethod;
import org.meveo.model.payments.CreditCardTypeEnum;
import org.meveo.model.payments.CustomerAccount;
import org.meveo.model.payments.DDPaymentMethod;
import org.meveo.model.payments.PaymentGateway;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.payments.impl.CustomerAccountService;
import org.meveo.service.payments.impl.PaymentGatewayService;
import org.meveo.service.payments.impl.PaymentMethodService;
import org.meveo.service.script.Script;

import com.google.gson.JsonSyntaxException;
import com.stripe.exception.SignatureVerificationException;
import com.stripe.model.Event;
import com.stripe.model.EventDataObjectDeserializer;
import com.stripe.model.PaymentMethod;
import com.stripe.model.StripeObject;
import com.stripe.net.ApiResource;
import com.stripe.net.Webhook;

/**
 * Handle Stripe webhook (async callBack).
 * 
 * @author anasseh
 *
 */
public class SaveStripePMScript extends Script {
	private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(
			"PaymentMethodService");
	private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(
			"CustomerAccountService");
	private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(
			"PaymentGatewayService");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {
		log.info("execute methodContext:{}", methodContext);

		InboundRequest inReq = (InboundRequest) methodContext.get("event");
		log.info("execute inReq.getBody():{}", inReq.getBody());

		if ("POST".equalsIgnoreCase(inReq.getMethod())) {

			final String payload = inReq.getBody();
			Event event = null;

			try {
				event = ApiResource.GSON.fromJson(payload, Event.class);
			} catch (JsonSyntaxException e) {
				throw new BusinessException(e.getMessage());
			}

			// Deserialize the nested object inside the event
			EventDataObjectDeserializer dataObjectDeserializer = event.getDataObjectDeserializer();
			StripeObject stripeObject = null;
			if (dataObjectDeserializer.getObject().isPresent()) {
				stripeObject = dataObjectDeserializer.getObject().get();
			} else {
				throw new BusinessException("EventDataObjectDeserializer deserialization failed ");
			}

			switch (event.getType()) {
			case "payment_method.attached":
				PaymentMethod paymentMethodStripe = (PaymentMethod) stripeObject;
				CustomerAccount ca = customerAccountService.findByExternalRef2(paymentMethodStripe.getCustomer());
				if (ca == null) {
					throw new BusinessException("Cant find customerAccount for Stripe customer:"
							+ paymentMethodStripe.getCustomerObject().getId());
				}

				if (!paymentMethodService.isTokenExist(paymentMethodStripe.getId())) {

					if (paymentMethodStripe.getCard() != null) {
						//PaymentGateway getGateway = getGateway(ca, PaymentMethodEnum.CARD);
						//validateSignature(inReq, getGateway);
						createCardPaymentMethod(paymentMethodStripe, ca);
					}
					if (paymentMethodStripe.getSepaDebit() != null) {
						//PaymentGateway getGateway = getGateway(ca, PaymentMethodEnum.DIRECTDEBIT);
						//validateSignature(inReq, getGateway);
						createDDPaymentMethod(paymentMethodStripe, ca);
					}
				} else {
					log.warn("This PaymentMethod is already exist ");
				}
				break;

			default:
				log.warn("Unhandled event type: " + event.getType());
			}
		}
	}

	private void createDDPaymentMethod(PaymentMethod paymentMethodStripe, CustomerAccount ca) {
		DDPaymentMethod ddPaymentMethod = new DDPaymentMethod();
		ddPaymentMethod.setPaymentType(PaymentMethodEnum.DIRECTDEBIT);
		BankCoordinates bankCoordinates = new BankCoordinates();
		bankCoordinates.setIban(paymentMethodStripe.getSepaDebit().getLast4());
		bankCoordinates.setBankCode(StringUtils.truncate(paymentMethodStripe.getSepaDebit().getBankCode(), 5, false));
		bankCoordinates
				.setBranchCode(StringUtils.truncate(paymentMethodStripe.getSepaDebit().getBranchCode(), 5, false));
		ddPaymentMethod.setBankCoordinates(bankCoordinates);
		ddPaymentMethod.setMandateDate(new Date());
		String mandat = paymentMethodStripe.getSepaDebit().getFingerprint();
		if (StringUtils.isBlank(mandat)) {
			mandat = paymentMethodStripe.getId();
		}
		// mandateId not needed for Stripe, but is mandatory in ihm validation
		ddPaymentMethod.setMandateIdentification(mandat);
		ddPaymentMethod.setCustomerAccount(ca);
		ddPaymentMethod.setPreferred(true);
		ddPaymentMethod.setTokenId(paymentMethodStripe.getId());

		ddPaymentMethod.setAlias("DD " + paymentMethodStripe.getSepaDebit().getLast4());

		paymentMethodService.create(ddPaymentMethod);
		log.info("execute DDPaymentMethod created ");

	}

	private void createCardPaymentMethod(PaymentMethod paymentMethodStripe, CustomerAccount ca) {
		CardPaymentMethod paymentMethod = new CardPaymentMethod();
		paymentMethod.setPaymentType(PaymentMethodEnum.CARD);
		paymentMethod.setCardNumber("xxxxxxxxxxxx" + paymentMethodStripe.getCard().getLast4());
		paymentMethod.setCardType(fromBrand(paymentMethodStripe.getCard().getBrand()));
		paymentMethod.setCustomerAccount(ca);
		paymentMethod.setPreferred(true);
		paymentMethod.setMonthExpiration(paymentMethodStripe.getCard().getExpMonth().intValue());
		paymentMethod.setYearExpiration(paymentMethodStripe.getCard().getExpYear().intValue() - 2000);
		paymentMethod.setOwner(paymentMethodStripe.getBillingDetails().getName());
		paymentMethod.setTokenId(paymentMethodStripe.getId());
		paymentMethod.setHiddenCardNumber(
				CardPaymentMethod.hideCardNumber("xxxxxxxxxxxx" + paymentMethodStripe.getCard().getLast4()));
		paymentMethod.setAlias("Card " + paymentMethodStripe.getCard().getLast4());

		paymentMethodService.create(paymentMethod);
		log.info("execute CardPaymentMethod created ");

	}

	private CreditCardTypeEnum fromBrand(String brand) {
		switch (brand) {
		case "visa":
			return CreditCardTypeEnum.VISA;
		case "amex":
			return CreditCardTypeEnum.AMERICAN_EXPRESS;
		case "mastercard":
			return CreditCardTypeEnum.MASTERCARD;
		default:
			return CreditCardTypeEnum.CB;
		}
	}

	private Event validateSignature(InboundRequest inReq, PaymentGateway paymentGateway) throws BusinessException {
		Map<String, String> headers = inReq.getHeaders();
		String sigHeader = headers.get("Stripe-Signature");
		Event event = null;
		try {
			event = Webhook.constructEvent(inReq.getBody(), sigHeader, paymentGateway.getWebhooksSecretKey());
		} catch (SignatureVerificationException e) {
			throw new BusinessException("InvalidSignature  " + e.getMessage());

		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		return event;

	}
}

]]>
			</column>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="version" valueNumeric="0"/>
			<column name="src_type" value="JAVA"/>
			<column name="description" value="Handle Stripe webhook (async callBack)"/>						
		</insert>
		
		<insert tableName="ar_payment_gateway">
			<column name="id" valueSequenceNext="ar_payment_gateway_seq"/>
			<column name="code" value="Stripe_CARD"/>
			<column name="description" value="The stripe account fro CARD"/>
			<column name="payment_method" value="CARD"/>
			<column name="type" value="NATIF"/>
			<column name="implementation_class_name" value="org.meveo.service.payments.impl.StripeGatewayPayment"/>
			<column name="marchand_id" value="anasseh@yahoo.fr"/>
			<column name="secret_key" value="sk_test_TAQVs6Q2W2IR6dZErkhHWBOH"/>
			<column name="webhooks_secret_key" value="whsec_8YjCaTfZOqGiVwqMJjo9rE7xv3PS80Wp"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="version" valueNumeric="0"/>
			<column name="disabled" valueNumeric="0" />
	    </insert>		
	    
		<insert tableName="ar_payment_gateway">
			<column name="id" valueSequenceNext="ar_payment_gateway_seq"/>
			<column name="code" value="Stripe_DD"/>
			<column name="description" value="The stripe account fro DirectDebit"/>
			<column name="payment_method" value="DIRECTDEBIT"/>
			<column name="type" value="NATIF"/>
			<column name="implementation_class_name" value="org.meveo.service.payments.impl.StripeGatewayPayment"/>
			<column name="marchand_id" value="anasseh@yahoo.fr"/>
			<column name="secret_key" value="sk_test_TAQVs6Q2W2IR6dZErkhHWBOH"/>
			<column name="webhooks_secret_key" value="whsec_8YjCaTfZOqGiVwqMJjo9rE7xv3PS80Wp"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="version" valueNumeric="0"/>
			<column name="disabled" valueNumeric="0" />
	    </insert>	    
			        
		<insert tableName="adm_notification">
			<column name="id" valueSequenceNext="adm_notification_seq"/>
			<column name="code" value="SaveStripePMInbound"/>
			<column name="description" value="Save Stripe PM Inbound"/>
			<column name="class_name_filter" value="org.meveo.model.notification.InboundRequest"/>
			<column name="event_type_filter" value="INBOUND_REQ"/>
			<column name="event_expression_filter" value="#{event.pathInfo.endsWith('/stripe/saveCard')}"/>
			<column name="script_instance_id" valueComputed="(select id from meveo_script_instance where code='org.opencell.payment.stripe.SaveStripePMScript')"/>		
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="version" valueNumeric="0"/>
			<column name="disabled" valueNumeric="0" />
	    </insert>	
	    
	    <insert tableName="adm_notification_params">
			<column name="notification_id" valueComputed="(select id from adm_notification where code='SaveStripePMInbound')"/>	
			<column name="params" value="#{event}"/>
			<column name="params_key" value="event"/>			
	    </insert>		              
  
    </changeSet>    
</databaseChangeLog>